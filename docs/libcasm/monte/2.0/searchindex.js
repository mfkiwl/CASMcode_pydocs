Search.setIndex({"docnames": ["bibliography", "index", "installation", "reference/libcasm/_autosummary/libcasm.monte", "reference/libcasm/_autosummary/libcasm.monte.MethodLog", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.begin_lap", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.begin_section_print_always", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.begin_section_print_if_debug", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.begin_section_print_if_quiet", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.begin_section_print_if_standard", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.begin_section_print_if_verbose", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.decrease_indent", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.end_section", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.hide_clock", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.increase_indent", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.indent_str", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.lap_time", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.log_frequency", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.logfile_path", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.paragraph", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.paragraph_justification", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.paragraph_width", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.print", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.reset", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.reset_to_stdout", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.restart_clock", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.section", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.set_debug", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.set_indent_space", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.set_initial_indent_space", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.set_paragraph_justification", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.set_paragraph_width", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.set_quiet", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.set_standard", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.set_verbose", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.show_clock", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.time_s", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.verbatim", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberEngine", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberEngine.dump", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberEngine.load", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberEngine.seed", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberEngine.seed_seq", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberGenerator", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberGenerator.engine", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberGenerator.random_int", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberGenerator.random_real", "reference/libcasm/_autosummary/libcasm.monte.ValueMap", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.boolean_values", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.from_dict", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.is_mismatched", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.make_incremented_values", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.matrix_values", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.scalar_values", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.to_dict", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.vector_values", "reference/libcasm/_autosummary/libcasm.monte.events", "reference/libcasm/_autosummary/libcasm.monte.events.Atom", "reference/libcasm/_autosummary/libcasm.monte.events.Atom.n_jumps", "reference/libcasm/_autosummary/libcasm.monte.events.Atom.translation", "reference/libcasm/_autosummary/libcasm.monte.events.AtomLocation", "reference/libcasm/_autosummary/libcasm.monte.events.AtomLocation.linear_site_index", "reference/libcasm/_autosummary/libcasm.monte.events.AtomLocation.mol_comp", "reference/libcasm/_autosummary/libcasm.monte.events.AtomLocation.mol_id", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTraj", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTraj.delta_ijk", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTraj.from", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTraj.to", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTrajVector", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTrajVector.append", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTrajVector.clear", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTrajVector.extend", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTrajVector.insert", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTrajVector.pop", "reference/libcasm/_autosummary/libcasm.monte.events.AtomVector", "reference/libcasm/_autosummary/libcasm.monte.events.AtomVector.append", "reference/libcasm/_autosummary/libcasm.monte.events.AtomVector.clear", "reference/libcasm/_autosummary/libcasm.monte.events.AtomVector.extend", "reference/libcasm/_autosummary/libcasm.monte.events.AtomVector.insert", "reference/libcasm/_autosummary/libcasm.monte.events.AtomVector.pop", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.asym_size", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.asym_to_b", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.asym_to_unitl", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.bijk_to_asym", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.bijk_to_l", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.bijk_to_unitl", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_size", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_asym", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_b", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_basis_cart", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_basis_frac", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_bijk", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_cart", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_frac", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_ijk", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_unitl", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.lat_column_mat", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.make_with_custom_asym", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.make_with_custom_unitcell", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.occ_size", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.occ_to_species_index", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.site_index_converter", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.species_allowed", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.species_index_to_atoms_size", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.species_index_to_name", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.species_index_to_occupant", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.species_name_to_index", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.species_size", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.species_to_occ_index", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.transformation_matrix_to_super", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.unit_site_index_converter", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.unit_transformation_matrix_to_super", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.unitcell_index_converter", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.unitl_size", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.unitl_to_asym", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.unitl_to_b", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.unitl_to_bijk", "reference/libcasm/_autosummary/libcasm.monte.events.IntVector", "reference/libcasm/_autosummary/libcasm.monte.events.IntVector.append", "reference/libcasm/_autosummary/libcasm.monte.events.IntVector.clear", "reference/libcasm/_autosummary/libcasm.monte.events.IntVector.count", "reference/libcasm/_autosummary/libcasm.monte.events.IntVector.extend", "reference/libcasm/_autosummary/libcasm.monte.events.IntVector.insert", "reference/libcasm/_autosummary/libcasm.monte.events.IntVector.pop", "reference/libcasm/_autosummary/libcasm.monte.events.IntVector.remove", "reference/libcasm/_autosummary/libcasm.monte.events.LongVector", "reference/libcasm/_autosummary/libcasm.monte.events.LongVector.append", "reference/libcasm/_autosummary/libcasm.monte.events.LongVector.clear", "reference/libcasm/_autosummary/libcasm.monte.events.LongVector.count", "reference/libcasm/_autosummary/libcasm.monte.events.LongVector.extend", "reference/libcasm/_autosummary/libcasm.monte.events.LongVector.insert", "reference/libcasm/_autosummary/libcasm.monte.events.LongVector.pop", "reference/libcasm/_autosummary/libcasm.monte.events.LongVector.remove", "reference/libcasm/_autosummary/libcasm.monte.events.Mol", "reference/libcasm/_autosummary/libcasm.monte.events.Mol.asymmetric_unit_index", "reference/libcasm/_autosummary/libcasm.monte.events.Mol.component_id", "reference/libcasm/_autosummary/libcasm.monte.events.Mol.id", "reference/libcasm/_autosummary/libcasm.monte.events.Mol.linear_site_index", "reference/libcasm/_autosummary/libcasm.monte.events.Mol.mol_location_index", "reference/libcasm/_autosummary/libcasm.monte.events.MolVector", "reference/libcasm/_autosummary/libcasm.monte.events.MolVector.append", "reference/libcasm/_autosummary/libcasm.monte.events.MolVector.clear", "reference/libcasm/_autosummary/libcasm.monte.events.MolVector.extend", "reference/libcasm/_autosummary/libcasm.monte.events.MolVector.insert", "reference/libcasm/_autosummary/libcasm.monte.events.MolVector.pop", "reference/libcasm/_autosummary/libcasm.monte.events.MultiOccSwap", "reference/libcasm/_autosummary/libcasm.monte.events.MultiOccSwap.from_dict", "reference/libcasm/_autosummary/libcasm.monte.events.MultiOccSwap.reverse", "reference/libcasm/_autosummary/libcasm.monte.events.MultiOccSwap.sort", "reference/libcasm/_autosummary/libcasm.monte.events.MultiOccSwap.sorted", "reference/libcasm/_autosummary/libcasm.monte.events.MultiOccSwap.swaps", "reference/libcasm/_autosummary/libcasm.monte.events.MultiOccSwap.to_dict", "reference/libcasm/_autosummary/libcasm.monte.events.MultiOccSwap.total_count", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidate", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidate.asymmetric_unit_index", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidate.from_dict", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidate.is_valid", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidate.species_index", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidate.to_dict", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidateList", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidateList.from_dict", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidateList.index", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidateList.matching_index", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidateList.to_dict", "reference/libcasm/_autosummary/libcasm.monte.events.OccEvent", "reference/libcasm/_autosummary/libcasm.monte.events.OccEvent.atom_traj", "reference/libcasm/_autosummary/libcasm.monte.events.OccEvent.linear_site_index", "reference/libcasm/_autosummary/libcasm.monte.events.OccEvent.new_occ", "reference/libcasm/_autosummary/libcasm.monte.events.OccEvent.occ_transform", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.apply", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.atom", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.atom_positions_cart", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.atom_positions_cart_within", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.atom_size", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.cand_size", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.cand_size_by_candidate_index", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.candidate_list", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.choose_mol", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.choose_mol_by_candidate_index", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.convert", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.current_atom_n_jumps", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.current_atom_names", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.current_atom_position_index", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.current_atom_species_index", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.initial_atom_position_index", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.initial_atom_species_index", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.initialize", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.linear_site_index_to_mol_id", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.mol", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.mol_id", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.mol_id_by_candidate_index", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.mol_size", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.first", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.from_dict", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.is_valid", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.reverse", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.second", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.sort", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.sorted", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.to_dict", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwapCountMap", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwapCountMap.items", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwapCountMap.keys", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwapCountMap.values", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransform", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransform.asym", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransform.from_species", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransform.linear_site_index", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransform.mol_id", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransform.to_species", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransformVector", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransformVector.append", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransformVector.clear", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransformVector.extend", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransformVector.insert", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransformVector.pop", "reference/libcasm/_autosummary/libcasm.monte.events.choose_canonical_swap", "reference/libcasm/_autosummary/libcasm.monte.events.choose_semigrand_canonical_multiswap", "reference/libcasm/_autosummary/libcasm.monte.events.choose_semigrand_canonical_swap", "reference/libcasm/_autosummary/libcasm.monte.events.is_allowed_canonical_swap", "reference/libcasm/_autosummary/libcasm.monte.events.make_canonical_swaps", "reference/libcasm/_autosummary/libcasm.monte.events.make_multiswaps", "reference/libcasm/_autosummary/libcasm.monte.events.make_semigrand_canonical_swaps", "reference/libcasm/_autosummary/libcasm.monte.events.propose_canonical_event", "reference/libcasm/_autosummary/libcasm.monte.events.propose_canonical_event_from_swap", "reference/libcasm/_autosummary/libcasm.monte.events.propose_semigrand_canonical_event", "reference/libcasm/_autosummary/libcasm.monte.events.propose_semigrand_canonical_event_from_multiswap", "reference/libcasm/_autosummary/libcasm.monte.events.propose_semigrand_canonical_event_from_swap", "reference/libcasm/_autosummary/libcasm.monte.events.propose_semigrand_canonical_multiswap_event", "reference/libcasm/_autosummary/libcasm.monte.events.swaps_allowed_per_unitcell", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.from_dict", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.from_linear_site_index", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.n_sites", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.n_unitcells", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.n_variable_sites", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.occ", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.occupation", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.set_occ", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.set_occupation", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.shape", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.to_dict", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.to_linear_site_index", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.within", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingFormationEnergy", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingFormationEnergy.occ_delta_per_supercell", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingFormationEnergy.per_supercell", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingFormationEnergy.per_unitcell", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingFormationEnergy.set_state", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingParamComposition", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingParamComposition.n_independent_compositions", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingParamComposition.occ_delta_per_supercell", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingParamComposition.per_supercell", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingParamComposition.per_unitcell", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingParamComposition.set_state", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingState", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingState.conditions", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingState.configuration", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingState.from_dict", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingState.properties", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingState.to_dict", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingSystem", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingSystem.formation_energy_calculator", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingSystem.param_composition_calculator", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.conditions", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.data", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.default_json_sampling_functions", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.default_sampling_functions", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.formation_energy_calculator", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.param_composition_calculator", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.potential", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.run", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.state", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.system", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.exchange_potential", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.from_dict", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.from_values", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.temperature", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.to_dict", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.to_values", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.acceptance_rate", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.completion_check", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.json_samplers", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.json_sampling_functions", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.n_accept", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.n_pass", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.n_reject", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.n_steps_per_pass", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.rejection_rate", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.reset", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.sample_weight", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.samplers", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.sampling_functions", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.to_dict", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalEventGenerator", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalEventGenerator.apply", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalEventGenerator.propose", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalEventGenerator.set_state", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential.occ_delta_per_supercell", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential.occ_event_delta_per_supercell", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential.per_supercell", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential.per_unitcell", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential.set_state", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.default_write_status", "reference/libcasm/_autosummary/libcasm.monte.ising_py", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.from_dict", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.from_linear_site_index", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.n_sites", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.n_unitcells", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.n_variable_sites", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.occ", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.occupation", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.set_occ", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.set_occupation", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.shape", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.to_dict", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.to_linear_site_index", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.within", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingFormationEnergy", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingFormationEnergy.J", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingFormationEnergy.lattice_type", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingFormationEnergy.occ_delta_per_supercell", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingFormationEnergy.per_supercell", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingFormationEnergy.per_unitcell", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingFormationEnergy.set_state", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingFormationEnergy.state", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingParamComposition", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingParamComposition.n_independent_compositions", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingParamComposition.occ_delta_per_supercell", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingParamComposition.per_supercell", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingParamComposition.per_unitcell", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingParamComposition.set_state", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingState", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingSystem", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.conditions", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.data", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.formation_energy_calculator", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.param_composition_calculator", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.potential", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.run", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.state", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.system", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.exchange_potential", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.from_dict", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.from_values", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.temperature", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.to_dict", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.to_values", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.acceptance_rate", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.completion_check", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.n_accept", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.n_pass", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.n_reject", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.n_steps_per_pass", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.rejection_rate", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.reset", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.sample_weight", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.samplers", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.sampling_functions", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.to_dict", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator.apply", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator.occ_event", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator.propose", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator.set_state", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator.state", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.conditions", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.formation_energy_calculator", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.occ_delta_per_supercell", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.param_composition_calculator", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.per_supercell", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.per_unitcell", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.set_state", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.state", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.system", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.default_write_status", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.make_formation_energy_f", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.make_param_composition_f", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.make_potential_energy_f", "reference/libcasm/_autosummary/libcasm.monte.methods", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.acceptance_rate", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.completion_check", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.json_samplers", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.json_sampling_functions", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.n_accept", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.n_pass", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.n_reject", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.n_steps_per_pass", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.rejection_rate", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.sample_weight", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.samplers", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.sampling_functions", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.to_dict", "reference/libcasm/_autosummary/libcasm.monte.methods.basic_occupation_metropolis", "reference/libcasm/_autosummary/libcasm.monte.methods.metropolis_acceptance", "reference/libcasm/_autosummary/libcasm.monte.sampling", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatistics", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatistics.calculated_precision", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatistics.mean", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatistics.relative_precision", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatistics.to_dict", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatisticsCalculator", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatisticsCalculator.calculate", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatisticsCalculator.confidence", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatisticsCalculator.from_dict", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatisticsCalculator.n_resamples", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatisticsCalculator.to_dict", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatisticsCalculator.weighted_observations_method", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheck", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheck.check", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheck.count_and_time_check", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheck.count_check", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheck.params", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheck.reset", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheck.results", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheck.time_check", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.calc_statistics_f", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.check_base", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.check_begin", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.check_period", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.check_period_max", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.check_shift", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.cutoff_params", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.equilibration_check_f", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.from_dict", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.log_spacing", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.requested_precision", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.clocktime", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.convergence_check_results", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.count", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.equilibration_check_results", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.full_reset", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.has_all_minimums_met", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.has_any_maximum_met", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.is_complete", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.n_samples", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.n_samples_at_convergence_check", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.params", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.partial_reset", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.time", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.to_dict", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceCheckResults", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceCheckResults.N_samples_for_statistics", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceCheckResults.all_converged", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceCheckResults.individual_results", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceCheckResults.to_dict", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceResultMap", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceResultMap.items", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceResultMap.keys", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceResultMap.values", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.from_dict", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.max_clocktime", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.max_count", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.max_sample", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.max_time", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.min_clocktime", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.min_count", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.min_sample", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.min_time", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.to_dict", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationCheckResults", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationCheckResults.N_samples_for_all_to_equilibrate", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationCheckResults.all_equilibrated", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationCheckResults.individual_results", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationCheckResults.to_dict", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationResultMap", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationResultMap.items", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationResultMap.keys", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationResultMap.values", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualConvergenceResult", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualConvergenceResult.is_converged", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualConvergenceResult.requested_precision", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualConvergenceResult.stats", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualConvergenceResult.to_dict", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualEquilibrationResult", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualEquilibrationResult.N_samples_for_equilibration", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualEquilibrationResult.is_equilibrated", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualEquilibrationResult.to_dict", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecision", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecision.abs_convergence_is_required", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecision.abs_precision", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecision.from_dict", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecision.rel_convergence_is_required", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecision.rel_precision", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecision.to_dict", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecisionConstructor", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecisionConstructor.set_precision", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecisionMap", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecisionMap.items", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecisionMap.keys", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecisionMap.values", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_METHOD", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_METHOD.CUSTOM", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_METHOD.LINEAR", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_METHOD.LOG", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_METHOD.name", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_METHOD.value", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_MODE", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_MODE.BY_PASS", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_MODE.BY_STEP", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_MODE.BY_TIME", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_MODE.name", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_MODE.value", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.append", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.clear", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.component", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.component_names", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.n_components", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.n_samples", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.sample", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.sample_capacity", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.set_capacity_increment", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.set_sample_capacity", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.set_values", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.shape", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.values", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplerComponent", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplerComponent.component_index", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplerComponent.component_name", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplerComponent.sampler_name", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplerMap", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplerMap.items", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplerMap.keys", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplerMap.values", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.base", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.begin", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.do_sample_time", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.do_sample_trajectory", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.period", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.sample_method", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.sample_mode", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.sampler_names", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.shift", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.stochastic_sample_period", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunction", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunction.component_names", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunction.description", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunction.function", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunction.name", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunction.shape", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunctionMap", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunctionMap.items", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunctionMap.keys", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunctionMap.values", "reference/libcasm/_autosummary/libcasm.monte.sampling.all_minimums_met", "reference/libcasm/_autosummary/libcasm.monte.sampling.any_maximum_met", "reference/libcasm/_autosummary/libcasm.monte.sampling.colmajor_component_names", "reference/libcasm/_autosummary/libcasm.monte.sampling.component_convergence_check", "reference/libcasm/_autosummary/libcasm.monte.sampling.converge", "reference/libcasm/_autosummary/libcasm.monte.sampling.convergence_check", "reference/libcasm/_autosummary/libcasm.monte.sampling.default_component_names", "reference/libcasm/_autosummary/libcasm.monte.sampling.default_equilibration_check", "reference/libcasm/_autosummary/libcasm.monte.sampling.get_n_samples", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonStateSamplingFunction", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonStateSamplingFunction.description", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonStateSamplingFunction.function", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonStateSamplingFunction.name", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonStateSamplingFunctionMap", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonStateSamplingFunctionMap.items", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonStateSamplingFunctionMap.keys", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonStateSamplingFunctionMap.values", "reference/libcasm/_autosummary/libcasm.monte.sampling.matrix_as_vector", "reference/libcasm/_autosummary/libcasm.monte.sampling.scalar_as_vector", "reference/libcasm/index", "usage", "usage/completion_check", "usage/overview"], "filenames": ["bibliography.rst", "index.rst", "installation.rst", "reference/libcasm/_autosummary/libcasm.monte.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.begin_lap.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.begin_section_print_always.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.begin_section_print_if_debug.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.begin_section_print_if_quiet.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.begin_section_print_if_standard.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.begin_section_print_if_verbose.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.decrease_indent.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.end_section.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.hide_clock.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.increase_indent.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.indent_str.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.lap_time.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.log_frequency.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.logfile_path.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.paragraph.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.paragraph_justification.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.paragraph_width.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.print.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.reset.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.reset_to_stdout.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.restart_clock.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.section.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.set_debug.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.set_indent_space.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.set_initial_indent_space.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.set_paragraph_justification.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.set_paragraph_width.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.set_quiet.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.set_standard.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.set_verbose.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.show_clock.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.time_s.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.verbatim.rst", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberEngine.rst", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberEngine.dump.rst", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberEngine.load.rst", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberEngine.seed.rst", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberEngine.seed_seq.rst", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberGenerator.rst", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberGenerator.engine.rst", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberGenerator.random_int.rst", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberGenerator.random_real.rst", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.rst", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.boolean_values.rst", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.from_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.is_mismatched.rst", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.make_incremented_values.rst", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.matrix_values.rst", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.scalar_values.rst", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.vector_values.rst", "reference/libcasm/_autosummary/libcasm.monte.events.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Atom.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Atom.n_jumps.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Atom.translation.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomLocation.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomLocation.linear_site_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomLocation.mol_comp.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomLocation.mol_id.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTraj.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTraj.delta_ijk.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTraj.from.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTraj.to.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTrajVector.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTrajVector.append.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTrajVector.clear.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTrajVector.extend.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTrajVector.insert.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTrajVector.pop.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomVector.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomVector.append.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomVector.clear.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomVector.extend.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomVector.insert.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomVector.pop.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.asym_size.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.asym_to_b.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.asym_to_unitl.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.bijk_to_asym.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.bijk_to_l.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.bijk_to_unitl.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_size.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_asym.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_b.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_basis_cart.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_basis_frac.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_bijk.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_cart.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_frac.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_ijk.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_unitl.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.lat_column_mat.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.make_with_custom_asym.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.make_with_custom_unitcell.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.occ_size.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.occ_to_species_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.site_index_converter.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.species_allowed.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.species_index_to_atoms_size.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.species_index_to_name.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.species_index_to_occupant.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.species_name_to_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.species_size.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.species_to_occ_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.transformation_matrix_to_super.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.unit_site_index_converter.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.unit_transformation_matrix_to_super.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.unitcell_index_converter.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.unitl_size.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.unitl_to_asym.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.unitl_to_b.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.unitl_to_bijk.rst", "reference/libcasm/_autosummary/libcasm.monte.events.IntVector.rst", "reference/libcasm/_autosummary/libcasm.monte.events.IntVector.append.rst", "reference/libcasm/_autosummary/libcasm.monte.events.IntVector.clear.rst", "reference/libcasm/_autosummary/libcasm.monte.events.IntVector.count.rst", "reference/libcasm/_autosummary/libcasm.monte.events.IntVector.extend.rst", "reference/libcasm/_autosummary/libcasm.monte.events.IntVector.insert.rst", "reference/libcasm/_autosummary/libcasm.monte.events.IntVector.pop.rst", "reference/libcasm/_autosummary/libcasm.monte.events.IntVector.remove.rst", "reference/libcasm/_autosummary/libcasm.monte.events.LongVector.rst", "reference/libcasm/_autosummary/libcasm.monte.events.LongVector.append.rst", "reference/libcasm/_autosummary/libcasm.monte.events.LongVector.clear.rst", "reference/libcasm/_autosummary/libcasm.monte.events.LongVector.count.rst", "reference/libcasm/_autosummary/libcasm.monte.events.LongVector.extend.rst", "reference/libcasm/_autosummary/libcasm.monte.events.LongVector.insert.rst", "reference/libcasm/_autosummary/libcasm.monte.events.LongVector.pop.rst", "reference/libcasm/_autosummary/libcasm.monte.events.LongVector.remove.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Mol.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Mol.asymmetric_unit_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Mol.component_id.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Mol.id.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Mol.linear_site_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Mol.mol_location_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.MolVector.rst", "reference/libcasm/_autosummary/libcasm.monte.events.MolVector.append.rst", "reference/libcasm/_autosummary/libcasm.monte.events.MolVector.clear.rst", "reference/libcasm/_autosummary/libcasm.monte.events.MolVector.extend.rst", "reference/libcasm/_autosummary/libcasm.monte.events.MolVector.insert.rst", "reference/libcasm/_autosummary/libcasm.monte.events.MolVector.pop.rst", "reference/libcasm/_autosummary/libcasm.monte.events.MultiOccSwap.rst", "reference/libcasm/_autosummary/libcasm.monte.events.MultiOccSwap.from_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.events.MultiOccSwap.reverse.rst", "reference/libcasm/_autosummary/libcasm.monte.events.MultiOccSwap.sort.rst", "reference/libcasm/_autosummary/libcasm.monte.events.MultiOccSwap.sorted.rst", "reference/libcasm/_autosummary/libcasm.monte.events.MultiOccSwap.swaps.rst", "reference/libcasm/_autosummary/libcasm.monte.events.MultiOccSwap.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.events.MultiOccSwap.total_count.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidate.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidate.asymmetric_unit_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidate.from_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidate.is_valid.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidate.species_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidate.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidateList.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidateList.from_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidateList.index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidateList.matching_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidateList.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccEvent.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccEvent.atom_traj.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccEvent.linear_site_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccEvent.new_occ.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccEvent.occ_transform.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.apply.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.atom.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.atom_positions_cart.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.atom_positions_cart_within.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.atom_size.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.cand_size.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.cand_size_by_candidate_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.candidate_list.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.choose_mol.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.choose_mol_by_candidate_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.convert.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.current_atom_n_jumps.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.current_atom_names.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.current_atom_position_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.current_atom_species_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.initial_atom_position_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.initial_atom_species_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.initialize.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.linear_site_index_to_mol_id.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.mol.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.mol_id.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.mol_id_by_candidate_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.mol_size.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.first.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.from_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.is_valid.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.reverse.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.second.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.sort.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.sorted.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwapCountMap.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwapCountMap.items.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwapCountMap.keys.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwapCountMap.values.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransform.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransform.asym.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransform.from_species.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransform.linear_site_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransform.mol_id.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransform.to_species.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransformVector.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransformVector.append.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransformVector.clear.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransformVector.extend.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransformVector.insert.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransformVector.pop.rst", "reference/libcasm/_autosummary/libcasm.monte.events.choose_canonical_swap.rst", "reference/libcasm/_autosummary/libcasm.monte.events.choose_semigrand_canonical_multiswap.rst", "reference/libcasm/_autosummary/libcasm.monte.events.choose_semigrand_canonical_swap.rst", "reference/libcasm/_autosummary/libcasm.monte.events.is_allowed_canonical_swap.rst", "reference/libcasm/_autosummary/libcasm.monte.events.make_canonical_swaps.rst", "reference/libcasm/_autosummary/libcasm.monte.events.make_multiswaps.rst", "reference/libcasm/_autosummary/libcasm.monte.events.make_semigrand_canonical_swaps.rst", "reference/libcasm/_autosummary/libcasm.monte.events.propose_canonical_event.rst", "reference/libcasm/_autosummary/libcasm.monte.events.propose_canonical_event_from_swap.rst", "reference/libcasm/_autosummary/libcasm.monte.events.propose_semigrand_canonical_event.rst", "reference/libcasm/_autosummary/libcasm.monte.events.propose_semigrand_canonical_event_from_multiswap.rst", "reference/libcasm/_autosummary/libcasm.monte.events.propose_semigrand_canonical_event_from_swap.rst", "reference/libcasm/_autosummary/libcasm.monte.events.propose_semigrand_canonical_multiswap_event.rst", "reference/libcasm/_autosummary/libcasm.monte.events.swaps_allowed_per_unitcell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.from_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.from_linear_site_index.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.n_sites.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.n_unitcells.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.n_variable_sites.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.occ.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.occupation.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.set_occ.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.set_occupation.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.shape.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.to_linear_site_index.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.within.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingFormationEnergy.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingFormationEnergy.occ_delta_per_supercell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingFormationEnergy.per_supercell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingFormationEnergy.per_unitcell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingFormationEnergy.set_state.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingParamComposition.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingParamComposition.n_independent_compositions.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingParamComposition.occ_delta_per_supercell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingParamComposition.per_supercell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingParamComposition.per_unitcell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingParamComposition.set_state.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingState.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingState.conditions.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingState.configuration.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingState.from_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingState.properties.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingState.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingSystem.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingSystem.formation_energy_calculator.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingSystem.param_composition_calculator.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.conditions.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.data.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.default_json_sampling_functions.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.default_sampling_functions.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.formation_energy_calculator.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.param_composition_calculator.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.potential.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.run.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.state.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.system.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.exchange_potential.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.from_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.from_values.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.temperature.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.to_values.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.acceptance_rate.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.completion_check.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.json_samplers.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.json_sampling_functions.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.n_accept.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.n_pass.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.n_reject.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.n_steps_per_pass.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.rejection_rate.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.reset.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.sample_weight.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.samplers.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.sampling_functions.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalEventGenerator.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalEventGenerator.apply.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalEventGenerator.propose.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalEventGenerator.set_state.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential.occ_delta_per_supercell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential.occ_event_delta_per_supercell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential.per_supercell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential.per_unitcell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential.set_state.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.default_write_status.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.from_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.from_linear_site_index.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.n_sites.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.n_unitcells.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.n_variable_sites.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.occ.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.occupation.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.set_occ.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.set_occupation.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.shape.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.to_linear_site_index.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.within.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingFormationEnergy.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingFormationEnergy.J.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingFormationEnergy.lattice_type.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingFormationEnergy.occ_delta_per_supercell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingFormationEnergy.per_supercell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingFormationEnergy.per_unitcell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingFormationEnergy.set_state.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingFormationEnergy.state.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingParamComposition.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingParamComposition.n_independent_compositions.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingParamComposition.occ_delta_per_supercell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingParamComposition.per_supercell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingParamComposition.per_unitcell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingParamComposition.set_state.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingState.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingSystem.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.conditions.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.data.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.formation_energy_calculator.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.param_composition_calculator.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.potential.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.run.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.state.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.system.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.exchange_potential.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.from_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.from_values.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.temperature.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.to_values.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.acceptance_rate.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.completion_check.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.n_accept.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.n_pass.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.n_reject.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.n_steps_per_pass.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.rejection_rate.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.reset.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.sample_weight.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.samplers.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.sampling_functions.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator.apply.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator.occ_event.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator.propose.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator.set_state.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator.state.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.conditions.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.formation_energy_calculator.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.occ_delta_per_supercell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.param_composition_calculator.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.per_supercell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.per_unitcell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.set_state.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.state.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.system.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.default_write_status.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.make_formation_energy_f.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.make_param_composition_f.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.make_potential_energy_f.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.acceptance_rate.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.completion_check.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.json_samplers.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.json_sampling_functions.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.n_accept.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.n_pass.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.n_reject.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.n_steps_per_pass.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.rejection_rate.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.sample_weight.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.samplers.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.sampling_functions.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.basic_occupation_metropolis.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.metropolis_acceptance.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatistics.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatistics.calculated_precision.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatistics.mean.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatistics.relative_precision.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatistics.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatisticsCalculator.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatisticsCalculator.calculate.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatisticsCalculator.confidence.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatisticsCalculator.from_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatisticsCalculator.n_resamples.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatisticsCalculator.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatisticsCalculator.weighted_observations_method.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheck.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheck.check.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheck.count_and_time_check.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheck.count_check.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheck.params.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheck.reset.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheck.results.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheck.time_check.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.calc_statistics_f.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.check_base.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.check_begin.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.check_period.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.check_period_max.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.check_shift.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.cutoff_params.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.equilibration_check_f.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.from_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.log_spacing.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.requested_precision.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.clocktime.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.convergence_check_results.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.count.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.equilibration_check_results.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.full_reset.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.has_all_minimums_met.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.has_any_maximum_met.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.is_complete.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.n_samples.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.n_samples_at_convergence_check.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.params.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.partial_reset.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.time.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceCheckResults.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceCheckResults.N_samples_for_statistics.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceCheckResults.all_converged.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceCheckResults.individual_results.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceCheckResults.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceResultMap.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceResultMap.items.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceResultMap.keys.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceResultMap.values.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.from_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.max_clocktime.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.max_count.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.max_sample.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.max_time.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.min_clocktime.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.min_count.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.min_sample.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.min_time.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationCheckResults.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationCheckResults.N_samples_for_all_to_equilibrate.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationCheckResults.all_equilibrated.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationCheckResults.individual_results.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationCheckResults.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationResultMap.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationResultMap.items.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationResultMap.keys.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationResultMap.values.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualConvergenceResult.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualConvergenceResult.is_converged.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualConvergenceResult.requested_precision.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualConvergenceResult.stats.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualConvergenceResult.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualEquilibrationResult.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualEquilibrationResult.N_samples_for_equilibration.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualEquilibrationResult.is_equilibrated.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualEquilibrationResult.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecision.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecision.abs_convergence_is_required.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecision.abs_precision.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecision.from_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecision.rel_convergence_is_required.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecision.rel_precision.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecision.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecisionConstructor.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecisionConstructor.set_precision.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecisionMap.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecisionMap.items.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecisionMap.keys.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecisionMap.values.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_METHOD.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_METHOD.CUSTOM.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_METHOD.LINEAR.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_METHOD.LOG.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_METHOD.name.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_METHOD.value.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_MODE.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_MODE.BY_PASS.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_MODE.BY_STEP.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_MODE.BY_TIME.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_MODE.name.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_MODE.value.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.append.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.clear.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.component.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.component_names.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.n_components.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.n_samples.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.sample.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.sample_capacity.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.set_capacity_increment.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.set_sample_capacity.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.set_values.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.shape.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.values.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplerComponent.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplerComponent.component_index.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplerComponent.component_name.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplerComponent.sampler_name.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplerMap.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplerMap.items.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplerMap.keys.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplerMap.values.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.base.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.begin.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.do_sample_time.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.do_sample_trajectory.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.period.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.sample_method.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.sample_mode.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.sampler_names.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.shift.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.stochastic_sample_period.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunction.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunction.component_names.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunction.description.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunction.function.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunction.name.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunction.shape.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunctionMap.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunctionMap.items.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunctionMap.keys.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunctionMap.values.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.all_minimums_met.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.any_maximum_met.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.colmajor_component_names.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.component_convergence_check.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.converge.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.convergence_check.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.default_component_names.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.default_equilibration_check.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.get_n_samples.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonStateSamplingFunction.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonStateSamplingFunction.description.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonStateSamplingFunction.function.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonStateSamplingFunction.name.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonStateSamplingFunctionMap.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonStateSamplingFunctionMap.items.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonStateSamplingFunctionMap.keys.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonStateSamplingFunctionMap.values.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.matrix_as_vector.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.scalar_as_vector.rst", "reference/libcasm/index.rst", "usage.rst", "usage/completion_check.rst", "usage/overview.rst"], "titles": ["Bibliography", "libcasm-monte", "Installation", "libcasm.monte", "MethodLog", "begin_lap", "begin_section_print_always", "begin_section_print_if_debug", "begin_section_print_if_quiet", "begin_section_print_if_standard", "begin_section_print_if_verbose", "decrease_indent", "end_section", "hide_clock", "increase_indent", "indent_str", "lap_time", "log_frequency", "logfile_path", "paragraph", "paragraph_justification", "paragraph_width", "print", "reset", "reset_to_stdout", "restart_clock", "section", "set_debug", "set_indent_space", "set_initial_indent_space", "set_paragraph_justification", "set_paragraph_width", "set_quiet", "set_standard", "set_verbose", "show_clock", "time_s", "verbatim", "RandomNumberEngine", "dump", "load", "seed", "seed_seq", "RandomNumberGenerator", "engine", "random_int", "random_real", "ValueMap", "boolean_values", "from_dict", "is_mismatched", "make_incremented_values", "matrix_values", "scalar_values", "to_dict", "vector_values", "libcasm.monte.events", "Atom", "n_jumps", "translation", "AtomLocation", "linear_site_index", "mol_comp", "mol_id", "AtomTraj", "delta_ijk", "from", "to", "AtomTrajVector", "append", "clear", "extend", "insert", "pop", "AtomVector", "append", "clear", "extend", "insert", "pop", "Conversions", "asym_size", "asym_to_b", "asym_to_unitl", "bijk_to_asym", "bijk_to_l", "bijk_to_unitl", "l_size", "l_to_asym", "l_to_b", "l_to_basis_cart", "l_to_basis_frac", "l_to_bijk", "l_to_cart", "l_to_frac", "l_to_ijk", "l_to_unitl", "lat_column_mat", "make_with_custom_asym", "make_with_custom_unitcell", "occ_size", "occ_to_species_index", "site_index_converter", "species_allowed", "species_index_to_atoms_size", "species_index_to_name", "species_index_to_occupant", "species_name_to_index", "species_size", "species_to_occ_index", "transformation_matrix_to_super", "unit_site_index_converter", "unit_transformation_matrix_to_super", "unitcell_index_converter", "unitl_size", "unitl_to_asym", "unitl_to_b", "unitl_to_bijk", "IntVector", "append", "clear", "count", "extend", "insert", "pop", "remove", "LongVector", "append", "clear", "count", "extend", "insert", "pop", "remove", "Mol", "asymmetric_unit_index", "component_id", "id", "linear_site_index", "mol_location_index", "MolVector", "append", "clear", "extend", "insert", "pop", "MultiOccSwap", "from_dict", "reverse", "sort", "sorted", "swaps", "to_dict", "total_count", "OccCandidate", "asymmetric_unit_index", "from_dict", "is_valid", "species_index", "to_dict", "OccCandidateList", "from_dict", "index", "matching_index", "to_dict", "OccEvent", "atom_traj", "linear_site_index", "new_occ", "occ_transform", "OccLocation", "apply", "atom", "atom_positions_cart", "atom_positions_cart_within", "atom_size", "cand_size", "cand_size_by_candidate_index", "candidate_list", "choose_mol", "choose_mol_by_candidate_index", "convert", "current_atom_n_jumps", "current_atom_names", "current_atom_position_index", "current_atom_species_index", "initial_atom_position_index", "initial_atom_species_index", "initialize", "linear_site_index_to_mol_id", "mol", "mol_id", "mol_id_by_candidate_index", "mol_size", "OccSwap", "first", "from_dict", "is_valid", "reverse", "second", "sort", "sorted", "to_dict", "OccSwapCountMap", "items", "keys", "values", "OccTransform", "asym", "from_species", "linear_site_index", "mol_id", "to_species", "OccTransformVector", "append", "clear", "extend", "insert", "pop", "choose_canonical_swap", "choose_semigrand_canonical_multiswap", "choose_semigrand_canonical_swap", "is_allowed_canonical_swap", "make_canonical_swaps", "make_multiswaps", "make_semigrand_canonical_swaps", "propose_canonical_event", "propose_canonical_event_from_swap", "propose_semigrand_canonical_event", "propose_semigrand_canonical_event_from_multiswap", "propose_semigrand_canonical_event_from_swap", "propose_semigrand_canonical_multiswap_event", "swaps_allowed_per_unitcell", "libcasm.monte.ising_cpp", "IsingConfiguration", "from_dict", "from_linear_site_index", "n_sites", "n_unitcells", "n_variable_sites", "occ", "occupation", "set_occ", "set_occupation", "shape", "to_dict", "to_linear_site_index", "within", "IsingFormationEnergy", "occ_delta_per_supercell", "per_supercell", "per_unitcell", "set_state", "IsingParamComposition", "n_independent_compositions", "occ_delta_per_supercell", "per_supercell", "per_unitcell", "set_state", "IsingState", "conditions", "configuration", "from_dict", "properties", "to_dict", "IsingSystem", "formation_energy_calculator", "param_composition_calculator", "libcasm.monte.ising_cpp.semigrand_canonical", "SemiGrandCanonicalCalculator", "conditions", "data", "default_json_sampling_functions", "default_sampling_functions", "formation_energy_calculator", "param_composition_calculator", "potential", "run", "state", "system", "SemiGrandCanonicalConditions", "exchange_potential", "from_dict", "from_values", "temperature", "to_dict", "to_values", "SemiGrandCanonicalData", "acceptance_rate", "completion_check", "json_samplers", "json_sampling_functions", "n_accept", "n_pass", "n_reject", "n_steps_per_pass", "rejection_rate", "reset", "sample_weight", "samplers", "sampling_functions", "to_dict", "SemiGrandCanonicalEventGenerator", "apply", "propose", "set_state", "SemiGrandCanonicalPotential", "occ_delta_per_supercell", "occ_event_delta_per_supercell", "per_supercell", "per_unitcell", "set_state", "default_write_status", "libcasm.monte.ising_py", "IsingConfiguration", "from_dict", "from_linear_site_index", "n_sites", "n_unitcells", "n_variable_sites", "occ", "occupation", "set_occ", "set_occupation", "shape", "to_dict", "to_linear_site_index", "within", "IsingFormationEnergy", "J", "lattice_type", "occ_delta_per_supercell", "per_supercell", "per_unitcell", "set_state", "state", "IsingParamComposition", "n_independent_compositions", "occ_delta_per_supercell", "per_supercell", "per_unitcell", "set_state", "IsingState", "IsingSystem", "libcasm.monte.ising_py.semigrand_canonical", "SemiGrandCanonicalCalculator", "conditions", "data", "formation_energy_calculator", "param_composition_calculator", "potential", "run", "state", "system", "SemiGrandCanonicalConditions", "exchange_potential", "from_dict", "from_values", "temperature", "to_dict", "to_values", "SemiGrandCanonicalData", "acceptance_rate", "completion_check", "n_accept", "n_pass", "n_reject", "n_steps_per_pass", "rejection_rate", "reset", "sample_weight", "samplers", "sampling_functions", "to_dict", "SemiGrandCanonicalEventGenerator", "apply", "occ_event", "propose", "set_state", "state", "SemiGrandCanonicalPotential", "conditions", "formation_energy_calculator", "occ_delta_per_supercell", "param_composition_calculator", "per_supercell", "per_unitcell", "set_state", "state", "system", "default_write_status", "make_formation_energy_f", "make_param_composition_f", "make_potential_energy_f", "libcasm.monte.methods", "BasicOccupationMetropolisData", "acceptance_rate", "completion_check", "json_samplers", "json_sampling_functions", "n_accept", "n_pass", "n_reject", "n_steps_per_pass", "rejection_rate", "sample_weight", "samplers", "sampling_functions", "to_dict", "basic_occupation_metropolis", "metropolis_acceptance", "libcasm.monte.sampling", "BasicStatistics", "calculated_precision", "mean", "relative_precision", "to_dict", "BasicStatisticsCalculator", "calculate", "confidence", "from_dict", "n_resamples", "to_dict", "weighted_observations_method", "CompletionCheck", "check", "count_and_time_check", "count_check", "params", "reset", "results", "time_check", "CompletionCheckParams", "calc_statistics_f", "check_base", "check_begin", "check_period", "check_period_max", "check_shift", "cutoff_params", "equilibration_check_f", "from_dict", "log_spacing", "requested_precision", "CompletionCheckResults", "clocktime", "convergence_check_results", "count", "equilibration_check_results", "full_reset", "has_all_minimums_met", "has_any_maximum_met", "is_complete", "n_samples", "n_samples_at_convergence_check", "params", "partial_reset", "time", "to_dict", "ConvergenceCheckResults", "N_samples_for_statistics", "all_converged", "individual_results", "to_dict", "ConvergenceResultMap", "items", "keys", "values", "CutoffCheckParams", "from_dict", "max_clocktime", "max_count", "max_sample", "max_time", "min_clocktime", "min_count", "min_sample", "min_time", "to_dict", "EquilibrationCheckResults", "N_samples_for_all_to_equilibrate", "all_equilibrated", "individual_results", "to_dict", "EquilibrationResultMap", "items", "keys", "values", "IndividualConvergenceResult", "is_converged", "requested_precision", "stats", "to_dict", "IndividualEquilibrationResult", "N_samples_for_equilibration", "is_equilibrated", "to_dict", "RequestedPrecision", "abs_convergence_is_required", "abs_precision", "from_dict", "rel_convergence_is_required", "rel_precision", "to_dict", "RequestedPrecisionConstructor", "set_precision", "RequestedPrecisionMap", "items", "keys", "values", "SAMPLE_METHOD", "CUSTOM", "LINEAR", "LOG", "name", "value", "SAMPLE_MODE", "BY_PASS", "BY_STEP", "BY_TIME", "name", "value", "Sampler", "append", "clear", "component", "component_names", "n_components", "n_samples", "sample", "sample_capacity", "set_capacity_increment", "set_sample_capacity", "set_values", "shape", "values", "SamplerComponent", "component_index", "component_name", "sampler_name", "SamplerMap", "items", "keys", "values", "SamplingParams", "base", "begin", "do_sample_time", "do_sample_trajectory", "period", "sample_method", "sample_mode", "sampler_names", "shift", "stochastic_sample_period", "StateSamplingFunction", "component_names", "description", "function", "name", "shape", "StateSamplingFunctionMap", "items", "keys", "values", "all_minimums_met", "any_maximum_met", "colmajor_component_names", "component_convergence_check", "converge", "convergence_check", "default_component_names", "default_equilibration_check", "get_n_samples", "jsonStateSamplingFunction", "description", "function", "name", "jsonStateSamplingFunctionMap", "items", "keys", "values", "matrix_as_vector", "scalar_as_vector", "Reference (libcasm)", "Usage", "Completion Checks", "Overview"], "terms": {"ptdv23": [0, 1, 253, 336], "brian": 0, "puchala": [0, 1, 253, 336], "john": 0, "c": [0, 233, 268, 586, 587], "thoma": 0, "anton": 0, "van": [0, 1, 572, 586], "der": [0, 1], "ven": [0, 1], "casm": [0, 2, 3, 152, 159, 164, 202, 411, 586, 587], "mont": [0, 2, 4, 38, 43, 47, 57, 60, 64, 68, 71, 73, 74, 77, 79, 80, 118, 122, 124, 126, 130, 132, 134, 140, 143, 145, 146, 154, 160, 165, 166, 170, 194, 203, 204, 205, 206, 207, 213, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 248, 249, 253, 255, 259, 261, 263, 265, 269, 271, 273, 277, 278, 280, 287, 288, 289, 292, 293, 294, 296, 302, 303, 304, 305, 306, 312, 314, 328, 335, 336, 342, 343, 345, 347, 351, 354, 361, 365, 373, 374, 377, 380, 385, 387, 390, 391, 392, 393, 395, 396, 397, 398, 400, 401, 402, 403, 404, 409, 410, 412, 417, 424, 432, 444, 459, 464, 465, 466, 467, 468, 479, 484, 485, 486, 487, 488, 493, 497, 504, 506, 507, 508, 509, 510, 516, 522, 536, 540, 541, 542, 543, 544, 555, 558, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 585, 586], "carlo": [0, 1, 3, 4, 47, 56, 146, 154, 160, 165, 166, 170, 194, 219, 220, 221, 222, 223, 225, 226, 228, 231, 232, 248, 253, 259, 261, 263, 265, 268, 269, 271, 273, 277, 278, 287, 288, 289, 292, 293, 294, 296, 303, 304, 305, 312, 328, 335, 342, 344, 345, 347, 351, 361, 365, 373, 377, 385, 387, 390, 391, 392, 393, 394, 395, 396, 397, 400, 401, 402, 403, 404, 409, 410, 411, 432, 468, 516, 544, 555, 558, 574, 576, 585, 586], "calcul": [0, 1, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 265, 266, 267, 269, 273, 274, 275, 276, 277, 279, 280, 298, 306, 307, 308, 309, 310, 311, 312, 328, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 345, 348, 349, 350, 351, 352, 353, 354, 355, 370, 380, 382, 384, 388, 389, 390, 391, 392, 393, 409, 412, 413, 415, 417, 419, 423, 432, 433, 491, 498, 501, 544, 555, 558, 568, 570, 572, 574, 576, 585], "thermodynam": [0, 259, 260, 270, 277, 280, 342, 354, 587], "kinet": [0, 166, 544, 587], "properti": [0, 48, 50, 51, 52, 53, 55, 58, 59, 61, 62, 63, 65, 66, 67, 135, 136, 137, 138, 139, 151, 153, 155, 158, 166, 167, 168, 169, 195, 199, 208, 209, 210, 211, 212, 237, 238, 239, 244, 259, 260, 261, 265, 266, 267, 270, 271, 274, 275, 276, 278, 279, 281, 284, 289, 290, 291, 292, 293, 294, 295, 298, 299, 300, 342, 343, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 413, 414, 419, 421, 423, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 457, 460, 461, 462, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482, 489, 490, 491, 494, 495, 498, 499, 501, 502, 514, 515, 520, 521, 537, 538, 539, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 572, 575, 576, 577, 586, 587], "complex": 0, "multicompon": 0, "crystal": 0, "2023": 0, "arxiv": 0, "2309": 0, "11761": 0, "The": [1, 2, 15, 32, 33, 47, 49, 80, 98, 99, 108, 146, 147, 151, 152, 153, 156, 157, 159, 160, 161, 164, 170, 194, 195, 196, 197, 199, 202, 222, 223, 224, 225, 234, 244, 248, 249, 252, 253, 255, 270, 276, 277, 280, 281, 284, 287, 288, 289, 291, 296, 300, 303, 304, 307, 308, 311, 312, 328, 329, 330, 331, 334, 335, 336, 341, 346, 348, 349, 350, 351, 352, 354, 355, 358, 361, 363, 364, 366, 372, 374, 375, 376, 377, 378, 379, 381, 382, 384, 388, 390, 391, 392, 393, 395, 397, 399, 407, 409, 410, 417, 418, 425, 426, 427, 431, 432, 434, 436, 437, 438, 442, 505, 522, 544, 550, 551, 552, 555, 558, 568, 570, 571, 572, 576, 586, 587], "packag": [1, 587], "provid": [1, 42, 43, 147, 152, 156, 157, 159, 160, 161, 164, 170, 196, 197, 202, 222, 223, 225, 232, 349, 351, 384, 497, 544, 587], "us": [1, 38, 41, 42, 43, 80, 166, 169, 207, 232, 234, 248, 273, 276, 277, 287, 304, 305, 314, 328, 330, 336, 341, 348, 349, 350, 351, 361, 363, 372, 377, 382, 384, 395, 397, 399, 407, 409, 417, 418, 419, 423, 432, 442, 460, 510, 522, 531, 536, 544, 555, 568, 570, 572, 574, 586, 587], "build": [1, 587], "block": [1, 587], "simul": [1, 394, 409, 426, 431, 432, 449, 456, 457, 468, 473, 477, 544, 555, 558, 565, 566, 572, 574, 576, 586, 587], "thi": [1, 98, 99, 113, 146, 171, 219, 220, 221, 223, 224, 225, 226, 228, 231, 232, 253, 273, 307, 308, 328, 336, 349, 351, 352, 353, 377, 384, 388, 389, 417, 494, 522, 536, 555, 558, 572, 574, 576, 586, 587], "includ": [1, 99, 108, 146, 151, 154, 164, 219, 220, 221, 223, 224, 225, 226, 228, 231, 232, 259, 272, 273, 277, 298, 342, 351, 370, 373, 408, 418, 461, 481, 568, 572, 587], "sampl": [1, 272, 273, 277, 287, 290, 291, 298, 299, 300, 351, 361, 370, 371, 372, 391, 392, 393, 395, 398, 399, 405, 406, 407, 408, 409, 412, 417, 418, 423, 424, 425, 426, 427, 431, 432, 435, 442, 444, 449, 453, 454, 456, 459, 460, 464, 468, 472, 476, 479, 480, 484, 488, 493, 494, 497, 504, 505, 506, 510, 516, 522, 523, 525, 526, 527, 528, 530, 532, 534, 535, 536, 537, 539, 540, 544, 547, 548, 550, 551, 552, 554, 555, 556, 558, 559, 561, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 582, 583, 586, 587], "class": [1, 3, 4, 38, 43, 47, 56, 57, 60, 64, 68, 74, 80, 118, 126, 134, 140, 146, 154, 160, 165, 170, 194, 203, 207, 213, 233, 234, 248, 253, 259, 265, 268, 269, 280, 287, 302, 303, 304, 306, 313, 314, 328, 336, 342, 343, 344, 345, 354, 361, 374, 380, 394, 395, 411, 412, 417, 424, 432, 444, 459, 464, 468, 479, 484, 488, 493, 497, 504, 506, 510, 516, 522, 536, 540, 544, 555, 561, 574, 578, 586, 587], "function": [1, 56, 68, 71, 73, 74, 77, 79, 80, 118, 122, 124, 126, 130, 132, 140, 143, 145, 213, 216, 218, 268, 272, 273, 277, 287, 291, 300, 344, 351, 361, 372, 391, 392, 393, 394, 395, 399, 407, 409, 411, 432, 433, 440, 504, 505, 510, 522, 544, 552, 555, 557, 568, 569, 570, 574, 575, 586], "equilibr": [1, 418, 432, 440, 448, 479, 480, 481, 482, 493, 494, 495, 504, 505, 572, 585], "converg": [1, 411, 432, 443, 446, 459, 460, 461, 462, 463, 480, 481, 488, 489, 492, 494, 497, 498, 501, 504, 505, 522, 536, 568, 570, 572, 586, 587], "check": [1, 49, 157, 197, 222, 277, 287, 351, 409, 411, 424, 426, 427, 430, 431, 432, 434, 435, 436, 437, 439, 440, 442, 444, 446, 448, 450, 451, 452, 454, 455, 459, 460, 461, 462, 463, 468, 479, 480, 481, 482, 488, 492, 493, 495, 504, 522, 565, 566, 568, 569, 570, 572, 585, 587], "statist": [1, 298, 370, 412, 417, 418, 423, 432, 433, 460, 491, 494, 544, 568, 570, 586], "gener": [1, 43, 164, 219, 220, 221, 226, 227, 228, 229, 230, 231, 277, 304, 351, 377, 409, 410, 544, 586, 587], "result": [1, 49, 157, 197, 232, 277, 287, 347, 351, 361, 395, 409, 444, 446, 448, 459, 462, 463, 479, 482, 488, 492, 493, 536, 555, 556, 565, 566, 572, 586, 587], "io": 1, "supercel": [1, 80, 87, 99, 102, 113, 234, 237, 238, 239, 244, 249, 250, 255, 256, 309, 314, 317, 318, 319, 323, 324, 331, 332, 338, 516, 544], "index": [1, 73, 79, 80, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 106, 109, 115, 116, 117, 124, 132, 135, 145, 147, 152, 154, 155, 156, 158, 159, 161, 163, 164, 168, 177, 184, 185, 186, 187, 189, 192, 196, 202, 208, 209, 212, 218, 222, 223, 225, 232, 247, 316, 326, 327, 536, 537, 544, 555, 574], "convers": [1, 47, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 147, 152, 156, 157, 159, 160, 161, 164, 170, 181, 196, 197, 202, 209, 212, 222, 223, 225, 232], "event": [1, 57, 60, 64, 68, 71, 73, 74, 77, 79, 80, 118, 122, 124, 126, 130, 132, 134, 140, 143, 145, 146, 154, 160, 164, 165, 170, 171, 194, 203, 204, 205, 206, 207, 213, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 277, 302, 303, 304, 305, 308, 351, 374, 375, 376, 377, 378, 379, 409, 410, 465, 466, 467, 485, 486, 487, 507, 508, 509, 516, 541, 542, 543, 544, 562, 563, 564, 579, 580, 581, 587], "definit": [1, 253, 336, 587], "construct": [1, 36, 38, 43, 49, 80, 98, 99, 147, 156, 160, 161, 196, 224, 235, 262, 271, 277, 282, 283, 315, 325, 351, 356, 357, 359, 360, 409, 420, 441, 469, 500, 567, 571, 586], "select": 1, "method": [1, 4, 17, 38, 43, 47, 57, 60, 64, 68, 74, 80, 118, 126, 134, 140, 146, 154, 160, 165, 170, 194, 203, 207, 213, 234, 248, 253, 259, 265, 269, 270, 271, 276, 277, 280, 287, 302, 306, 312, 314, 328, 336, 342, 343, 345, 351, 354, 361, 374, 380, 390, 395, 409, 410, 411, 412, 417, 418, 423, 424, 425, 426, 427, 431, 432, 444, 459, 464, 468, 479, 484, 488, 493, 497, 504, 506, 510, 516, 522, 536, 540, 544, 555, 561, 574, 578, 586, 587], "ar": [1, 47, 49, 54, 80, 98, 99, 148, 157, 160, 197, 198, 222, 234, 245, 249, 253, 255, 264, 285, 286, 301, 307, 331, 336, 374, 378, 379, 417, 418, 421, 423, 425, 426, 427, 431, 432, 442, 461, 468, 481, 494, 505, 522, 544, 555, 556, 569, 570, 571, 572, 586, 587], "describ": [1, 165], "et": [1, 253, 336], "al": [1, 253, 336], "i": [1, 2, 47, 49, 68, 72, 73, 74, 78, 79, 80, 84, 85, 86, 92, 95, 99, 101, 103, 109, 117, 123, 124, 125, 131, 132, 133, 140, 144, 145, 203, 213, 217, 218, 234, 236, 238, 244, 246, 252, 258, 277, 293, 311, 318, 324, 334, 336, 341, 349, 351, 352, 353, 365, 375, 377, 384, 388, 389, 392, 395, 401, 403, 409, 417, 418, 432, 442, 464, 468, 484, 489, 495, 498, 501, 505, 506, 516, 522, 536, 540, 544, 548, 550, 551, 552, 554, 555, 556, 558, 561, 570, 572, 574, 576, 578, 586, 587], "part": [1, 13, 35, 587], "open": 1, "sourc": [1, 314, 315, 316, 320, 321, 322, 323, 325, 326, 327, 328, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 345, 351, 354, 356, 357, 359, 360, 361, 362, 368, 369, 373, 374, 375, 377, 378, 380, 383, 385, 386, 387, 390, 391, 392, 393, 410, 504, 505, 569], "softwar": 1, "which": [1, 6, 7, 8, 9, 10, 43, 80, 99, 167, 238, 252, 277, 318, 334, 336, 351, 374, 375, 378, 379, 409, 417, 418, 425, 426, 427, 431, 504, 544, 572, 586, 587], "design": 1, "perform": [1, 146, 203, 418, 425, 426, 427, 431, 432, 440, 454, 495, 544, 572, 585], "first": [1, 125, 133, 194, 197, 198, 200, 222, 277, 351, 572, 586], "principl": 1, "mechan": 1, "studi": 1, "multi": [1, 146, 150, 151, 220, 224, 229, 231], "compon": [1, 62, 104, 136, 314, 392, 432, 443, 494, 505, 522, 526, 527, 536, 538, 555, 556, 568, 569, 570, 571], "crystallin": 1, "solid": 1, "develop": 1, "group": [1, 98], "origin": [1, 586], "univers": 1, "michigan": 1, "current": [1, 12, 15, 26, 39, 58, 59, 135, 173, 174, 183, 184, 185, 188, 219, 220, 221, 226, 227, 228, 229, 230, 231, 234, 240, 241, 242, 243, 248, 270, 272, 273, 276, 277, 278, 303, 305, 320, 321, 322, 323, 342, 346, 348, 349, 351, 352, 374, 375, 376, 377, 379, 381, 382, 384, 385, 387, 388, 409, 528, 530, 544, 547, 555, 558, 574, 576, 586, 587], "california": 1, "santa": 1, "barbara": 1, "For": [1, 232, 253, 336, 432, 442, 522, 544, 555, 568, 570, 586, 587], "more": [1, 146, 249, 255, 307, 331, 338, 531, 532], "inform": [1, 166, 169, 207], "see": [1, 2, 110, 112, 253, 336, 545, 546, 549, 553], "homepag": 1, "gnu": 1, "lesser": 1, "public": 1, "lgpl": 1, "pleas": 1, "file": [1, 4, 18, 23, 277, 312, 390, 586], "avail": 1, "github": 1, "instal": 1, "from": [1, 47, 49, 54, 64, 82, 83, 84, 85, 86, 88, 89, 92, 93, 94, 95, 96, 101, 105, 106, 107, 109, 110, 115, 116, 117, 125, 133, 147, 156, 161, 164, 189, 196, 219, 220, 221, 224, 226, 228, 231, 235, 245, 246, 262, 264, 277, 282, 283, 285, 286, 301, 307, 308, 315, 351, 352, 356, 357, 388, 391, 392, 393, 412, 417, 420, 423, 432, 441, 462, 469, 482, 500, 510, 516, 555, 568, 570, 574, 586], "pypi": 1, "contributor": 1, "usag": [1, 555, 569, 574, 586], "overview": [1, 585], "complet": [1, 277, 287, 289, 351, 363, 365, 397, 409, 424, 425, 426, 427, 431, 432, 434, 435, 436, 442, 444, 452, 455, 468, 481, 504, 569, 585], "refer": [1, 241, 274, 275, 278, 555, 558, 574, 576], "bibliographi": 1, "built": [2, 587], "maco": 2, "x86_64": 2, "intel": 2, "arm64": 2, "appl": 2, "silicon": 2, "linux": 2, "aarch64": 2, "latest": 2, "releas": 2, "libcasm": [2, 4, 38, 43, 47, 57, 60, 64, 68, 71, 73, 74, 77, 79, 80, 118, 122, 124, 126, 130, 132, 134, 140, 143, 145, 146, 154, 160, 165, 170, 194, 203, 204, 205, 206, 207, 213, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 248, 249, 253, 255, 259, 265, 269, 280, 287, 302, 303, 304, 306, 312, 314, 328, 336, 342, 343, 345, 354, 361, 374, 380, 390, 391, 392, 393, 395, 398, 409, 410, 412, 417, 424, 432, 444, 459, 464, 465, 466, 467, 468, 479, 484, 485, 486, 487, 488, 493, 497, 504, 506, 507, 508, 509, 510, 516, 522, 536, 540, 541, 542, 543, 544, 555, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 578, 579, 580, 581, 582, 583, 586, 587], "can": [2, 164, 277, 351, 522, 544, 555, 556, 558, 574, 576, 586, 587], "pip": 2, "contribut": 2, "guid": 2, "tool": 3, "modul": [3, 233, 313], "self": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 54, 57, 60, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 152, 154, 157, 159, 160, 162, 163, 164, 165, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 213, 214, 215, 216, 217, 218, 234, 236, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 264, 265, 269, 272, 273, 277, 280, 285, 286, 287, 288, 296, 297, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 351, 359, 377, 395, 396, 404, 408, 412, 415, 416, 417, 418, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 444, 449, 456, 458, 459, 463, 464, 465, 466, 467, 468, 478, 479, 483, 484, 485, 486, 487, 488, 492, 493, 496, 497, 503, 505, 506, 507, 508, 509, 510, 516, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 540, 541, 542, 543, 544, 555, 561, 562, 563, 564, 574, 578, 579, 580, 581], "logfile_path": [4, 277, 351, 409], "str": [4, 18, 19, 20, 22, 26, 30, 37, 39, 40, 47, 48, 49, 52, 53, 55, 104, 105, 107, 183, 395, 505, 522, 526, 536, 538, 539, 540, 544, 552, 555, 556, 557, 559, 561, 567, 571, 574, 575, 577, 578], "log_frequ": [4, 277, 351, 409], "float": [4, 16, 17, 36, 46, 49, 51, 53, 248, 249, 250, 251, 255, 280, 284, 288, 296, 307, 308, 309, 310, 328, 329, 331, 332, 333, 354, 358, 362, 368, 373, 385, 386, 396, 404, 408, 409, 410, 415, 417, 419, 426, 431, 432, 434, 437, 438, 445, 449, 456, 468, 470, 473, 474, 477, 497, 499, 502, 505, 544, 545, 546, 549, 553, 565, 566, 583], "none": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 40, 41, 42, 43, 47, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 118, 119, 120, 122, 123, 125, 126, 127, 128, 130, 131, 133, 140, 141, 142, 143, 144, 148, 160, 171, 188, 198, 213, 214, 215, 216, 217, 242, 243, 248, 252, 253, 258, 259, 277, 297, 303, 305, 311, 312, 322, 323, 328, 335, 336, 343, 351, 374, 379, 381, 388, 390, 409, 429, 432, 449, 456, 468, 497, 505, 522, 523, 524, 531, 532, 533, 544, 555, 565, 566], "base": [4, 38, 43, 47, 57, 60, 64, 68, 74, 80, 118, 126, 134, 140, 146, 154, 160, 165, 170, 194, 203, 207, 213, 226, 227, 228, 229, 230, 231, 234, 248, 253, 259, 265, 269, 280, 287, 302, 306, 314, 328, 336, 342, 343, 345, 354, 361, 374, 380, 395, 409, 412, 417, 424, 425, 426, 427, 431, 432, 434, 444, 459, 464, 468, 479, 484, 488, 493, 497, 504, 506, 510, 516, 522, 536, 540, 544, 554, 555, 561, 571, 572, 574, 578], "pybind11_object": [4, 38, 43, 47, 57, 60, 64, 68, 74, 80, 118, 126, 134, 140, 146, 154, 160, 165, 170, 194, 203, 207, 213, 234, 248, 253, 259, 265, 269, 280, 287, 302, 306, 395, 412, 417, 424, 432, 444, 459, 464, 468, 479, 484, 488, 493, 497, 506, 510, 516, 522, 536, 540, 544, 555, 561, 574, 578], "logger": 4, "statu": [4, 17, 277, 312, 351, 390, 409, 425, 426, 427, 431, 586], "constructor": [4, 38, 43, 47, 57, 60, 64, 68, 74, 80, 118, 126, 134, 140, 146, 154, 160, 165, 170, 194, 207, 213, 234, 248, 253, 259, 265, 269, 280, 287, 302, 306, 328, 336, 345, 351, 361, 374, 380, 395, 412, 417, 424, 432, 444, 459, 468, 479, 488, 493, 497, 522, 536, 544, 555, 574], "paramet": [4, 43, 47, 80, 98, 99, 146, 147, 152, 154, 156, 157, 159, 160, 161, 164, 170, 194, 196, 197, 202, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 248, 249, 252, 253, 255, 259, 265, 269, 277, 280, 287, 303, 304, 306, 307, 308, 311, 312, 328, 331, 334, 336, 341, 345, 351, 352, 354, 361, 374, 375, 377, 378, 380, 388, 390, 391, 392, 393, 395, 409, 410, 417, 418, 424, 425, 426, 427, 431, 432, 439, 449, 455, 456, 468, 497, 504, 505, 522, 536, 544, 555, 565, 566, 567, 568, 569, 570, 571, 572, 574, 586, 587], "locat": [4, 18, 60, 61, 62, 63, 136, 137, 138, 139, 166, 170, 172, 190, 210, 211, 219, 220, 221, 226, 227, 228, 229, 230, 231], "log": [4, 17, 18, 23, 277, 312, 351, 390, 409, 425, 426, 427, 431, 432, 442, 510, 544, 586, 587], "output": [4, 18, 47, 587], "option": [4, 26, 43, 47, 98, 99, 160, 248, 253, 259, 277, 328, 336, 351, 374, 409, 417, 423, 432, 447, 449, 454, 456, 457, 468, 470, 471, 472, 473, 474, 475, 476, 477, 497, 505, 522, 544, 555, 565, 566, 568, 570, 586], "how": [4, 17, 146, 151, 460, 480, 522, 587], "often": [4, 17], "second": [4, 16, 17, 36, 194, 197, 198, 200, 222, 572, 586], "methodlog": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 277, 312, 351, 390, 409, 425, 426, 427, 431, 586], "begin": [5, 6, 7, 8, 9, 10, 432, 435, 544], "new": [5, 43, 168, 249, 255, 277, 307, 331, 351, 409, 523], "lap": 5, "section": [6, 7, 8, 9, 10, 12, 13, 27, 32, 33, 34, 35], "alwai": 6, "print": [6, 7, 8, 9, 10, 19, 24, 26, 27, 32, 33, 34, 37, 277, 351, 409], "everi": [6, 277, 351, 409, 432, 442, 544, 586], "verbosity_level": [6, 7, 8, 9, 10], "onli": [7, 8, 9, 10, 34, 38, 57, 60, 64, 134, 165, 207, 234, 302, 307, 308, 321, 412, 417, 418, 423, 444, 459, 479, 488, 493, 494, 505, 569, 586], "debug": [7, 27, 32, 33, 34], "quiet": [8, 32], "standard": [9, 32, 33, 522, 555, 587], "verbos": [10, 32, 33, 34], "decreas": [11, 544], "indent": [11, 14, 15, 19, 22, 28, 29, 37], "level": [11, 14, 28, 29, 417, 419, 497, 504, 505, 568, 569, 570, 572, 586], "end": [12, 69, 75, 119, 127, 141, 214], "do": [13, 50, 586], "show": [13, 35], "time": [13, 16, 36, 121, 129, 248, 425, 426, 427, 431, 432, 445, 449, 456, 468, 473, 477, 516, 544, 547, 551, 565, 566, 586], "head": [13, 35], "increas": [14, 532], "string": [15, 555, 556], "sinc": [16, 36], "begin_lap": 16, "text": [19, 22, 37], "line": [19, 37], "wrap": [19, 37], "justif": [19, 20, 30, 37], "return": [20, 21, 44, 45, 46, 50, 51, 73, 79, 103, 121, 124, 129, 132, 145, 147, 150, 152, 156, 157, 159, 161, 162, 163, 164, 173, 174, 182, 183, 184, 185, 196, 197, 201, 202, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 236, 246, 249, 250, 251, 254, 255, 256, 257, 303, 304, 307, 308, 331, 332, 333, 337, 338, 339, 340, 373, 377, 391, 392, 393, 410, 418, 425, 426, 427, 431, 432, 505, 526, 534, 544, 555, 558, 565, 566, 567, 569, 571, 572, 573, 574, 576, 582, 583], "paragraph": [20, 21, 30, 31], "type": [20, 30, 47, 48, 49, 52, 53, 55, 58, 59, 61, 62, 63, 65, 66, 67, 135, 136, 137, 138, 139, 147, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 166, 167, 168, 169, 170, 176, 177, 179, 180, 191, 192, 195, 196, 197, 199, 202, 208, 209, 210, 211, 212, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 237, 238, 239, 244, 248, 249, 255, 260, 261, 263, 266, 267, 281, 284, 293, 303, 304, 307, 308, 324, 328, 330, 331, 342, 351, 352, 373, 377, 391, 392, 393, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 409, 410, 418, 419, 421, 423, 425, 426, 427, 431, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 457, 470, 471, 472, 473, 474, 475, 476, 477, 498, 499, 501, 502, 505, 537, 538, 539, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 565, 566, 567, 569, 571, 572, 575, 576, 577, 586], "One": [20, 30, 248, 277, 293, 328, 330, 351, 365, 395, 401, 403, 409], "left": [20, 30, 418, 544, 586], "right": [20, 30, 418, 544, 586], "center": [20, 30], "full": [20, 30], "width": [21, 31], "creat": [23, 248, 555, 574], "parent": 23, "directori": [23, 277], "necessari": [23, 587], "restart": 25, "intern": [25, 44, 425, 426, 427, 431, 586], "timer": [25, 26], "what": 26, "show_clock": 26, "bool": [26, 37, 48, 50, 103, 157, 170, 197, 222, 248, 410, 425, 426, 427, 431, 432, 442, 450, 451, 452, 498, 501, 544, 547, 548, 554, 565, 566], "fals": [26, 170, 410, 425, 426, 427, 431, 432, 442, 461, 481, 489, 495, 544, 547, 548, 565, 566, 572, 586], "nice": 26, "format": [26, 248, 249, 250, 251, 252, 253, 265, 266, 269, 273, 274, 279, 306, 328, 331, 332, 333, 334, 335, 345, 348, 352, 380, 382, 388, 391], "header": 26, "valu": [26, 41, 42, 43, 46, 47, 49, 51, 80, 125, 133, 234, 241, 243, 249, 253, 255, 283, 307, 331, 336, 357, 415, 432, 442, 449, 456, 468, 480, 494, 495, 499, 502, 510, 516, 522, 524, 525, 529, 533, 544, 550, 551, 555, 572, 573, 574, 586], "set": [27, 28, 29, 30, 31, 32, 33, 34, 82, 83, 242, 243, 252, 258, 270, 276, 297, 305, 311, 322, 323, 334, 336, 341, 346, 348, 349, 350, 352, 369, 378, 381, 382, 384, 385, 387, 388, 432, 460, 480, 504, 505, 524, 531, 533, 544, 569, 586, 587], "mode": [27, 32, 33, 34, 516, 544], "all": [27, 54, 71, 77, 80, 99, 122, 130, 143, 148, 160, 216, 223, 225, 245, 253, 264, 285, 286, 301, 336, 417, 423, 432, 449, 450, 461, 468, 480, 481, 494, 505, 525, 533, 565, 569, 570, 572, 573, 586], "indent_spac": 28, "int": [28, 29, 31, 41, 42, 45, 58, 61, 62, 63, 72, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 114, 115, 116, 117, 119, 121, 123, 124, 125, 127, 129, 131, 132, 133, 135, 137, 138, 139, 144, 145, 153, 154, 155, 158, 162, 163, 172, 175, 176, 177, 180, 189, 190, 191, 192, 193, 203, 208, 209, 210, 211, 212, 217, 218, 224, 232, 234, 236, 237, 238, 239, 240, 241, 242, 244, 246, 247, 248, 249, 254, 255, 277, 287, 293, 307, 314, 316, 317, 318, 319, 320, 322, 327, 328, 330, 351, 361, 364, 365, 366, 367, 373, 395, 400, 401, 402, 403, 408, 409, 417, 421, 423, 426, 427, 431, 432, 435, 436, 447, 449, 453, 454, 456, 457, 468, 471, 472, 475, 476, 505, 510, 516, 522, 525, 527, 528, 529, 530, 531, 532, 534, 536, 537, 544, 555, 560, 565, 566, 567, 568, 570, 571, 573, 574], "number": [28, 29, 38, 39, 40, 41, 42, 43, 58, 81, 87, 100, 104, 108, 114, 121, 129, 153, 157, 160, 170, 175, 176, 177, 182, 193, 197, 203, 219, 220, 221, 224, 226, 227, 228, 229, 230, 231, 232, 237, 238, 239, 254, 277, 287, 292, 293, 294, 295, 304, 317, 318, 319, 337, 351, 361, 364, 365, 366, 367, 377, 392, 395, 400, 401, 402, 403, 409, 410, 417, 421, 425, 426, 427, 431, 432, 435, 447, 449, 453, 454, 456, 460, 468, 471, 472, 475, 476, 494, 527, 528, 544, 565, 566, 567, 568, 570, 572, 573, 586, 587], "space": [28, 29, 432, 437, 438, 442, 510, 522, 544, 550], "per": [28, 232, 249, 250, 251, 255, 256, 257, 273, 277, 287, 293, 295, 309, 310, 331, 332, 333, 338, 351, 361, 365, 367, 391, 393, 395, 401, 403, 409, 516, 544, 555], "initial_indent_spac": 29, "an": [29, 49, 69, 72, 75, 78, 99, 101, 104, 109, 119, 123, 125, 127, 131, 133, 141, 144, 156, 161, 179, 180, 196, 214, 217, 222, 253, 277, 303, 308, 328, 336, 351, 377, 409, 433, 522, 555, 556, 558, 568, 570, 576, 586, 587], "initi": [29, 42, 66, 186, 187, 277, 351, 570, 586, 587], "befor": [29, 209, 468, 534, 586], "appli": [29, 277, 302, 305, 351, 374, 378, 379, 409, 432, 572, 586, 587], "justification_typ": 30, "arg0": [31, 40, 41, 42, 68, 74, 118, 126, 140, 147, 152, 156, 159, 161, 164, 172, 190, 196, 202, 213, 258, 311, 418, 424, 469, 572], "time_": 35, "restart_clock": 36, "indent_first_lin": 37, "true": [37, 50, 103, 157, 197, 222, 248, 410, 425, 426, 427, 431, 432, 442, 450, 451, 461, 481, 489, 495, 498, 501, 544, 547, 548, 554, 565, 566, 572, 586], "without": [37, 269, 279, 306, 314, 323, 345, 353, 380, 389, 425], "A": [38, 43, 47, 48, 52, 53, 55, 80, 98, 99, 154, 160, 170, 219, 220, 221, 223, 224, 225, 226, 228, 231, 232, 269, 274, 275, 278, 345, 391, 392, 393, 409, 418, 432, 433, 440, 443, 468, 544, 555, 556, 558, 567, 569, 572, 574, 576, 586, 587], "pseudo": [38, 41, 42, 43], "random": [38, 39, 40, 41, 42, 43, 219, 220, 221, 226, 227, 228, 229, 230, 231, 277, 304, 351, 377, 409, 410, 544, 586, 587], "engin": [38, 39, 40, 41, 42, 43, 277, 351, 409, 586], "std": [38, 42, 43, 249, 255, 572], "mt19937_64": 38, "default": [38, 57, 60, 64, 134, 165, 207, 234, 272, 277, 302, 351, 409, 412, 414, 432, 434, 435, 436, 437, 438, 442, 444, 459, 479, 488, 489, 493, 494, 495, 505, 522, 545, 546, 547, 548, 549, 550, 551, 552, 553, 569, 571, 586], "random_devic": [38, 43], "seed": [38, 42, 43], "randomnumberengin": [39, 40, 41, 42, 43, 44, 277, 351, 409, 586], "state": [39, 40, 248, 252, 253, 258, 259, 269, 276, 277, 279, 303, 305, 306, 311, 328, 334, 336, 341, 342, 345, 346, 348, 349, 351, 353, 374, 375, 378, 380, 381, 382, 384, 385, 387, 389, 409, 504, 505, 555, 558, 569, 574, 576, 587], "psueudo": [39, 40], "save": [40, 544, 547, 548], "singl": [41, 47, 54, 224, 245, 264, 277, 285, 286, 301, 314, 488, 493], "list": [42, 61, 62, 63, 68, 69, 71, 74, 75, 77, 80, 98, 99, 119, 121, 122, 125, 127, 129, 130, 133, 136, 137, 139, 140, 141, 143, 160, 162, 163, 170, 172, 183, 190, 210, 211, 213, 214, 216, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 248, 307, 505, 522, 526, 534, 544, 552, 555, 556, 560, 567, 571, 587], "share": [43, 44, 353, 389], "uniformli": [43, 45, 46], "distribut": [43, 45, 46, 586], "integ": [43, 45, 49, 80, 99], "real": 43, "If": [4, 43, 80, 160, 277, 351, 409, 410, 432, 442, 497, 498, 501, 505, 522, 544, 547, 548, 554, 555, 556, 565, 566, 569, 572, 586], "randomnumbergener": [44, 45, 46, 179, 180, 219, 220, 221, 226, 227, 228, 229, 230, 231, 304, 377, 409, 410], "maximum_valu": [45, 46], "uint64": 45, "0": [45, 46, 98, 99, 248, 253, 328, 336, 410, 414, 417, 418, 425, 426, 427, 431, 432, 449, 456, 480, 494, 512, 518, 522, 524, 544, 545, 546, 549, 553, 555, 556, 558, 567, 569, 571, 572, 574, 576, 586], "doubl": 46, "point": [46, 49], "data": [47, 49, 80, 147, 152, 156, 159, 161, 164, 196, 202, 235, 262, 265, 277, 282, 287, 290, 299, 315, 343, 351, 356, 361, 371, 373, 395, 398, 406, 409, 420, 424, 425, 426, 427, 431, 432, 441, 500, 522, 536, 555, 568, 570, 574, 586, 587], "structur": [47, 80, 424, 536, 586, 587], "hold": [47, 186, 187, 265, 269, 279, 287, 290, 299, 306, 343, 345, 347, 353, 361, 371, 380, 389, 395, 398, 406, 409, 424, 522, 555, 574, 586], "note": [47, 51, 80, 203, 253, 277, 307, 308, 328, 336, 351, 432, 460, 461, 464, 468, 481, 484, 497, 506, 522, 536, 540, 555, 561, 572, 574, 578], "should": [47, 80, 219, 220, 221, 224, 226, 228, 231, 234, 418, 536, 539, 544, 572, 586], "have": [47, 50, 418, 425, 426, 427, 431, 450, 451, 544, 565, 572, 586], "same": [47, 50, 80, 98, 99, 418, 505, 569, 572, 573, 586], "kei": [47, 506, 536, 539, 568, 586], "even": 47, "differ": [47, 222, 307, 308], "input": [47, 352, 388, 586, 587], "made": [47, 182, 224, 425, 426, 427, 431, 432, 572], "combin": [47, 54, 245, 264, 285, 286, 301], "dict": [47, 48, 49, 52, 53, 54, 55, 147, 152, 156, 159, 161, 164, 196, 202, 203, 235, 245, 262, 264, 282, 285, 286, 301, 315, 325, 356, 359, 373, 395, 408, 416, 420, 422, 441, 443, 458, 463, 464, 469, 478, 483, 484, 492, 496, 500, 503, 506, 540, 561, 578, 586], "attribut": [47, 49, 54, 57, 60, 64, 134, 146, 154, 165, 194, 207, 234, 245, 259, 264, 265, 269, 277, 280, 285, 286, 287, 297, 301, 314, 328, 345, 351, 352, 354, 361, 369, 374, 380, 388, 395, 412, 417, 432, 444, 459, 468, 479, 488, 493, 497, 510, 516, 536, 544, 555, 574, 586], "valuemap": [48, 49, 50, 51, 52, 53, 54, 55, 259, 260, 263, 283, 286, 342, 357, 360, 587], "like": [48, 52, 53, 55, 68, 74, 140, 203, 213, 443, 464, 484, 506, 540, 561, 578, 586], "object": [48, 52, 53, 55, 68, 74, 98, 99, 140, 181, 203, 213, 314, 328, 336, 342, 343, 345, 353, 354, 361, 374, 380, 389, 443, 464, 484, 504, 506, 540, 555, 558, 561, 574, 576, 578], "booleanvaluemap": 48, "static": [49, 98, 99, 147, 156, 161, 196, 235, 262, 282, 283, 315, 356, 357, 359, 420, 441, 469, 500], "json": [47, 49, 54, 147, 156, 161, 196, 235, 245, 262, 264, 272, 277, 282, 285, 287, 290, 291, 301, 351, 395, 398, 399, 408, 409, 416, 420, 422, 441, 458, 463, 469, 478, 483, 492, 496, 500, 503, 574], "python": [49, 54, 147, 152, 156, 159, 161, 164, 196, 202, 233, 235, 245, 262, 264, 282, 285, 286, 301, 313, 344, 408, 416, 420, 422, 441, 458, 463, 469, 478, 483, 492, 496, 500, 503, 574, 586, 587], "automat": [49, 522, 586], "item": [49, 54, 69, 71, 72, 73, 75, 77, 78, 79, 119, 122, 123, 124, 125, 127, 130, 131, 132, 133, 141, 143, 144, 145, 214, 216, 217, 218, 245, 264, 285, 286, 301, 555, 574, 586], "ad": 49, "correspond": [49, 80, 98, 99, 236, 536], "convert": [49, 147, 152, 156, 157, 159, 160, 161, 164, 170, 189, 196, 197, 202, 222, 223, 225, 232, 351, 373, 388, 574], "presenc": 49, "other": [49, 50, 98, 99, 248, 328, 587], "e": [49, 99, 234, 236, 244, 246, 324, 409, 417, 418, 516, 552, 555, 556], "except": [47, 49, 449], "increment": [51, 65, 531, 572, 586], "n_increment": 51, "each": [51, 98, 99, 154, 158, 182, 183, 186, 187, 232, 248, 249, 255, 307, 331, 425, 426, 427, 431, 522, 544, 555, 556, 568, 570, 586], "doe": [51, 99, 146, 223, 224, 225, 232, 408, 468, 587], "chang": [51, 249, 255, 306, 307, 308, 323, 331, 338, 380, 409, 410, 572, 586, 587], "boolean": [47, 51], "numpi": [52, 55, 80, 90, 91, 93, 94, 95, 97, 98, 99, 110, 112, 171, 173, 174, 188, 234, 236, 241, 243, 246, 255, 256, 257, 280, 418, 432, 523, 525, 529, 533, 535, 555, 568, 570, 572, 582, 583], "ndarrai": [52, 55, 59, 65, 80, 90, 91, 93, 94, 95, 97, 98, 99, 110, 112, 171, 173, 174, 188, 234, 236, 241, 243, 244, 246, 255, 256, 257, 280, 281, 314, 316, 321, 323, 326, 338, 339, 340, 354, 355, 418, 432, 523, 525, 529, 533, 535, 555, 568, 570, 572, 582, 583], "float64": [52, 55, 90, 91, 93, 94, 97, 173, 174, 255, 256, 257, 280, 338, 339, 340, 418, 432, 523, 525, 529, 533, 535, 555, 568, 570, 572, 582, 583], "m": [52, 55, 171, 173, 174, 188, 234, 236, 241, 243, 246, 255, 256, 257, 280, 418, 432, 522, 523, 525, 533, 535, 555, 556, 560, 568, 570, 571, 572, 582, 583], "n": [52, 173, 174, 255, 256, 417, 418, 432, 442, 522, 529, 533, 535, 544, 555, 556, 560, 571, 572, 582, 586, 587], "matrixvaluemap": 52, "scalarvaluemap": 53, "repres": [54, 134, 146, 152, 159, 164, 194, 202, 245, 264, 285, 286, 301, 408, 416, 422, 458, 463, 478, 483, 492, 496, 503, 555, 556, 587], "1": [55, 59, 65, 90, 91, 93, 94, 95, 98, 99, 146, 171, 188, 234, 236, 241, 243, 246, 248, 249, 253, 255, 256, 257, 277, 280, 304, 307, 314, 328, 330, 331, 336, 338, 351, 409, 410, 417, 418, 423, 432, 442, 513, 516, 517, 522, 523, 525, 529, 544, 545, 546, 549, 555, 556, 567, 568, 569, 570, 571, 572, 582, 583, 586], "vectorvaluemap": 55, "applic": [56, 108, 154, 158, 259, 263, 468, 473, 477, 544, 547], "occup": [56, 61, 80, 99, 100, 101, 104, 106, 109, 134, 138, 146, 151, 154, 158, 160, 165, 166, 167, 168, 169, 170, 171, 179, 180, 188, 194, 195, 199, 210, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 234, 240, 242, 243, 253, 277, 320, 322, 323, 336, 375, 377, 395, 409, 587], "track": [56, 57, 166, 169, 425, 426, 427, 431, 586], "posit": [57, 72, 78, 123, 131, 144, 173, 174, 183, 184, 185, 186, 187, 217], "individu": [57, 148, 153, 408, 492, 568], "period": [57, 59, 98, 247, 327, 432, 436, 544, 554, 586], "boundari": [57, 59], "atom": [58, 59, 60, 65, 74, 75, 78, 79, 104, 136, 170, 173, 174, 175, 182, 183, 184, 185, 186, 187], "jump": [58, 182], "fraction": [59, 65, 80, 91, 94, 288, 296, 415], "coordin": [59, 65, 80, 84, 85, 86, 90, 91, 92, 93, 94, 117, 173, 174], "np": [59, 65, 236, 241, 244, 255, 280, 281, 314, 316, 326, 354, 432, 582, 583, 586], "shape": [59, 65, 80, 98, 99, 173, 174, 234, 314, 323, 522, 523, 535, 555, 571, 586], "3": [59, 65, 80, 90, 91, 93, 94, 95, 97, 98, 99, 110, 112, 173, 174, 569, 586], "dtype": [59, 65, 80, 98, 99, 234, 236, 241, 244, 255, 321, 323, 338, 339, 340], "int_": [59, 65], "specifi": [60, 64, 98, 99, 103, 170, 177, 192, 269, 279, 306, 345, 353, 380, 389, 425, 426, 427, 431, 443, 497, 498, 501, 504, 505, 510, 516, 536, 538, 568, 569, 586, 587], "specif": [60, 170, 586], "site": [60, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 109, 114, 117, 134, 135, 154, 157, 158, 160, 167, 168, 170, 176, 177, 189, 193, 197, 208, 222, 232, 237, 239, 240, 241, 242, 243, 248, 249, 253, 255, 277, 293, 304, 307, 314, 317, 319, 320, 322, 331, 336, 338, 351, 365, 395, 401, 403, 409, 516, 544], "molecul": [60, 80, 137, 170, 190], "atomloc": [61, 62, 63, 64, 66, 67], "configur": [61, 138, 189, 210, 234, 244, 253, 259, 263, 272, 277, 293, 314, 315, 325, 336, 342, 351, 352, 365, 388, 395, 401, 403, 544, 548, 574, 586, 587], "mol": [62, 63, 135, 136, 137, 138, 139, 140, 141, 144, 145, 172, 179, 180, 191, 192, 211, 555], "occloc": [63, 136, 137, 139, 166, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 207, 211, 219, 220, 221, 226, 227, 228, 229, 230, 231], "trajectori": [64, 166], "one": [64, 240, 242, 277, 293, 320, 322, 351, 365, 395, 401, 403, 409, 516, 586], "anoth": 64, "atomtraj": [65, 66, 67, 68, 69, 72, 73], "amount": [65, 432, 586], "translat": 65, "final": 67, "arg": [68, 71, 73, 74, 77, 79, 118, 122, 124, 126, 130, 132, 140, 143, 145, 213, 216, 218], "kwarg": [68, 71, 73, 74, 77, 79, 118, 122, 124, 126, 130, 132, 140, 143, 145, 213, 216, 218], "overload": [68, 71, 73, 74, 77, 79, 118, 122, 124, 126, 130, 132, 140, 143, 145, 213, 216, 218], "__init__": [68, 74, 118, 126, 140, 213], "_monte_ev": [68, 71, 73, 74, 77, 79, 118, 122, 124, 126, 130, 132, 140, 143, 145, 204, 205, 206, 213, 216, 218, 465, 466, 467, 485, 486, 487, 507, 508, 509, 541, 542, 543, 562, 563, 564, 579, 580, 581], "copi": [68, 74, 118, 126, 140, 213], "iter": [68, 71, 74, 77, 118, 122, 126, 130, 140, 143, 213, 216], "atomtrajvector": [69, 70, 71, 72, 73], "x": [69, 72, 75, 78, 119, 121, 123, 125, 127, 129, 131, 133, 141, 144, 214, 217, 253, 254, 255, 256, 257, 273, 336, 418, 586], "add": [69, 75, 119, 127, 141, 214, 248, 328, 523], "content": [70, 76, 120, 128, 142, 215], "l": [71, 77, 80, 83, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 115, 116, 117, 122, 130, 143, 216, 586], "append": [71, 77, 122, 130, 143, 216, 555, 574, 586], "given": [71, 72, 77, 78, 122, 123, 130, 131, 143, 144, 216, 217, 246, 247, 522, 555, 558, 574, 576, 586, 587], "remov": [73, 79, 124, 132, 145, 218], "last": [73, 79, 124, 132, 145, 218, 430], "atomvector": [75, 76, 77, 78, 79], "xtal_prim": [80, 98, 99], "prim": [80, 94, 97, 98, 99, 110, 586], "transformation_matrix_to_sup": [80, 98, 99], "int64": [80, 95, 98, 99, 110, 112], "follow": [80, 572, 586], "shorthand": 80, "member": [80, 510, 516], "name": [80, 105, 107, 183, 505, 522, 526, 536, 538, 539, 540, 552, 555, 556, 561, 567, 571, 574, 578, 586], "linear": [80, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 167, 189, 241, 243, 249, 255, 307, 331, 432, 436, 442, 510, 544, 550], "particular": [80, 179, 180, 191, 192, 226, 227, 228, 229, 230, 231, 269, 279, 306, 345, 353, 380, 389, 522, 525, 587], "b": [80, 82, 84, 85, 86, 89, 92, 116, 117, 544], "sublattic": [80, 82, 83, 86, 89, 90, 91, 96, 98, 115, 116, 117], "unitl": [80, 115, 116, 117], "non": [80, 83, 86, 96, 111, 112, 115, 116, 117, 544], "primit": [80, 83, 86, 90, 91, 96, 99, 111, 112, 115, 116, 117], "unit": [80, 81, 82, 83, 84, 86, 88, 90, 91, 95, 96, 98, 99, 100, 101, 103, 109, 111, 112, 114, 115, 116, 117, 135, 154, 155, 157, 160, 170, 197, 208, 222, 232, 314, 318, 555], "cell": [80, 83, 86, 90, 91, 95, 96, 99, 111, 112, 114, 115, 116, 117, 232, 314, 318, 555], "when": [80, 277, 351, 361, 395, 409, 417, 418, 421, 423, 432, 442, 454, 468, 494, 531, 544, 547, 548, 586], "determin": [80, 98, 432, 586], "appropri": 80, "symmetri": [80, 98, 99], "problem": 80, "between": [80, 442, 586], "mai": [80, 154, 298, 336, 341, 418, 425, 426, 427, 431, 494, 497, 504, 572, 586], "ijk": 80, "j": [80, 84, 85, 86, 92, 95, 117, 248, 328, 586], "k": [80, 84, 85, 86, 92, 95, 117, 418, 586], "indic": [80, 95, 98, 99, 154, 157, 167, 168, 236, 249, 255, 307, 316, 326, 331, 432, 505, 544, 555, 556, 572, 586], "respect": [80, 586], "lattic": [80, 94, 97, 98, 99, 233, 248, 313, 328, 330], "vector": [47, 80, 94, 97, 98, 99, 110, 138, 171, 249, 254, 255, 522, 523, 526, 527, 536, 537, 555, 556, 560, 567, 571, 574, 582, 583], "bijk": [80, 84, 85, 86], "integr": [80, 84, 85, 86, 92, 117], "asym": [80, 82, 83, 100, 101, 103, 109], "asymmetr": [80, 81, 82, 83, 84, 88, 98, 99, 100, 101, 103, 109, 115, 135, 154, 155, 157, 160, 170, 197, 208, 222, 232], "orbit": [80, 98, 99], "symmetr": 80, "equival": [47, 80, 247, 327, 410, 417], "occ_index": [80, 101, 109], "": [80, 98, 99, 273, 346, 381, 544], "species_index": [80, 101, 103, 104, 105, 106, 107, 109, 154, 157, 163, 222], "orient": [80, 99, 108, 154, 158], "variant": [80, 108], "orientation_index": 80, "array_lik": [80, 98, 99, 234, 418, 433, 440, 572], "transform": [80, 98, 99, 110, 112, 148, 198, 208, 209, 210, 211, 212, 314], "matrix": [47, 80, 97, 98, 99, 110, 112, 314, 522, 535, 555, 556, 560, 571, 574, 582], "t": [80, 98, 99, 280, 284, 354, 358, 410, 468], "relat": [80, 98, 99, 587], "superstructur": [80, 98, 99], "p": [80, 94, 97, 98, 99, 544, 586], "accord": [80, 98, 99, 277, 351, 409, 522, 586], "where": [80, 98, 99, 425, 426, 427, 431, 544, 572, 586], "matric": [80, 98, 99, 183, 184, 185, 186, 187, 522, 555], "column": [80, 97, 98, 99, 316, 326, 522, 525, 555, 556, 560, 567, 582], "get": [82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 100, 101, 102, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 117, 181, 232, 240, 241, 247, 266, 267, 272, 273, 320, 321, 327, 391, 392, 393, 428, 430, 460, 525, 529, 535], "integralsitecoordin": [84, 85, 86, 92], "cartesian": [90, 93, 173, 174], "r_": [90, 91, 93, 94], "cart": [90, 93], "belong": [90, 91], "frac": [91, 94, 418, 586], "rel": [94, 497, 501, 502, 505, 569, 586], "b_to_asym": 98, "longvector": [98, 99, 127, 128, 129, 130, 131, 132, 133, 136, 167, 182, 184, 185, 186, 187, 249, 255, 307, 331, 338, 383], "lower": 98, "than": [98, 149, 544, 586], "distinct": [98, 99, 154], "map": [98, 99], "onto": [98, 99], "via": [98, 99], "oper": [98, 99, 417, 555, 574], "allow": [98, 99, 100, 103, 146, 154, 158, 160, 162, 163, 219, 220, 221, 222, 223, 224, 225, 226, 228, 231, 232, 432, 505, 522, 569, 586, 587], "factor": [98, 417, 423], "species_list": 99, "unit_transformation_matrix_to_sup": 99, "unitl_to_asym": 99, "system": [99, 265, 269, 273, 280, 306, 343, 345, 351, 354, 355, 380, 392, 544, 555, 570, 586, 587], "fit": 99, "defin": [99, 209, 212, 253, 336, 544], "sub": 99, "u": 99, "t_": 99, "must": [99, 135, 351, 352, 388, 425, 426, 427, 431, 505, 544], "tile": 99, "tild": 99, "its": [100, 149], "occupi": [101, 109], "siteindexconvert": [102, 111], "speci": [103, 105, 106, 107, 108, 109, 154, 157, 158, 160, 166, 170, 185, 187, 197, 209, 212], "species_nam": 107, "superlattic": 110, "possibli": [111, 112], "make_with_custom_unitcel": 112, "unitcellindexconvert": 113, "intvector": [119, 120, 121, 122, 123, 124, 125, 168, 249, 255, 307, 331, 338, 383], "appear": [121, 129], "whose": [125, 133], "It": [125, 133, 146, 544, 586, 587], "error": [125, 133, 419, 586], "consist": 135, "linear_site_index": [135, 189, 236, 240, 242, 246, 249, 255, 307, 316, 320, 322, 331, 338, 383], "molvector": [141, 142, 143, 144, 145], "swap": [146, 148, 150, 153, 194, 196, 201, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232], "occswapcountmap": [146, 151, 204, 205, 206], "multipl": [146, 232, 494, 505], "occswap": [146, 195, 196, 197, 198, 199, 200, 201, 202, 203, 219, 221, 223, 224, 225, 226, 227, 228, 229, 230, 232], "cycl": 146, "occ": [146, 150, 151, 220, 224, 229, 231], "mani": [146, 151, 460, 480, 587], "multioccswap": [147, 148, 149, 150, 151, 152, 153, 220, 224, 229, 231], "arg1": [147, 156, 161, 196, 311, 418, 572], "represent": [147, 156, 161, 196], "multiswap": [147, 220, 224, 229], "so": [148, 149, 198, 200, 494, 555, 558, 574, 576], "mutat": [149, 176, 177, 193, 200, 351], "compar": 149, "less": [149, 544], "revers": [149, 219, 220, 221, 223, 224, 225, 226, 228, 231, 232], "jsonpars": [152, 159, 164, 202], "total": [153, 175, 176, 177, 193, 232, 237, 317, 365, 460, 572], "asymmetric_unit_index": [154, 157, 163], "pair": 154, "chosen": [154, 219, 220, 221, 226, 227, 228, 229, 230, 231, 544, 554], "distinguish": [154, 158], "molecular": [154, 158], "occcandid": [155, 156, 157, 158, 159, 160, 162, 176, 177, 179, 180, 191, 192, 194, 195, 199, 222], "candid": [156, 160, 162, 163, 164, 170, 176, 179, 191, 194, 195, 199, 222, 223, 225], "valid": [157, 197, 222], "instanc": [157, 160, 170, 197, 388, 433, 544, 568, 570, 586], "includingdistinct": 158, "store": [160, 166, 169, 203, 377, 459, 464, 479, 484, 506, 522, 540, 555, 561, 574, 578, 586, 587], "custom": [160, 432, 510, 544, 550, 586], "possibl": [160, 164, 232, 544], "occcandidatelist": [161, 162, 163, 164, 170, 178, 223, 225], "candidate_list": 161, "len": [162, 163, 555, 586], "match": [163, 425, 426, 427, 431, 505, 536, 539], "canon": [164, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 265, 268, 269, 273, 276, 277, 280, 281, 287, 302, 304, 306, 307, 308, 309, 310, 344, 345, 347, 350, 351, 354, 355, 361, 374, 380, 587], "semi": [164, 220, 221, 225, 228, 229, 230, 231, 232, 265, 268, 269, 273, 276, 277, 280, 281, 287, 302, 304, 306, 307, 308, 309, 310, 344, 345, 347, 350, 351, 354, 355, 361, 374, 380, 587], "grand": [164, 220, 221, 225, 228, 229, 230, 231, 232, 265, 268, 269, 273, 276, 277, 280, 281, 287, 302, 304, 306, 307, 308, 309, 310, 344, 345, 347, 350, 351, 354, 355, 361, 374, 380, 587], "modifi": [165, 167, 168, 277], "occev": [166, 167, 168, 169, 171, 226, 227, 228, 229, 230, 231, 303, 304, 308, 375, 376, 377, 409], "updat": [166, 169, 171, 207, 226, 227, 228, 229, 230, 231, 277, 312, 351, 375, 390, 409, 425, 426, 427, 431, 456, 587], "occtransformvector": [166, 169, 214, 215, 216, 217, 218], "being": [168, 208, 210, 211, 418, 425, 426, 427, 431, 568, 572], "occ_candidate_list": [170, 223, 225, 232], "update_speci": 170, "int32": [171, 188, 234, 236, 241, 243, 246, 320, 321, 323], "reflect": 171, "occur": 171, "access": [172, 178, 190, 522, 555, 558, 574, 576, 586], "id": [172, 190, 191, 192], "atom_s": [173, 174], "candidate_index": [177, 180, 192], "random_number_gener": [179, 180, 219, 220, 221, 226, 227, 228, 229, 230, 231, 304, 377, 410], "stochast": [179, 180, 544, 554], "choos": [179, 180, 219, 220, 221], "fill": 188, "tabl": 188, "info": 188, "variabl": [189, 239, 277, 293, 319, 337, 365, 395, 401, 403, 409, 587], "mol_id": 189, "location_index": [191, 192], "occswapcountmapp": 203, "itemsview": [204, 465, 485, 507, 541, 562, 579], "keysview": [205, 466, 486, 508, 542, 563, 580], "valuesview": [206, 467, 487, 509, 543, 564, 581], "occtransform": [208, 209, 210, 211, 212, 213, 214, 217, 218], "after": [212, 277, 351, 409, 418, 432, 442, 586], "occ_loc": [219, 220, 221, 226, 227, 228, 229, 230, 231], "canonical_swap": [219, 223, 226], "both": [219, 220, 221, 222, 223, 224, 225, 226, 228, 231, 232, 497], "forward": [219, 220, 221, 223, 224, 225, 226, 228, 231, 232], "semigrand_canonical_multiswap": [220, 231], "semigrand_canonical_swap": [221, 225, 228, 232], "form": [222, 587], "is_allow": 222, "make": [223, 224, 225, 417, 421, 586, 587], "single_swap": 224, "max_total_count": 224, "uniqu": 224, "maximum": [224, 432, 437, 451, 468, 470, 471, 472, 473, 566, 586], "up": 224, "propos": [226, 227, 228, 229, 230, 231, 277, 302, 303, 305, 308, 351, 374, 376, 378, 379, 409, 410, 516, 587], "interfac": [233, 587], "2d": [233, 234, 313, 324], "squar": [233, 248, 313, 328, 330], "Ising": [233, 234, 248, 249, 250, 251, 259, 265, 268, 302, 313, 314, 328, 329, 330, 331, 332, 333, 342, 343, 344, 374, 587], "model": [233, 234, 248, 249, 250, 251, 259, 265, 268, 302, 313, 314, 328, 329, 330, 331, 332, 333, 342, 344, 374, 572, 585], "ising_cpp": [234, 248, 249, 253, 255, 259, 265, 269, 280, 287, 302, 306, 312, 587], "fill_valu": [234, 314], "eigen": 234, "vectorxi": 234, "row": [234, 236, 244, 246, 529, 567], "col": [234, 236, 244, 246, 567], "support": [234, 314, 351], "isingconfigur": [235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 259, 261, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 342], "multi_index": [236, 246, 326], "unrol": [236, 246, 316, 326, 522, 523, 534, 536, 537, 555, 556, 560, 574], "unitcel": [238, 251, 257, 273, 310, 333, 391, 393], "equal": [238, 293, 318, 365, 395, 401, 403, 418, 425, 426, 427, 431, 544, 572, 586], "n_site": 238, "arrai": [241, 243, 247, 327, 418, 555, 558, 572, 576, 586], "const": 241, "new_occ": [242, 249, 255, 307, 322, 331, 338, 383], "2": [244, 248, 328, 330, 418, 432, 438, 511, 519, 544, 555, 556, 569, 572, 586], "dim": [247, 327], "multi_indexvalu": 247, "along": [247, 586], "dimens": [247, 324, 522, 555], "lattice_typ": [248, 328], "use_nlist": 248, "isingst": [248, 252, 253, 258, 260, 261, 262, 263, 264, 277, 305, 311, 328, 334, 335, 336, 341, 351, 352, 374, 378, 379, 387, 388], "energi": [248, 249, 250, 251, 252, 253, 265, 266, 269, 273, 274, 276, 279, 306, 307, 308, 309, 310, 328, 329, 331, 332, 333, 334, 335, 345, 348, 350, 352, 380, 382, 388, 391, 393, 410, 587], "implement": [248, 268, 328, 344, 380, 424, 586, 587], "could": [248, 328], "anisotrop": [248, 328], "bond": [248, 328], "interact": [248, 328, 329], "dimension": [248, 328, 330], "neighbor": [248, 587], "ahead": 248, "isingformationenergi": [249, 250, 251, 252, 265, 266, 267, 273, 329, 330, 331, 332, 333, 334, 335, 343, 348, 382], "_monte_ising_cpp": [249, 255], "__1": [249, 255], "long": [249, 255, 432, 480], "alloc": [249, 255], "due": [249, 255, 277, 307, 308, 331, 338, 351, 409, 410, 587], "flip": [249, 255, 304, 307, 331], "de": [249, 307, 308, 331, 572, 586], "per_supercel": [249, 307, 308, 331, 380, 410], "parametr": [253, 254, 255, 256, 257, 258, 265, 267, 269, 273, 275, 279, 280, 306, 336, 338, 339, 340, 341, 345, 349, 352, 354, 355, 380, 384, 388, 392, 587], "composit": [253, 254, 255, 256, 257, 258, 265, 267, 269, 273, 275, 279, 280, 306, 336, 337, 338, 339, 340, 341, 345, 349, 352, 354, 355, 380, 384, 388, 392, 555, 586, 587], "assum": [253, 336, 573], "ha": [253, 277, 336, 351, 409, 418, 555, 558, 566, 572, 574, 576, 586], "detail": [253, 336, 430, 586], "isingparamcomposit": [254, 255, 256, 257, 258, 265, 273, 337, 338, 339, 340, 341, 343, 349, 384], "independ": [254, 337], "size": [254, 323, 418, 522, 527, 555, 558, 572, 576, 583], "vec": [254, 255, 256, 257], "cdot": 255, "d": 255, "ndx": 255, "condit": [259, 277, 280, 311, 342, 349, 351, 354, 356, 357, 359, 360, 384, 387, 388, 572, 586, 587], "formation_energy_calcul": [265, 343, 350, 391], "param_composition_calcul": [265, 280, 343, 350, 354, 355, 392], "isingsystem": [266, 267, 269, 306, 345, 353, 380, 389], "parameter": [266, 267, 269, 279, 306, 345, 353, 380, 389], "semigrand_canon": [269, 280, 287, 302, 306, 312, 345, 354, 361, 374, 380, 390, 391, 392, 393, 587], "semigrandcanonicalcalcul": [270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 312, 346, 347, 348, 349, 350, 351, 352, 353, 587], "run": [270, 271, 276, 287, 289, 297, 346, 347, 348, 349, 350, 352, 361, 363, 364, 366, 369, 381, 382, 384, 388, 395, 397, 409, 429, 432, 449, 522, 586, 587], "sampler": [271, 370, 373, 405, 425, 426, 427, 431, 432, 443, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 540, 555, 568, 570, 573, 574, 586], "completion_check": [271, 586], "n_pass": [271, 373, 408], "etc": [271, 432, 442, 522, 555, 556, 560, 574, 586], "jsonstatesamplingfunctionmap": [272, 277, 287, 395, 399, 574, 579, 580, 581], "statesamplingfunctionmap": [273, 277, 287, 351, 361, 372, 395, 407, 441, 504, 555, 562, 563, 564, 569, 574, 586], "param_composit": [273, 380, 392], "formation_energi": [273, 391, 569, 586], "potential_energi": [273, 393, 586], "semigrandcanonicalpotenti": [273, 307, 308, 309, 310, 311, 350, 381, 382, 383, 384, 385, 386, 387, 388, 389, 587], "sampling_funct": [277, 287, 351, 361, 395, 441, 504, 555, 569, 574, 586], "json_sampling_funct": [277, 287, 395, 574], "completion_check_param": [277, 287, 351, 361, 395, 504, 569], "completioncheckparam": [277, 287, 351, 361, 395, 424, 428, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 455, 504, 569, 586], "event_gener": [277, 351], "semigrandcanonicaleventgener": [277, 303, 304, 305, 351, 375, 376, 377, 378, 379, 587], "sample_period": [277, 351, 409, 586], "method_log": [277, 312, 351, 390, 409, 425, 426, 427, 431, 586], "random_engin": [277, 351, 409], "write_status_f": [277, 351, 409], "callabl": [277, 351, 409, 417, 432, 544, 555, 568, 570, 574], "On": [277, 351], "obtain": [277, 351, 392], "control": [277, 351, 361, 395, 432, 544, 586, 587], "finish": [277, 351, 361, 395, 409], "accept": [47, 277, 288, 292, 351, 364, 396, 400, 409, 410], "pass": [277, 287, 293, 295, 351, 361, 365, 367, 395, 401, 403, 409, 426, 427, 432, 447, 449, 456, 468, 471, 475, 516, 544, 551, 565, 566, 586], "step": [277, 287, 288, 292, 293, 294, 295, 296, 351, 361, 365, 367, 395, 396, 400, 401, 402, 403, 404, 409, 426, 427, 432, 447, 449, 456, 468, 471, 475, 516, 544, 551, 565, 566, 586], "write": [277, 312, 351, 390, 409, 425, 426, 427, 431, 586], "work": [277, 587], "10": [277, 314, 324, 351, 409, 432, 434, 544, 545, 553, 572], "minut": [277, 351, 409], "signatur": [277, 351, 409, 432, 433, 440, 544], "def": [277, 351, 409, 432, 544, 555, 574], "f": [277, 351, 409, 433, 440, 544, 555, 574, 586], "mc_calcul": [277, 312, 351, 390, 391, 392, 393, 555, 586], "argument": [277, 307, 308, 351, 555, 558, 574, 576], "been": [277, 351, 409, 450, 451, 555, 558, 565, 566, 574, 576], "taken": [277, 351, 409, 432, 442, 453, 494, 528, 544, 548, 565, 566, 573], "default_write_statu": [277, 351], "summari": [277, 351, 408, 409], "stdout": [4, 24, 277, 351, 409], "temperatur": [280, 354, 409, 410], "exchange_potenti": [280, 349, 354, 380, 384], "ensembl": [280, 354, 586, 587], "exchang": [280, 281, 349, 354, 355, 384], "potenti": [280, 281, 311, 349, 352, 354, 355, 384, 388, 393, 409, 410, 587], "conjug": [280, 349, 354, 355, 384], "under": [280, 354, 355, 587], "consider": [280, 354, 355], "semigrandcanonicalcondit": [281, 282, 283, 284, 285, 286, 301, 311, 346, 351, 355, 356, 357, 358, 359, 360, 381, 387, 388, 587], "n_steps_per_pass": [287, 361, 373, 395, 408], "metropoli": [287, 347, 361, 395, 409, 410, 516, 586, 587], "semigrandcanonicaldata": [288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 347, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373], "checker": [289, 363, 397], "reject": [294, 296, 366, 402, 404, 410], "dure": [297, 346, 348, 349, 350, 351, 352, 363, 364, 366, 369, 381, 382, 384, 388, 397], "weight": [298, 370, 405, 408, 417, 418, 421, 423, 425, 426, 427, 431, 568, 570, 572, 586], "remain": [298, 370, 405, 586], "empti": [298, 370, 405], "unweight": [298, 370, 405, 586], "compat": [298, 370], "occ_ev": [303, 304, 308, 375, 377], "sign": 304, "occ_event_delta_per_supercel": 307, "occ_delta_per_supercel": 308, "screen": [312, 390], "ani": [312, 321, 323, 338, 339, 340, 390, 391, 392, 393, 451, 468, 522, 523, 555, 566, 587], "pure": 313, "ising_pi": [314, 328, 336, 342, 343, 345, 354, 361, 374, 380, 390, 391, 392, 393, 587], "tupl": [314, 316, 324, 326], "simpl": 314, "off": 314, "diagon": 314, "major": [316, 326, 522, 555, 556, 560, 582], "n_variable_sit": 318, "read": [321, 586], "view": 321, "10x10": 324, "isotrop": 328, "extend": 328, "also": [47, 336, 341, 377, 544, 586, 587], "set_stat": 336, "expect": [349, 384, 522, 555, 587], "vector_valu": [349, 384], "usabl": [352, 388], "completioncheck": [363, 397, 425, 426, 427, 428, 429, 430, 431, 586], "samplermap": [371, 406, 425, 426, 427, 431, 536, 539, 541, 542, 543, 555, 570, 573, 574, 586], "exclud": [373, 570], "completion_check_result": [373, 408], "completioncheckresult": [373, 408, 430, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458], "n_accept": [373, 408], "n_reject": [373, 408], "acceptance_r": [373, 408], "rejection_r": [373, 408], "mcevent": [375, 377], "e_sgc": 380, "e_form": 380, "n_unitcel": 380, "per_unitcel": [391, 392, 393], "formation_energy_f": 391, "statesamplingfunct": [391, 392, 393, 556, 557, 558, 559, 560, 561, 574], "n_independent_composit": 392, "param_composition_f": 392, "potential_energy_f": 393, "jsonstatesamplingfunct": [395, 575, 576, 577, 578], "basic": [395, 409, 412, 417], "basicoccupationmetropolisdata": [396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409], "rate": [396, 404, 544, 554], "jsonsamplermap": [398, 574], "potential_occ_delta_per_supercell_f": 409, "propose_event_f": 409, "apply_event_f": 409, "algorithm": [409, 572, 586, 587], "rng": 409, "delta_potential_energi": 410, "beta": 410, "criteria": [410, 443, 462, 482, 536], "els": [410, 432, 442, 565, 566], "random_r": 410, "math": [410, 544, 545], "exp": 410, "reciproc": 410, "eta": 410, "k_b": 410, "basicstatist": [413, 414, 415, 416, 417, 418, 422, 432, 433, 568, 570], "absolut": [413, 415, 497, 498, 499, 501, 505, 569, 586], "precis": [413, 415, 417, 418, 423, 432, 443, 461, 481, 489, 490, 497, 498, 499, 501, 502, 504, 505, 568, 569, 570, 572, 585], "mean": [413, 415, 417, 418, 423, 489, 490, 498, 499, 501, 544, 554, 572, 586], "confid": [417, 586], "95": 417, "weighted_observations_method": [417, 418], "n_resampl": 417, "10000": [417, 432, 437, 442], "seri": [417, 544, 586], "observ": [417, 418, 421, 423, 425, 426, 427, 431, 432, 433, 440, 522, 568, 570, 572, 586], "special": [417, 587], "call": [417, 505, 544, 555, 574, 586], "estim": [417, 418, 421, 423, 586], "fold": [417, 418, 586, 587], "wai": [417, 418, 586, 587], "varianc": [417, 423, 586], "directli": [417, 423, 533, 586], "autocorrel": [417, 423], "rho": [417, 418, 423, 586], "resampl": [417, 418, 421, 423, 572, 586], "autocovari": [417, 421, 586], "basicstatisticscalcul": [418, 419, 420, 421, 422, 423, 432, 433, 568, 586], "rang": [418, 572, 586], "depend": [418, 468, 586], "case": [418, 425, 426, 427, 431, 572], "No": 418, "hat": [418, 586], "gamma": [418, 586], "_k": [418, 586], "sum": [418, 586], "_i": 418, "x_i": 418, "bar": [418, 586], "x_": [418, 586], "gamma_k": [418, 586], "gamma_0": [418, 586], "sigma": [418, 586], "1d": [418, 572], "sample_weight": [418, 425, 426, 427, 431, 432, 433, 440, 568, 570, 572, 586], "associ": [418, 425, 426, 427, 431, 572, 586], "treat": [418, 425, 426, 427, 431, 572], "stat": 418, "interv": [419, 544, 586], "param": [424, 449, 456, 586], "count": [425, 426, 427, 449, 456, 544, 565, 566, 586], "cutoff": [425, 426, 431, 432, 439, 450, 451, 565, 566, 586], "contain": [425, 426, 427, 431, 568, 570, 572, 586], "obsserv": [425, 426, 427], "otherwis": [425, 426, 427, 431, 461, 481], "elaps": [425, 426, 427, 431, 432, 445, 449, 456, 468, 470, 474, 565, 566, 586], "clock": [425, 426, 427, 431, 445, 565, 566, 586], "is_complet": [425, 426, 427, 431], "next": [429, 449, 544], "requested_precis": [432, 440, 504, 568, 569, 570, 572], "requestedprecisionmap": [432, 443, 507, 508, 509, 568, 570], "cutoff_param": [432, 565, 566, 586], "cutoffcheckparam": [432, 439, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 565, 566], "calc_statistics_f": [432, 568, 570, 586], "equilibration_check_f": [432, 586], "requestedprecis": [432, 440, 443, 498, 499, 500, 501, 502, 503, 506, 568, 572], "individualequilibrationresult": [432, 440, 484, 494, 495, 496, 572, 586], "log_spac": 432, "check_begin": [432, 442], "check_period": [432, 442], "check_bas": [432, 442], "check_shift": [432, 442], "check_period_max": [432, 442], "request": [432, 443, 460, 461, 480, 481, 489, 490, 494, 497, 498, 501, 504, 505, 544, 568, 569, 570, 572, 586], "forc": [432, 586], "keep": [432, 586], "meet": 432, "certain": 432, "minimum": [432, 450, 468, 474, 475, 476, 477, 565, 586], "clocktim": [432, 449, 456, 468, 470, 474, 565, 566, 586], "stop": [432, 468, 586], "met": [432, 450, 451, 468, 565, 566, 572, 586], "reach": [432, 586], "limit": [432, 586], "prevent": 432, "too": 432, "soon": 432, "default_equilibration_check": [432, 440, 586], "logarithm": [432, 434, 437, 438, 510, 544, 550], "th": [432, 442, 544, 586], "round": [432, 442, 544], "howev": [432, 442], "subsequ": [432, 442], "100": [432, 435, 436, 442, 586], "200": [432, 442], "300": [432, 442], "1000": [432, 442, 522, 586], "20000": [432, 442], "30000": [432, 442], "effect": 432, "earliest": [432, 435], "shift": [432, 438, 544], "expon": [432, 438], "logirithm": 442, "completiong": 442, "samplercompon": [443, 464, 484, 488, 493, 506, 537, 538, 539, 568, 570], "convergencecheckresult": [446, 460, 461, 462, 463, 570], "equilibrationcheckresult": [448, 480, 481, 482, 483], "n_sampl": [449, 456, 524, 535, 565, 566], "reset": [24, 449, 456], "outcom": 452, "conver": 454, "wa": 454, "most": [456, 587], "n_samples_at_convergence_check": 456, "equilibration_check_result": 456, "convergence_check_result": 456, "were": [460, 461, 480, 481], "requir": [461, 481, 498, 499, 501, 531, 586, 587], "find": [461, 481], "individualconvergenceresult": [464, 489, 490, 491, 492, 568], "convergenceresultmap": [465, 466, 467], "_monte_sampl": 544, "individualconvergencecheckresult": [], "min_count": 468, "max_count": [468, 586], "min_tim": 468, "max_tim": 468, "min_sampl": 468, "max_sampl": 468, "min_clocktim": 468, "max_clocktim": 468, "don": 468, "took": 480, "equilibrationresultmap": [485, 486, 487], "individualequilibrationcheckresult": [], "involv": 494, "quantiti": [494, 504, 505, 522, 534, 536, 537, 539, 540, 552, 555, 556, 559, 560, 561, 569, 571, 574, 577, 578, 586], "ab": [497, 498, 499, 501, 505, 569, 572, 586], "p_": [497, 498, 499, 501, 502], "calc": [498, 501], "requst": 502, "_sampl": [504, 569], "dictionari": [504, 569], "requestedprecisionconstructor": [505, 569], "component_nam": [505, 522, 536, 555, 567, 569, 571, 586], "component_index": [505, 525, 536, 538, 555, 569, 574], "By": [505, 569], "To": 505, "chain": 505, "enum": [510, 516], "linearli": 510, "import": [510, 516, 555, 574, 586], "sample_method": [511, 512, 513, 514, 515, 544, 545, 546, 549, 553], "by_pass": [516, 544, 551], "degre": [516, 544], "freedom": [516, 544], "by_step": 516, "kmc": 516, "by_tim": 516, "sample_mod": [517, 518, 519, 520, 521, 544], "capacity_incr": [522, 531], "help": [522, 587], "re": [522, 586, 587], "underli": 522, "scalar": [47, 522, 555, 560, 571, 574, 583], "approach": [522, 555, 586, 587], "order": [522, 555, 556, 587], "done": [522, 555], "scalar_as_vector": [522, 555], "matrix_as_vector": [522, 555], "length": 522, "give": [522, 568, 570, 586], "element": [522, 572, 586], "much": [522, 572, 586], "resiz": [522, 532], "whenev": 522, "out": [522, 570], "preserv": 524, "n_compon": [524, 535], "sample_index": 529, "capac": [530, 531, 532], "push_back": 531, "sample_capac": 532, "conserv": 532, "flag": 535, "f_contigu": 535, "sampler_nam": [536, 544], "shared_ptr": [], "2589254117941673": 544, "custom_sample_at": 544, "stochastic_sample_period": 544, "do_sample_trajectori": 544, "do_sample_tim": 544, "fixtur": 544, "three": [544, 572, 586], "either": [544, 572, 586], "understand": 544, "dynam": 544, "especi": 544, "occasion": 544, "take": [544, 547, 586], "instead": 544, "determinist": 544, "highli": 544, "correl": 544, "probabilist": 544, "ln": 544, "greater": 544, "probabl": 544, "until": [544, 586], "poisson": 544, "process": 544, "r": 544, "pow": [544, 545], "samplingparam": [545, 546, 547, 548, 549, 550, 551, 552, 553, 554], "descript": [555, 556, 574], "exampl": [555, 568, 569, 570, 574, 585, 587], "clexmont": [555, 574, 587], "semigrandcanon": [555, 574], "setup": [555, 574], "composition_calcul": 555, "get_composition_calcul": 555, "mol_composition_f": 555, "mean_num_each_compon": 555, "get_occup": 555, "mol_composit": 555, "typic": [555, 556, 558, 574, 576], "lambda": [555, 558, 574, 576], "pointer": [555, 558, 574, 576], "exist": [555, 574], "__call__": [555, 574], "held": [555, 574], "proper": [555, 558, 576], "mg": [555, 556], "va": [555, 556], "o": [555, 556], "evalu": [558, 576, 586], "n_row": 567, "n_col": 567, "n_samples_for_statist": 568, "tail": 568, "fucntion": [568, 570], "helper": 569, "set_precis": 569, "001": 569, "parametric_composit": [569, 586], "corr": 569, "rpc": 569, "n_samples_for_equilibr": [570, 572, 586], "becaus": [570, 586], "equilibrium": 570, "arg2": 572, "wall": [572, 586], "asta": [572, 586], "mater": 572, "sci": 572, "eng": 572, "2002": 572, "521": 572, "538": 572, "partit": [572, 586], "equilibri": [572, 586], "stage": [572, 586], "start1": [572, 586], "start2": [572, 586], "start": 572, "within": [572, 586], "consid": [572, 586], "approxim": [572, 586], "desir": [572, 586], "precsion": [572, 586], "mean1": [572, 586], "mean2": [572, 586], "prec": [572, 586], "addition": [572, 586], "need": [572, 586, 587], "ensur": [572, 586], "side": [572, 586], "is_equilibr": [572, 586], "undefin": [572, 586], "weighted_observ": [572, 586], "w": [572, 586], "sum_i": 572, "weight_factor": [572, 586], "configuration_f": 574, "to_dict": 574, "configuration_json_f": 574, "json_sampl": 574, "easili": 574, "minimium": 586, "pars": 586, "random_number_engin": 586, "user": 586, "cluster": [586, 587], "expans": [586, 587], "ax": [586, 587], "composition_ax": 586, "formation_energy_clexul": 586, "formation_energy_coeff": 586, "systemtyp": 586, "formation_energy_clex_clexul": 586, "formation_energy_clex_coeff": 586, "would": 586, "montecarlocalculatortyp": 586, "abl": 586, "_function": 586, "make_formation_energy_f": 586, "make_potential_energy_f": 586, "make_parametric_composition_f": 586, "_f": 586, "quantity_nam": 586, "messag": 586, "path_to_logfil": 586, "n_step": 586, "i_sample_period": 586, "while": 586, "count_check": 586, "slow": 586, "down": 586, "excess": 586, "actual": 586, "longer": 586, "6e2": 586, "least": 586, "hr": 586, "averag": 586, "langl": 586, "rangl": 586, "approx": 586, "sum_l": 586, "x_l": 586, "normal": 586, "zero": 586, "larg": 586, "central": 586, "theorem": 586, "mathcal": 586, "stationari": 586, "lag": 586, "x_j": 586, "infty_": 586, "mathrm": 586, "cov": 586, "drawn": 586, "therefor": 586, "decai": 586, "infinit": 586, "introduc": 586, "discard": 586, "These": 586, "altern": 586, "through": 586, "overal": 586, "two": [586, 587], "search": 586, "smallest": 586, "_0": 586, "le": 586, "Then": 586, "regular": 586, "w_l": 586, "var": 586, "pm": 586, "sqrt": 586, "erf": 586, "analysi": 587, "test": 587, "effici": 587, "extens": 587, "written": 587, "frequent": 587, "primarili": 587, "namespac": 587, "throughout": 587, "discret": 587, "roughli": 587, "divid": 587, "microst": 587, "tutori": 587, "purpos": 587, "handl": 587, "basi": 587, "coeffici": 587, "manag": 587, "clusterexpans": 587, "compositioncalcul": 587, "compositionconvert": 587, "orderparamet": 587, "samplingfixtur": 587, "runmanag": 587, "semigrand": 587, "nfold": 587, "flex": 587, "flexibl": 587, "addit": 587, "term": 587, "enabl": 587, "umbrella": 587, "quasi": 587, "sq": 587, "from_dict": 47}, "objects": {"libcasm": [[3, 0, 0, "-", "monte"]], "libcasm.monte": [[4, 1, 1, "", "MethodLog"], [38, 1, 1, "", "RandomNumberEngine"], [43, 1, 1, "", "RandomNumberGenerator"], [47, 1, 1, "", "ValueMap"], [56, 0, 0, "-", "events"], [233, 0, 0, "-", "ising_cpp"], [313, 0, 0, "-", "ising_py"], [394, 0, 0, "-", "methods"], [411, 0, 0, "-", "sampling"]], "libcasm.monte.MethodLog": [[5, 2, 1, "", "begin_lap"], [6, 2, 1, "", "begin_section_print_always"], [7, 2, 1, "", "begin_section_print_if_debug"], [8, 2, 1, "", "begin_section_print_if_quiet"], [9, 2, 1, "", "begin_section_print_if_standard"], [10, 2, 1, "", "begin_section_print_if_verbose"], [11, 2, 1, "", "decrease_indent"], [12, 2, 1, "", "end_section"], [13, 2, 1, "", "hide_clock"], [14, 2, 1, "", "increase_indent"], [15, 2, 1, "", "indent_str"], [16, 2, 1, "", "lap_time"], [17, 2, 1, "", "log_frequency"], [18, 2, 1, "", "logfile_path"], [19, 2, 1, "", "paragraph"], [20, 2, 1, "", "paragraph_justification"], [21, 2, 1, "", "paragraph_width"], [22, 2, 1, "", "print"], [23, 2, 1, "", "reset"], [24, 2, 1, "", "reset_to_stdout"], [25, 2, 1, "", "restart_clock"], [26, 2, 1, "", "section"], [27, 2, 1, "", "set_debug"], [28, 2, 1, "", "set_indent_space"], [29, 2, 1, "", "set_initial_indent_space"], [30, 2, 1, "", "set_paragraph_justification"], [31, 2, 1, "", "set_paragraph_width"], [32, 2, 1, "", "set_quiet"], [33, 2, 1, "", "set_standard"], [34, 2, 1, "", "set_verbose"], [35, 2, 1, "", "show_clock"], [36, 2, 1, "", "time_s"], [37, 2, 1, "", "verbatim"]], "libcasm.monte.RandomNumberEngine": [[39, 2, 1, "", "dump"], [40, 2, 1, "", "load"], [41, 2, 1, "", "seed"], [42, 2, 1, "", "seed_seq"]], "libcasm.monte.RandomNumberGenerator": [[44, 2, 1, "", "engine"], [45, 2, 1, "", "random_int"], [46, 2, 1, "", "random_real"]], "libcasm.monte.ValueMap": [[48, 3, 1, "", "boolean_values"], [49, 2, 1, "", "from_dict"], [50, 2, 1, "", "is_mismatched"], [51, 2, 1, "", "make_incremented_values"], [52, 3, 1, "", "matrix_values"], [53, 3, 1, "", "scalar_values"], [54, 2, 1, "", "to_dict"], [55, 3, 1, "", "vector_values"]], "libcasm.monte.events": [[57, 1, 1, "", "Atom"], [60, 1, 1, "", "AtomLocation"], [64, 1, 1, "", "AtomTraj"], [68, 1, 1, "", "AtomTrajVector"], [74, 1, 1, "", "AtomVector"], [80, 1, 1, "", "Conversions"], [118, 1, 1, "", "IntVector"], [126, 1, 1, "", "LongVector"], [134, 1, 1, "", "Mol"], [140, 1, 1, "", "MolVector"], [146, 1, 1, "", "MultiOccSwap"], [154, 1, 1, "", "OccCandidate"], [160, 1, 1, "", "OccCandidateList"], [165, 1, 1, "", "OccEvent"], [170, 1, 1, "", "OccLocation"], [194, 1, 1, "", "OccSwap"], [203, 1, 1, "", "OccSwapCountMap"], [207, 1, 1, "", "OccTransform"], [213, 1, 1, "", "OccTransformVector"], [219, 4, 1, "", "choose_canonical_swap"], [220, 4, 1, "", "choose_semigrand_canonical_multiswap"], [221, 4, 1, "", "choose_semigrand_canonical_swap"], [222, 4, 1, "", "is_allowed_canonical_swap"], [223, 4, 1, "", "make_canonical_swaps"], [224, 4, 1, "", "make_multiswaps"], [225, 4, 1, "", "make_semigrand_canonical_swaps"], [226, 4, 1, "", "propose_canonical_event"], [227, 4, 1, "", "propose_canonical_event_from_swap"], [228, 4, 1, "", "propose_semigrand_canonical_event"], [229, 4, 1, "", "propose_semigrand_canonical_event_from_multiswap"], [230, 4, 1, "", "propose_semigrand_canonical_event_from_swap"], [231, 4, 1, "", "propose_semigrand_canonical_multiswap_event"], [232, 4, 1, "", "swaps_allowed_per_unitcell"]], "libcasm.monte.events.Atom": [[58, 3, 1, "", "n_jumps"], [59, 3, 1, "", "translation"]], "libcasm.monte.events.AtomLocation": [[61, 3, 1, "", "linear_site_index"], [62, 3, 1, "", "mol_comp"], [63, 3, 1, "", "mol_id"]], "libcasm.monte.events.AtomTraj": [[65, 3, 1, "", "delta_ijk"], [66, 3, 1, "", "from"], [67, 3, 1, "", "to"]], "libcasm.monte.events.AtomTrajVector": [[69, 2, 1, "", "append"], [70, 2, 1, "", "clear"], [71, 2, 1, "", "extend"], [72, 2, 1, "", "insert"], [73, 2, 1, "", "pop"]], "libcasm.monte.events.AtomVector": [[75, 2, 1, "", "append"], [76, 2, 1, "", "clear"], [77, 2, 1, "", "extend"], [78, 2, 1, "", "insert"], [79, 2, 1, "", "pop"]], "libcasm.monte.events.Conversions": [[81, 2, 1, "", "asym_size"], [82, 2, 1, "", "asym_to_b"], [83, 2, 1, "", "asym_to_unitl"], [84, 2, 1, "", "bijk_to_asym"], [85, 2, 1, "", "bijk_to_l"], [86, 2, 1, "", "bijk_to_unitl"], [87, 2, 1, "", "l_size"], [88, 2, 1, "", "l_to_asym"], [89, 2, 1, "", "l_to_b"], [90, 2, 1, "", "l_to_basis_cart"], [91, 2, 1, "", "l_to_basis_frac"], [92, 2, 1, "", "l_to_bijk"], [93, 2, 1, "", "l_to_cart"], [94, 2, 1, "", "l_to_frac"], [95, 2, 1, "", "l_to_ijk"], [96, 2, 1, "", "l_to_unitl"], [97, 2, 1, "", "lat_column_mat"], [98, 2, 1, "", "make_with_custom_asym"], [99, 2, 1, "", "make_with_custom_unitcell"], [100, 2, 1, "", "occ_size"], [101, 2, 1, "", "occ_to_species_index"], [102, 2, 1, "", "site_index_converter"], [103, 2, 1, "", "species_allowed"], [104, 2, 1, "", "species_index_to_atoms_size"], [105, 2, 1, "", "species_index_to_name"], [106, 2, 1, "", "species_index_to_occupant"], [107, 2, 1, "", "species_name_to_index"], [108, 2, 1, "", "species_size"], [109, 2, 1, "", "species_to_occ_index"], [110, 2, 1, "", "transformation_matrix_to_super"], [111, 2, 1, "", "unit_site_index_converter"], [112, 2, 1, "", "unit_transformation_matrix_to_super"], [113, 2, 1, "", "unitcell_index_converter"], [114, 2, 1, "", "unitl_size"], [115, 2, 1, "", "unitl_to_asym"], [116, 2, 1, "", "unitl_to_b"], [117, 2, 1, "", "unitl_to_bijk"]], "libcasm.monte.events.IntVector": [[119, 2, 1, "", "append"], [120, 2, 1, "", "clear"], [121, 2, 1, "", "count"], [122, 2, 1, "", "extend"], [123, 2, 1, "", "insert"], [124, 2, 1, "", "pop"], [125, 2, 1, "", "remove"]], "libcasm.monte.events.LongVector": [[127, 2, 1, "", "append"], [128, 2, 1, "", "clear"], [129, 2, 1, "", "count"], [130, 2, 1, "", "extend"], [131, 2, 1, "", "insert"], [132, 2, 1, "", "pop"], [133, 2, 1, "", "remove"]], "libcasm.monte.events.Mol": [[135, 3, 1, "", "asymmetric_unit_index"], [136, 3, 1, "", "component_id"], [137, 3, 1, "", "id"], [138, 3, 1, "", "linear_site_index"], [139, 3, 1, "", "mol_location_index"]], "libcasm.monte.events.MolVector": [[141, 2, 1, "", "append"], [142, 2, 1, "", "clear"], [143, 2, 1, "", "extend"], [144, 2, 1, "", "insert"], [145, 2, 1, "", "pop"]], "libcasm.monte.events.MultiOccSwap": [[147, 2, 1, "", "from_dict"], [148, 2, 1, "", "reverse"], [149, 2, 1, "", "sort"], [150, 2, 1, "", "sorted"], [151, 3, 1, "", "swaps"], [152, 2, 1, "", "to_dict"], [153, 3, 1, "", "total_count"]], "libcasm.monte.events.OccCandidate": [[155, 3, 1, "", "asymmetric_unit_index"], [156, 2, 1, "", "from_dict"], [157, 2, 1, "", "is_valid"], [158, 3, 1, "", "species_index"], [159, 2, 1, "", "to_dict"]], "libcasm.monte.events.OccCandidateList": [[161, 2, 1, "", "from_dict"], [162, 2, 1, "", "index"], [163, 2, 1, "", "matching_index"], [164, 2, 1, "", "to_dict"]], "libcasm.monte.events.OccEvent": [[166, 3, 1, "", "atom_traj"], [167, 3, 1, "", "linear_site_index"], [168, 3, 1, "", "new_occ"], [169, 3, 1, "", "occ_transform"]], "libcasm.monte.events.OccLocation": [[171, 2, 1, "", "apply"], [172, 2, 1, "", "atom"], [173, 2, 1, "", "atom_positions_cart"], [174, 2, 1, "", "atom_positions_cart_within"], [175, 2, 1, "", "atom_size"], [176, 2, 1, "", "cand_size"], [177, 2, 1, "", "cand_size_by_candidate_index"], [178, 2, 1, "", "candidate_list"], [179, 2, 1, "", "choose_mol"], [180, 2, 1, "", "choose_mol_by_candidate_index"], [181, 2, 1, "", "convert"], [182, 2, 1, "", "current_atom_n_jumps"], [183, 2, 1, "", "current_atom_names"], [184, 2, 1, "", "current_atom_position_index"], [185, 2, 1, "", "current_atom_species_index"], [186, 2, 1, "", "initial_atom_position_index"], [187, 2, 1, "", "initial_atom_species_index"], [188, 2, 1, "", "initialize"], [189, 2, 1, "", "linear_site_index_to_mol_id"], [190, 2, 1, "", "mol"], [191, 2, 1, "", "mol_id"], [192, 2, 1, "", "mol_id_by_candidate_index"], [193, 2, 1, "", "mol_size"]], "libcasm.monte.events.OccSwap": [[195, 3, 1, "", "first"], [196, 2, 1, "", "from_dict"], [197, 2, 1, "", "is_valid"], [198, 2, 1, "", "reverse"], [199, 3, 1, "", "second"], [200, 2, 1, "", "sort"], [201, 2, 1, "", "sorted"], [202, 2, 1, "", "to_dict"]], "libcasm.monte.events.OccSwapCountMap": [[204, 2, 1, "", "items"], [205, 2, 1, "", "keys"], [206, 2, 1, "", "values"]], "libcasm.monte.events.OccTransform": [[208, 3, 1, "", "asym"], [209, 3, 1, "", "from_species"], [210, 3, 1, "", "linear_site_index"], [211, 3, 1, "", "mol_id"], [212, 3, 1, "", "to_species"]], "libcasm.monte.events.OccTransformVector": [[214, 2, 1, "", "append"], [215, 2, 1, "", "clear"], [216, 2, 1, "", "extend"], [217, 2, 1, "", "insert"], [218, 2, 1, "", "pop"]], "libcasm.monte.ising_cpp": [[234, 1, 1, "", "IsingConfiguration"], [248, 1, 1, "", "IsingFormationEnergy"], [253, 1, 1, "", "IsingParamComposition"], [259, 1, 1, "", "IsingState"], [265, 1, 1, "", "IsingSystem"], [268, 0, 0, "-", "semigrand_canonical"]], "libcasm.monte.ising_cpp.IsingConfiguration": [[235, 2, 1, "", "from_dict"], [236, 2, 1, "", "from_linear_site_index"], [237, 3, 1, "", "n_sites"], [238, 3, 1, "", "n_unitcells"], [239, 3, 1, "", "n_variable_sites"], [240, 2, 1, "", "occ"], [241, 2, 1, "", "occupation"], [242, 2, 1, "", "set_occ"], [243, 2, 1, "", "set_occupation"], [244, 3, 1, "", "shape"], [245, 2, 1, "", "to_dict"], [246, 2, 1, "", "to_linear_site_index"], [247, 2, 1, "", "within"]], "libcasm.monte.ising_cpp.IsingFormationEnergy": [[249, 2, 1, "", "occ_delta_per_supercell"], [250, 2, 1, "", "per_supercell"], [251, 2, 1, "", "per_unitcell"], [252, 2, 1, "", "set_state"]], "libcasm.monte.ising_cpp.IsingParamComposition": [[254, 2, 1, "", "n_independent_compositions"], [255, 2, 1, "", "occ_delta_per_supercell"], [256, 2, 1, "", "per_supercell"], [257, 2, 1, "", "per_unitcell"], [258, 2, 1, "", "set_state"]], "libcasm.monte.ising_cpp.IsingState": [[260, 3, 1, "", "conditions"], [261, 3, 1, "", "configuration"], [262, 2, 1, "", "from_dict"], [263, 3, 1, "", "properties"], [264, 2, 1, "", "to_dict"]], "libcasm.monte.ising_cpp.IsingSystem": [[266, 3, 1, "", "formation_energy_calculator"], [267, 3, 1, "", "param_composition_calculator"]], "libcasm.monte.ising_cpp.semigrand_canonical": [[269, 1, 1, "", "SemiGrandCanonicalCalculator"], [280, 1, 1, "", "SemiGrandCanonicalConditions"], [287, 1, 1, "", "SemiGrandCanonicalData"], [302, 1, 1, "", "SemiGrandCanonicalEventGenerator"], [306, 1, 1, "", "SemiGrandCanonicalPotential"], [312, 4, 1, "", "default_write_status"]], "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator": [[270, 3, 1, "", "conditions"], [271, 3, 1, "", "data"], [272, 2, 1, "", "default_json_sampling_functions"], [273, 2, 1, "", "default_sampling_functions"], [274, 3, 1, "", "formation_energy_calculator"], [275, 3, 1, "", "param_composition_calculator"], [276, 3, 1, "", "potential"], [277, 2, 1, "", "run"], [278, 3, 1, "", "state"], [279, 3, 1, "", "system"]], "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions": [[281, 3, 1, "", "exchange_potential"], [282, 2, 1, "", "from_dict"], [283, 2, 1, "", "from_values"], [284, 3, 1, "", "temperature"], [285, 2, 1, "", "to_dict"], [286, 2, 1, "", "to_values"]], "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData": [[288, 2, 1, "", "acceptance_rate"], [289, 3, 1, "", "completion_check"], [290, 3, 1, "", "json_samplers"], [291, 3, 1, "", "json_sampling_functions"], [292, 3, 1, "", "n_accept"], [293, 3, 1, "", "n_pass"], [294, 3, 1, "", "n_reject"], [295, 3, 1, "", "n_steps_per_pass"], [296, 2, 1, "", "rejection_rate"], [297, 2, 1, "", "reset"], [298, 3, 1, "", "sample_weight"], [299, 3, 1, "", "samplers"], [300, 3, 1, "", "sampling_functions"], [301, 2, 1, "", "to_dict"]], "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalEventGenerator": [[303, 2, 1, "", "apply"], [304, 2, 1, "", "propose"], [305, 2, 1, "", "set_state"]], "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential": [[307, 2, 1, "", "occ_delta_per_supercell"], [308, 2, 1, "", "occ_event_delta_per_supercell"], [309, 2, 1, "", "per_supercell"], [310, 2, 1, "", "per_unitcell"], [311, 2, 1, "", "set_state"]], "libcasm.monte.ising_py": [[314, 1, 1, "", "IsingConfiguration"], [328, 1, 1, "", "IsingFormationEnergy"], [336, 1, 1, "", "IsingParamComposition"], [342, 1, 1, "", "IsingState"], [343, 1, 1, "", "IsingSystem"], [344, 0, 0, "-", "semigrand_canonical"]], "libcasm.monte.ising_py.IsingConfiguration": [[315, 2, 1, "", "from_dict"], [316, 2, 1, "", "from_linear_site_index"], [317, 5, 1, "", "n_sites"], [318, 5, 1, "", "n_unitcells"], [319, 5, 1, "", "n_variable_sites"], [320, 2, 1, "", "occ"], [321, 2, 1, "", "occupation"], [322, 2, 1, "", "set_occ"], [323, 2, 1, "", "set_occupation"], [324, 5, 1, "", "shape"], [325, 2, 1, "", "to_dict"], [326, 2, 1, "", "to_linear_site_index"], [327, 2, 1, "", "within"]], "libcasm.monte.ising_py.IsingFormationEnergy": [[329, 5, 1, "", "J"], [330, 5, 1, "", "lattice_type"], [331, 2, 1, "", "occ_delta_per_supercell"], [332, 2, 1, "", "per_supercell"], [333, 2, 1, "", "per_unitcell"], [334, 2, 1, "", "set_state"], [335, 5, 1, "", "state"]], "libcasm.monte.ising_py.IsingParamComposition": [[337, 2, 1, "", "n_independent_compositions"], [338, 2, 1, "", "occ_delta_per_supercell"], [339, 2, 1, "", "per_supercell"], [340, 2, 1, "", "per_unitcell"], [341, 2, 1, "", "set_state"]], "libcasm.monte.ising_py.IsingState": [[342, 5, 1, "", "conditions"], [342, 5, 1, "", "configuration"], [342, 5, 1, "", "properties"]], "libcasm.monte.ising_py.semigrand_canonical": [[345, 1, 1, "", "SemiGrandCanonicalCalculator"], [354, 1, 1, "", "SemiGrandCanonicalConditions"], [361, 1, 1, "", "SemiGrandCanonicalData"], [374, 1, 1, "", "SemiGrandCanonicalEventGenerator"], [380, 1, 1, "", "SemiGrandCanonicalPotential"], [390, 4, 1, "", "default_write_status"], [391, 4, 1, "", "make_formation_energy_f"], [392, 4, 1, "", "make_param_composition_f"], [393, 4, 1, "", "make_potential_energy_f"]], "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator": [[346, 5, 1, "", "conditions"], [347, 5, 1, "", "data"], [348, 5, 1, "", "formation_energy_calculator"], [349, 5, 1, "", "param_composition_calculator"], [350, 5, 1, "", "potential"], [351, 2, 1, "", "run"], [352, 5, 1, "", "state"], [353, 5, 1, "", "system"]], "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions": [[355, 5, 1, "", "exchange_potential"], [356, 2, 1, "", "from_dict"], [357, 2, 1, "", "from_values"], [358, 5, 1, "", "temperature"], [359, 2, 1, "", "to_dict"], [360, 2, 1, "", "to_values"]], "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData": [[362, 2, 1, "", "acceptance_rate"], [363, 5, 1, "", "completion_check"], [364, 5, 1, "", "n_accept"], [365, 5, 1, "", "n_pass"], [366, 5, 1, "", "n_reject"], [367, 5, 1, "", "n_steps_per_pass"], [368, 2, 1, "", "rejection_rate"], [369, 2, 1, "", "reset"], [370, 5, 1, "", "sample_weight"], [371, 5, 1, "", "samplers"], [372, 5, 1, "", "sampling_functions"], [373, 2, 1, "", "to_dict"]], "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator": [[375, 2, 1, "", "apply"], [376, 5, 1, "", "occ_event"], [377, 2, 1, "", "propose"], [378, 2, 1, "", "set_state"], [379, 5, 1, "", "state"]], "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential": [[381, 5, 1, "", "conditions"], [382, 5, 1, "", "formation_energy_calculator"], [383, 2, 1, "", "occ_delta_per_supercell"], [384, 5, 1, "", "param_composition_calculator"], [385, 2, 1, "", "per_supercell"], [386, 2, 1, "", "per_unitcell"], [387, 2, 1, "", "set_state"], [388, 5, 1, "", "state"], [389, 5, 1, "", "system"]], "libcasm.monte.methods": [[395, 1, 1, "", "BasicOccupationMetropolisData"], [409, 4, 1, "", "basic_occupation_metropolis"], [410, 4, 1, "", "metropolis_acceptance"]], "libcasm.monte.methods.BasicOccupationMetropolisData": [[396, 2, 1, "", "acceptance_rate"], [397, 3, 1, "", "completion_check"], [398, 3, 1, "", "json_samplers"], [399, 3, 1, "", "json_sampling_functions"], [400, 3, 1, "", "n_accept"], [401, 3, 1, "", "n_pass"], [402, 3, 1, "", "n_reject"], [403, 3, 1, "", "n_steps_per_pass"], [404, 2, 1, "", "rejection_rate"], [405, 3, 1, "", "sample_weight"], [406, 3, 1, "", "samplers"], [407, 3, 1, "", "sampling_functions"], [408, 2, 1, "", "to_dict"]], "libcasm.monte.sampling": [[412, 1, 1, "", "BasicStatistics"], [417, 1, 1, "", "BasicStatisticsCalculator"], [424, 1, 1, "", "CompletionCheck"], [432, 1, 1, "", "CompletionCheckParams"], [444, 1, 1, "", "CompletionCheckResults"], [459, 1, 1, "", "ConvergenceCheckResults"], [464, 1, 1, "", "ConvergenceResultMap"], [468, 1, 1, "", "CutoffCheckParams"], [479, 1, 1, "", "EquilibrationCheckResults"], [484, 1, 1, "", "EquilibrationResultMap"], [488, 1, 1, "", "IndividualConvergenceResult"], [493, 1, 1, "", "IndividualEquilibrationResult"], [497, 1, 1, "", "RequestedPrecision"], [504, 1, 1, "", "RequestedPrecisionConstructor"], [506, 1, 1, "", "RequestedPrecisionMap"], [510, 1, 1, "", "SAMPLE_METHOD"], [516, 1, 1, "", "SAMPLE_MODE"], [522, 1, 1, "", "Sampler"], [536, 1, 1, "", "SamplerComponent"], [540, 1, 1, "", "SamplerMap"], [544, 1, 1, "", "SamplingParams"], [555, 1, 1, "", "StateSamplingFunction"], [561, 1, 1, "", "StateSamplingFunctionMap"], [565, 4, 1, "", "all_minimums_met"], [566, 4, 1, "", "any_maximum_met"], [567, 4, 1, "", "colmajor_component_names"], [568, 4, 1, "", "component_convergence_check"], [569, 4, 1, "", "converge"], [570, 4, 1, "", "convergence_check"], [571, 4, 1, "", "default_component_names"], [572, 4, 1, "", "default_equilibration_check"], [573, 4, 1, "", "get_n_samples"], [574, 1, 1, "", "jsonStateSamplingFunction"], [578, 1, 1, "", "jsonStateSamplingFunctionMap"], [582, 4, 1, "", "matrix_as_vector"], [583, 4, 1, "", "scalar_as_vector"]], "libcasm.monte.sampling.BasicStatistics": [[413, 3, 1, "", "calculated_precision"], [414, 3, 1, "", "mean"], [415, 2, 1, "", "relative_precision"], [416, 2, 1, "", "to_dict"]], "libcasm.monte.sampling.BasicStatisticsCalculator": [[418, 2, 1, "", "calculate"], [419, 3, 1, "", "confidence"], [420, 2, 1, "", "from_dict"], [421, 3, 1, "", "n_resamples"], [422, 2, 1, "", "to_dict"], [423, 3, 1, "", "weighted_observations_method"]], "libcasm.monte.sampling.CompletionCheck": [[425, 2, 1, "", "check"], [426, 2, 1, "", "count_and_time_check"], [427, 2, 1, "", "count_check"], [428, 2, 1, "", "params"], [429, 2, 1, "", "reset"], [430, 2, 1, "", "results"], [431, 2, 1, "", "time_check"]], "libcasm.monte.sampling.CompletionCheckParams": [[433, 3, 1, "", "calc_statistics_f"], [434, 3, 1, "", "check_base"], [435, 3, 1, "", "check_begin"], [436, 3, 1, "", "check_period"], [437, 3, 1, "", "check_period_max"], [438, 3, 1, "", "check_shift"], [439, 3, 1, "", "cutoff_params"], [440, 3, 1, "", "equilibration_check_f"], [441, 2, 1, "", "from_dict"], [442, 3, 1, "", "log_spacing"], [443, 3, 1, "", "requested_precision"]], "libcasm.monte.sampling.CompletionCheckResults": [[445, 3, 1, "", "clocktime"], [446, 3, 1, "", "convergence_check_results"], [447, 3, 1, "", "count"], [448, 3, 1, "", "equilibration_check_results"], [449, 2, 1, "", "full_reset"], [450, 3, 1, "", "has_all_minimums_met"], [451, 3, 1, "", "has_any_maximum_met"], [452, 3, 1, "", "is_complete"], [453, 3, 1, "", "n_samples"], [454, 3, 1, "", "n_samples_at_convergence_check"], [455, 3, 1, "", "params"], [456, 2, 1, "", "partial_reset"], [457, 3, 1, "", "time"], [458, 2, 1, "", "to_dict"]], "libcasm.monte.sampling.ConvergenceCheckResults": [[460, 3, 1, "", "N_samples_for_statistics"], [461, 3, 1, "", "all_converged"], [462, 3, 1, "", "individual_results"], [463, 2, 1, "", "to_dict"]], "libcasm.monte.sampling.ConvergenceResultMap": [[465, 2, 1, "", "items"], [466, 2, 1, "", "keys"], [467, 2, 1, "", "values"]], "libcasm.monte.sampling.CutoffCheckParams": [[469, 2, 1, "", "from_dict"], [470, 3, 1, "", "max_clocktime"], [471, 3, 1, "", "max_count"], [472, 3, 1, "", "max_sample"], [473, 3, 1, "", "max_time"], [474, 3, 1, "", "min_clocktime"], [475, 3, 1, "", "min_count"], [476, 3, 1, "", "min_sample"], [477, 3, 1, "", "min_time"], [478, 2, 1, "", "to_dict"]], "libcasm.monte.sampling.EquilibrationCheckResults": [[480, 3, 1, "", "N_samples_for_all_to_equilibrate"], [481, 3, 1, "", "all_equilibrated"], [482, 3, 1, "", "individual_results"], [483, 2, 1, "", "to_dict"]], "libcasm.monte.sampling.EquilibrationResultMap": [[485, 2, 1, "", "items"], [486, 2, 1, "", "keys"], [487, 2, 1, "", "values"]], "libcasm.monte.sampling.IndividualConvergenceResult": [[489, 3, 1, "", "is_converged"], [490, 3, 1, "", "requested_precision"], [491, 3, 1, "", "stats"], [492, 2, 1, "", "to_dict"]], "libcasm.monte.sampling.IndividualEquilibrationResult": [[494, 3, 1, "", "N_samples_for_equilibration"], [495, 3, 1, "", "is_equilibrated"], [496, 2, 1, "", "to_dict"]], "libcasm.monte.sampling.RequestedPrecision": [[498, 3, 1, "", "abs_convergence_is_required"], [499, 3, 1, "", "abs_precision"], [500, 2, 1, "", "from_dict"], [501, 3, 1, "", "rel_convergence_is_required"], [502, 3, 1, "", "rel_precision"], [503, 2, 1, "", "to_dict"]], "libcasm.monte.sampling.RequestedPrecisionConstructor": [[505, 2, 1, "", "set_precision"]], "libcasm.monte.sampling.RequestedPrecisionMap": [[507, 2, 1, "", "items"], [508, 2, 1, "", "keys"], [509, 2, 1, "", "values"]], "libcasm.monte.sampling.SAMPLE_METHOD": [[511, 5, 1, "", "CUSTOM"], [512, 5, 1, "", "LINEAR"], [513, 5, 1, "", "LOG"], [514, 3, 1, "", "name"], [515, 3, 1, "", "value"]], "libcasm.monte.sampling.SAMPLE_MODE": [[517, 5, 1, "", "BY_PASS"], [518, 5, 1, "", "BY_STEP"], [519, 5, 1, "", "BY_TIME"], [520, 3, 1, "", "name"], [521, 3, 1, "", "value"]], "libcasm.monte.sampling.Sampler": [[523, 2, 1, "", "append"], [524, 2, 1, "", "clear"], [525, 2, 1, "", "component"], [526, 2, 1, "", "component_names"], [527, 2, 1, "", "n_components"], [528, 2, 1, "", "n_samples"], [529, 2, 1, "", "sample"], [530, 2, 1, "", "sample_capacity"], [531, 2, 1, "", "set_capacity_increment"], [532, 2, 1, "", "set_sample_capacity"], [533, 2, 1, "", "set_values"], [534, 2, 1, "", "shape"], [535, 2, 1, "", "values"]], "libcasm.monte.sampling.SamplerComponent": [[537, 3, 1, "", "component_index"], [538, 3, 1, "", "component_name"], [539, 3, 1, "", "sampler_name"]], "libcasm.monte.sampling.SamplerMap": [[541, 2, 1, "", "items"], [542, 2, 1, "", "keys"], [543, 2, 1, "", "values"]], "libcasm.monte.sampling.SamplingParams": [[545, 3, 1, "", "base"], [546, 3, 1, "", "begin"], [547, 3, 1, "", "do_sample_time"], [548, 3, 1, "", "do_sample_trajectory"], [549, 3, 1, "", "period"], [550, 3, 1, "", "sample_method"], [551, 3, 1, "", "sample_mode"], [552, 3, 1, "", "sampler_names"], [553, 3, 1, "", "shift"], [554, 3, 1, "", "stochastic_sample_period"]], "libcasm.monte.sampling.StateSamplingFunction": [[556, 3, 1, "", "component_names"], [557, 3, 1, "", "description"], [558, 3, 1, "", "function"], [559, 3, 1, "", "name"], [560, 3, 1, "", "shape"]], "libcasm.monte.sampling.StateSamplingFunctionMap": [[562, 2, 1, "", "items"], [563, 2, 1, "", "keys"], [564, 2, 1, "", "values"]], "libcasm.monte.sampling.jsonStateSamplingFunction": [[575, 3, 1, "", "description"], [576, 3, 1, "", "function"], [577, 3, 1, "", "name"]], "libcasm.monte.sampling.jsonStateSamplingFunctionMap": [[579, 2, 1, "", "items"], [580, 2, 1, "", "keys"], [581, 2, 1, "", "values"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "attribute", "Python attribute"]}, "titleterms": {"bibliographi": 0, "libcasm": [1, 3, 56, 233, 268, 313, 344, 394, 411, 584], "mont": [1, 3, 56, 233, 268, 313, 344, 394, 411, 587], "about": 1, "casm": 1, "licens": 1, "document": 1, "instal": 2, "from": [2, 66], "pypi": 2, "sourc": 2, "For": 2, "contributor": 2, "methodlog": 4, "begin_lap": 5, "begin_section_print_alwai": 6, "begin_section_print_if_debug": 7, "begin_section_print_if_quiet": 8, "begin_section_print_if_standard": 9, "begin_section_print_if_verbos": 10, "decrease_ind": 11, "end_sect": 12, "hide_clock": 13, "increase_ind": 14, "indent_str": 15, "lap_tim": 16, "log_frequ": 17, "logfile_path": 18, "paragraph": 19, "paragraph_justif": 20, "paragraph_width": 21, "print": 22, "reset": [23, 297, 369, 429], "restart_clock": 25, "section": 26, "set_debug": 27, "set_indent_spac": 28, "set_initial_indent_spac": 29, "set_paragraph_justif": 30, "set_paragraph_width": 31, "set_quiet": 32, "set_standard": 33, "set_verbos": 34, "show_clock": 35, "time_": 36, "verbatim": 37, "randomnumberengin": 38, "dump": 39, "load": 40, "seed": 41, "seed_seq": 42, "randomnumbergener": 43, "engin": 44, "random_int": 45, "random_r": 46, "valuemap": 47, "boolean_valu": 48, "from_dict": [49, 147, 156, 161, 196, 235, 262, 282, 315, 356, 420, 441, 469, 500], "is_mismatch": 50, "make_incremented_valu": 51, "matrix_valu": 52, "scalar_valu": 53, "to_dict": [54, 152, 159, 164, 202, 245, 264, 285, 301, 325, 359, 373, 408, 416, 422, 458, 463, 478, 483, 492, 496, 503], "vector_valu": 55, "event": 56, "atom": [57, 172], "n_jump": 58, "translat": 59, "atomloc": 60, "linear_site_index": [61, 138, 167, 210], "mol_comp": 62, "mol_id": [63, 191, 211], "atomtraj": 64, "delta_ijk": 65, "atomtrajvector": 68, "append": [69, 75, 119, 127, 141, 214, 523], "clear": [70, 76, 120, 128, 142, 215, 524], "extend": [71, 77, 122, 130, 143, 216], "insert": [72, 78, 123, 131, 144, 217], "pop": [73, 79, 124, 132, 145, 218], "atomvector": 74, "convers": 80, "asym_s": 81, "asym_to_b": 82, "asym_to_unitl": 83, "bijk_to_asym": 84, "bijk_to_l": 85, "bijk_to_unitl": 86, "l_size": 87, "l_to_asym": 88, "l_to_b": 89, "l_to_basis_cart": 90, "l_to_basis_frac": 91, "l_to_bijk": 92, "l_to_cart": 93, "l_to_frac": 94, "l_to_ijk": 95, "l_to_unitl": 96, "lat_column_mat": 97, "make_with_custom_asym": 98, "make_with_custom_unitcel": 99, "occ_siz": 100, "occ_to_species_index": 101, "site_index_convert": 102, "species_allow": 103, "species_index_to_atoms_s": 104, "species_index_to_nam": 105, "species_index_to_occup": 106, "species_name_to_index": 107, "species_s": 108, "species_to_occ_index": 109, "transformation_matrix_to_sup": 110, "unit_site_index_convert": 111, "unit_transformation_matrix_to_sup": 112, "unitcell_index_convert": 113, "unitl_s": 114, "unitl_to_asym": 115, "unitl_to_b": 116, "unitl_to_bijk": 117, "intvector": 118, "count": [121, 129, 447], "remov": [125, 133], "longvector": 126, "mol": [134, 190], "asymmetric_unit_index": [135, 155], "component_id": 136, "id": 137, "mol_location_index": 139, "molvector": 140, "multioccswap": 146, "revers": [148, 198], "sort": [149, 150, 200, 201], "swap": 151, "total_count": 153, "occcandid": 154, "is_valid": [157, 197], "species_index": 158, "occcandidatelist": 160, "index": 162, "matching_index": 163, "occev": 165, "atom_traj": 166, "new_occ": 168, "occ_transform": 169, "occloc": 170, "appli": [171, 303, 375], "atom_positions_cart": 173, "atom_positions_cart_within": 174, "atom_s": 175, "cand_siz": 176, "cand_size_by_candidate_index": 177, "candidate_list": 178, "choose_mol": 179, "choose_mol_by_candidate_index": 180, "convert": 181, "current_atom_n_jump": 182, "current_atom_nam": 183, "current_atom_position_index": 184, "current_atom_species_index": 185, "initial_atom_position_index": 186, "initial_atom_species_index": 187, "initi": 188, "linear_site_index_to_mol_id": 189, "mol_id_by_candidate_index": 192, "mol_siz": 193, "occswap": 194, "first": 195, "second": 199, "occswapcountmap": 203, "item": [204, 465, 485, 507, 541, 562, 579], "kei": [205, 466, 486, 508, 542, 563, 580], "valu": [206, 467, 487, 509, 515, 521, 535, 543, 564, 581], "occtransform": 207, "asym": 208, "from_speci": 209, "to_speci": 212, "occtransformvector": 213, "choose_canonical_swap": 219, "choose_semigrand_canonical_multiswap": 220, "choose_semigrand_canonical_swap": 221, "is_allowed_canonical_swap": 222, "make_canonical_swap": 223, "make_multiswap": 224, "make_semigrand_canonical_swap": 225, "propose_canonical_ev": 226, "propose_canonical_event_from_swap": 227, "propose_semigrand_canonical_ev": 228, "propose_semigrand_canonical_event_from_multiswap": 229, "propose_semigrand_canonical_event_from_swap": 230, "propose_semigrand_canonical_multiswap_ev": 231, "swaps_allowed_per_unitcel": 232, "ising_cpp": [233, 268], "isingconfigur": [234, 314], "from_linear_site_index": [236, 316], "n_site": [237, 317], "n_unitcel": [238, 318], "n_variable_sit": [239, 319], "occ": [240, 320], "occup": [241, 321], "set_occ": [242, 322], "set_occup": [243, 323], "shape": [244, 324, 534, 560], "to_linear_site_index": [246, 326], "within": [247, 327], "isingformationenergi": [248, 328], "occ_delta_per_supercel": [249, 255, 307, 331, 338, 383], "per_supercel": [250, 256, 309, 332, 339, 385], "per_unitcel": [251, 257, 310, 333, 340, 386], "set_stat": [252, 258, 305, 311, 334, 341, 378, 387], "isingparamcomposit": [253, 336], "n_independent_composit": [254, 337], "isingst": [259, 342], "condit": [260, 270, 346, 381], "configur": 261, "properti": 263, "isingsystem": [265, 343], "formation_energy_calcul": [266, 274, 348, 382], "param_composition_calcul": [267, 275, 349, 384], "semigrand_canon": [268, 344], "semigrandcanonicalcalcul": [269, 345], "data": [271, 347], "default_json_sampling_funct": 272, "default_sampling_funct": 273, "potenti": [276, 350], "run": [277, 351], "state": [278, 335, 352, 379, 388], "system": [279, 353, 389], "semigrandcanonicalcondit": [280, 354], "exchange_potenti": [281, 355], "from_valu": [283, 357], "temperatur": [284, 358], "to_valu": [286, 360], "semigrandcanonicaldata": [287, 361], "acceptance_r": [288, 362, 396], "completion_check": [289, 363, 397], "json_sampl": [290, 398], "json_sampling_funct": [291, 399], "n_accept": [292, 364, 400], "n_pass": [293, 365, 401], "n_reject": [294, 366, 402], "n_steps_per_pass": [295, 367, 403], "rejection_r": [296, 368, 404], "sample_weight": [298, 370, 405], "sampler": [299, 371, 406, 522], "sampling_funct": [300, 372, 407], "semigrandcanonicaleventgener": [302, 374], "propos": [304, 377], "semigrandcanonicalpotenti": [306, 380], "occ_event_delta_per_supercel": 308, "default_write_statu": [312, 390], "ising_pi": [313, 344], "j": 329, "lattice_typ": 330, "occ_ev": 376, "make_formation_energy_f": 391, "make_param_composition_f": 392, "make_potential_energy_f": 393, "method": 394, "basicoccupationmetropolisdata": 395, "basic_occupation_metropoli": 409, "metropolis_accept": 410, "sampl": [411, 529], "basicstatist": 412, "calculated_precis": 413, "mean": 414, "relative_precis": 415, "basicstatisticscalcul": 417, "calcul": [418, 586, 587], "confid": 419, "n_resampl": 421, "weighted_observations_method": 423, "completioncheck": 424, "check": [425, 586], "count_and_time_check": 426, "count_check": 427, "param": [428, 455], "result": 430, "time_check": 431, "completioncheckparam": 432, "calc_statistics_f": 433, "check_bas": 434, "check_begin": 435, "check_period": 436, "check_period_max": 437, "check_shift": 438, "cutoff_param": 439, "equilibration_check_f": 440, "log_spac": 442, "requested_precis": [443, 490], "completioncheckresult": 444, "clocktim": 445, "convergence_check_result": 446, "equilibration_check_result": 448, "full_reset": 449, "has_all_minimums_met": 450, "has_any_maximum_met": 451, "is_complet": 452, "n_sampl": [453, 528], "n_samples_at_convergence_check": 454, "partial_reset": 456, "time": 457, "convergencecheckresult": 459, "n_samples_for_statist": 460, "all_converg": 461, "individual_result": [462, 482], "convergenceresultmap": 464, "cutoffcheckparam": 468, "max_clocktim": 470, "max_count": 471, "max_sampl": 472, "max_tim": 473, "min_clocktim": 474, "min_count": 475, "min_sampl": 476, "min_tim": 477, "equilibrationcheckresult": 479, "n_samples_for_all_to_equilibr": 480, "all_equilibr": 481, "equilibrationresultmap": 484, "individualconvergenceresult": 488, "is_converg": 489, "stat": 491, "individualequilibrationresult": 493, "n_samples_for_equilibr": 494, "is_equilibr": 495, "requestedprecis": 497, "abs_convergence_is_requir": 498, "abs_precis": 499, "rel_convergence_is_requir": 501, "rel_precis": 502, "requestedprecisionconstructor": 504, "set_precis": 505, "requestedprecisionmap": 506, "sample_method": [510, 550], "custom": 511, "linear": 512, "log": 513, "name": [514, 520, 559, 577], "sample_mod": [516, 551], "by_pass": 517, "by_step": 518, "by_tim": 519, "compon": 525, "component_nam": [526, 538, 556], "n_compon": 527, "sample_capac": 530, "set_capacity_incr": 531, "set_sample_capac": 532, "set_valu": 533, "samplercompon": 536, "component_index": 537, "sampler_nam": [539, 552], "samplermap": 540, "samplingparam": 544, "base": 545, "begin": 546, "do_sample_tim": 547, "do_sample_trajectori": 548, "period": 549, "shift": 553, "stochastic_sample_period": 554, "statesamplingfunct": 555, "descript": [557, 575], "function": [558, 576], "statesamplingfunctionmap": 561, "all_minimums_met": 565, "any_maximum_met": 566, "colmajor_component_nam": 567, "component_convergence_check": 568, "converg": 569, "convergence_check": 570, "default_component_nam": 571, "default_equilibration_check": 572, "get_n_sampl": 573, "jsonstatesamplingfunct": 574, "jsonstatesamplingfunctionmap": 578, "matrix_as_vector": 582, "scalar_as_vector": 583, "refer": 584, "usag": 585, "complet": 586, "perform": 586, "exampl": 586, "equilibr": 586, "precis": 586, "overview": 587, "carlo": 587, "model": 587, "reset_to_stdout": 24}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinxcontrib.bibtex": 9, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"Bibliography": [[0, "bibliography"]], "libcasm-monte": [[1, "libcasm-monte"]], "About CASM": [[1, "about-casm"]], "License": [[1, "license"]], "Documentation": [[1, "documentation"]], "Installation": [[2, "installation"]], "Install from PyPI": [[2, "install-from-pypi"]], "Install from source": [[2, "install-from-source"]], "For contributors": [[2, "for-contributors"]], "Reference (libcasm)": [[584, "reference-libcasm"]], "Usage": [[585, "usage"]], "Completion Checks": [[586, "completion-checks"]], "Performing completion checks": [[586, "performing-completion-checks"]], "Examples": [[586, "examples"]], "Equilibration check": [[586, "equilibration-check"]], "Calculated precision": [[586, "calculated-precision"]], "Overview": [[587, "overview"]], "Monte Carlo models": [[587, "monte-carlo-models"]], "Monte Carlo calculators": [[587, "monte-carlo-calculators"]], "libcasm.monte": [[3, "module-libcasm.monte"]], "MethodLog": [[4, "methodlog"]], "begin_lap": [[5, "begin-lap"]], "begin_section_print_always": [[6, "begin-section-print-always"]], "begin_section_print_if_debug": [[7, "begin-section-print-if-debug"]], "begin_section_print_if_quiet": [[8, "begin-section-print-if-quiet"]], "begin_section_print_if_standard": [[9, "begin-section-print-if-standard"]], "begin_section_print_if_verbose": [[10, "begin-section-print-if-verbose"]], "decrease_indent": [[11, "decrease-indent"]], "end_section": [[12, "end-section"]], "hide_clock": [[13, "hide-clock"]], "increase_indent": [[14, "increase-indent"]], "indent_str": [[15, "indent-str"]], "lap_time": [[16, "lap-time"]], "log_frequency": [[17, "log-frequency"]], "logfile_path": [[18, "logfile-path"]], "paragraph": [[19, "paragraph"]], "paragraph_justification": [[20, "paragraph-justification"]], "paragraph_width": [[21, "paragraph-width"]], "print": [[22, "print"]], "reset": [[23, "reset"], [297, "reset"], [369, "reset"], [429, "reset"]], "reset_to_stdout": [[24, "reset-to-stdout"]], "restart_clock": [[25, "restart-clock"]], "section": [[26, "section"]], "set_debug": [[27, "set-debug"]], "set_indent_space": [[28, "set-indent-space"]], "set_initial_indent_space": [[29, "set-initial-indent-space"]], "set_paragraph_justification": [[30, "set-paragraph-justification"]], "set_paragraph_width": [[31, "set-paragraph-width"]], "set_quiet": [[32, "set-quiet"]], "set_standard": [[33, "set-standard"]], "set_verbose": [[34, "set-verbose"]], "show_clock": [[35, "show-clock"]], "time_s": [[36, "time-s"]], "verbatim": [[37, "verbatim"]], "RandomNumberEngine": [[38, "randomnumberengine"]], "dump": [[39, "dump"]], "load": [[40, "load"]], "seed": [[41, "seed"]], "seed_seq": [[42, "seed-seq"]], "RandomNumberGenerator": [[43, "randomnumbergenerator"]], "engine": [[44, "engine"]], "random_int": [[45, "random-int"]], "random_real": [[46, "random-real"]], "ValueMap": [[47, "valuemap"]], "boolean_values": [[48, "boolean-values"]], "from_dict": [[49, "from-dict"], [147, "from-dict"], [156, "from-dict"], [161, "from-dict"], [196, "from-dict"], [235, "from-dict"], [262, "from-dict"], [282, "from-dict"], [315, "from-dict"], [356, "from-dict"], [420, "from-dict"], [441, "from-dict"], [469, "from-dict"], [500, "from-dict"]], "is_mismatched": [[50, "is-mismatched"]], "make_incremented_values": [[51, "make-incremented-values"]], "matrix_values": [[52, "matrix-values"]], "scalar_values": [[53, "scalar-values"]], "to_dict": [[54, "to-dict"], [152, "to-dict"], [159, "to-dict"], [164, "to-dict"], [202, "to-dict"], [245, "to-dict"], [264, "to-dict"], [285, "to-dict"], [301, "to-dict"], [325, "to-dict"], [359, "to-dict"], [373, "to-dict"], [408, "to-dict"], [416, "to-dict"], [422, "to-dict"], [458, "to-dict"], [463, "to-dict"], [478, "to-dict"], [483, "to-dict"], [492, "to-dict"], [496, "to-dict"], [503, "to-dict"]], "vector_values": [[55, "vector-values"]], "libcasm.monte.events": [[56, "module-libcasm.monte.events"]], "Atom": [[57, "atom"]], "n_jumps": [[58, "n-jumps"]], "translation": [[59, "translation"]], "AtomLocation": [[60, "atomlocation"]], "linear_site_index": [[61, "linear-site-index"], [138, "linear-site-index"], [167, "linear-site-index"], [210, "linear-site-index"]], "mol_comp": [[62, "mol-comp"]], "mol_id": [[63, "mol-id"], [191, "mol-id"], [211, "mol-id"]], "AtomTraj": [[64, "atomtraj"]], "delta_ijk": [[65, "delta-ijk"]], "from": [[66, "from"]], "to": [[67, "to"]], "AtomTrajVector": [[68, "atomtrajvector"]], "append": [[69, "append"], [75, "append"], [119, "append"], [127, "append"], [141, "append"], [214, "append"], [523, "append"]], "clear": [[70, "clear"], [76, "clear"], [120, "clear"], [128, "clear"], [142, "clear"], [215, "clear"], [524, "clear"]], "extend": [[71, "extend"], [77, "extend"], [122, "extend"], [130, "extend"], [143, "extend"], [216, "extend"]], "insert": [[72, "insert"], [78, "insert"], [123, "insert"], [131, "insert"], [144, "insert"], [217, "insert"]], "pop": [[73, "pop"], [79, "pop"], [124, "pop"], [132, "pop"], [145, "pop"], [218, "pop"]], "AtomVector": [[74, "atomvector"]], "Conversions": [[80, "conversions"]], "asym_size": [[81, "asym-size"]], "asym_to_b": [[82, "asym-to-b"]], "asym_to_unitl": [[83, "asym-to-unitl"]], "bijk_to_asym": [[84, "bijk-to-asym"]], "bijk_to_l": [[85, "bijk-to-l"]], "bijk_to_unitl": [[86, "bijk-to-unitl"]], "l_size": [[87, "l-size"]], "l_to_asym": [[88, "l-to-asym"]], "l_to_b": [[89, "l-to-b"]], "l_to_basis_cart": [[90, "l-to-basis-cart"]], "l_to_basis_frac": [[91, "l-to-basis-frac"]], "l_to_bijk": [[92, "l-to-bijk"]], "l_to_cart": [[93, "l-to-cart"]], "l_to_frac": [[94, "l-to-frac"]], "l_to_ijk": [[95, "l-to-ijk"]], "l_to_unitl": [[96, "l-to-unitl"]], "lat_column_mat": [[97, "lat-column-mat"]], "make_with_custom_asym": [[98, "make-with-custom-asym"]], "make_with_custom_unitcell": [[99, "make-with-custom-unitcell"]], "occ_size": [[100, "occ-size"]], "occ_to_species_index": [[101, "occ-to-species-index"]], "site_index_converter": [[102, "site-index-converter"]], "species_allowed": [[103, "species-allowed"]], "species_index_to_atoms_size": [[104, "species-index-to-atoms-size"]], "species_index_to_name": [[105, "species-index-to-name"]], "species_index_to_occupant": [[106, "species-index-to-occupant"]], "species_name_to_index": [[107, "species-name-to-index"]], "species_size": [[108, "species-size"]], "species_to_occ_index": [[109, "species-to-occ-index"]], "transformation_matrix_to_super": [[110, "transformation-matrix-to-super"]], "unit_site_index_converter": [[111, "unit-site-index-converter"]], "unit_transformation_matrix_to_super": [[112, "unit-transformation-matrix-to-super"]], "unitcell_index_converter": [[113, "unitcell-index-converter"]], "unitl_size": [[114, "unitl-size"]], "unitl_to_asym": [[115, "unitl-to-asym"]], "unitl_to_b": [[116, "unitl-to-b"]], "unitl_to_bijk": [[117, "unitl-to-bijk"]], "IntVector": [[118, "intvector"]], "count": [[121, "count"], [129, "count"], [447, "count"]], "remove": [[125, "remove"], [133, "remove"]], "LongVector": [[126, "longvector"]], "Mol": [[134, "mol"]], "asymmetric_unit_index": [[135, "asymmetric-unit-index"], [155, "asymmetric-unit-index"]], "component_id": [[136, "component-id"]], "id": [[137, "id"]], "mol_location_index": [[139, "mol-location-index"]], "MolVector": [[140, "molvector"]], "MultiOccSwap": [[146, "multioccswap"]], "reverse": [[148, "reverse"], [198, "reverse"]], "sort": [[149, "sort"], [200, "sort"]], "sorted": [[150, "sorted"], [201, "sorted"]], "swaps": [[151, "swaps"]], "total_count": [[153, "total-count"]], "OccCandidate": [[154, "occcandidate"]], "is_valid": [[157, "is-valid"], [197, "is-valid"]], "species_index": [[158, "species-index"]], "OccCandidateList": [[160, "occcandidatelist"]], "index": [[162, "index"]], "matching_index": [[163, "matching-index"]], "OccEvent": [[165, "occevent"]], "atom_traj": [[166, "atom-traj"]], "new_occ": [[168, "new-occ"]], "occ_transform": [[169, "occ-transform"]], "OccLocation": [[170, "occlocation"]], "apply": [[171, "apply"], [303, "apply"], [375, "apply"]], "atom": [[172, "atom"]], "atom_positions_cart": [[173, "atom-positions-cart"]], "atom_positions_cart_within": [[174, "atom-positions-cart-within"]], "atom_size": [[175, "atom-size"]], "cand_size": [[176, "cand-size"]], "cand_size_by_candidate_index": [[177, "cand-size-by-candidate-index"]], "candidate_list": [[178, "candidate-list"]], "choose_mol": [[179, "choose-mol"]], "choose_mol_by_candidate_index": [[180, "choose-mol-by-candidate-index"]], "convert": [[181, "convert"]], "current_atom_n_jumps": [[182, "current-atom-n-jumps"]], "current_atom_names": [[183, "current-atom-names"]], "current_atom_position_index": [[184, "current-atom-position-index"]], "current_atom_species_index": [[185, "current-atom-species-index"]], "initial_atom_position_index": [[186, "initial-atom-position-index"]], "initial_atom_species_index": [[187, "initial-atom-species-index"]], "initialize": [[188, "initialize"]], "linear_site_index_to_mol_id": [[189, "linear-site-index-to-mol-id"]], "mol": [[190, "mol"]], "mol_id_by_candidate_index": [[192, "mol-id-by-candidate-index"]], "mol_size": [[193, "mol-size"]], "OccSwap": [[194, "occswap"]], "first": [[195, "first"]], "second": [[199, "second"]], "OccSwapCountMap": [[203, "occswapcountmap"]], "items": [[204, "items"], [465, "items"], [485, "items"], [507, "items"], [541, "items"], [562, "items"], [579, "items"]], "keys": [[205, "keys"], [466, "keys"], [486, "keys"], [508, "keys"], [542, "keys"], [563, "keys"], [580, "keys"]], "values": [[206, "values"], [467, "values"], [487, "values"], [509, "values"], [535, "values"], [543, "values"], [564, "values"], [581, "values"]], "OccTransform": [[207, "occtransform"]], "asym": [[208, "asym"]], "from_species": [[209, "from-species"]], "to_species": [[212, "to-species"]], "OccTransformVector": [[213, "occtransformvector"]], "choose_canonical_swap": [[219, "choose-canonical-swap"]], "choose_semigrand_canonical_multiswap": [[220, "choose-semigrand-canonical-multiswap"]], "choose_semigrand_canonical_swap": [[221, "choose-semigrand-canonical-swap"]], "is_allowed_canonical_swap": [[222, "is-allowed-canonical-swap"]], "make_canonical_swaps": [[223, "make-canonical-swaps"]], "make_multiswaps": [[224, "make-multiswaps"]], "make_semigrand_canonical_swaps": [[225, "make-semigrand-canonical-swaps"]], "propose_canonical_event": [[226, "propose-canonical-event"]], "propose_canonical_event_from_swap": [[227, "propose-canonical-event-from-swap"]], "propose_semigrand_canonical_event": [[228, "propose-semigrand-canonical-event"]], "propose_semigrand_canonical_event_from_multiswap": [[229, "propose-semigrand-canonical-event-from-multiswap"]], "propose_semigrand_canonical_event_from_swap": [[230, "propose-semigrand-canonical-event-from-swap"]], "propose_semigrand_canonical_multiswap_event": [[231, "propose-semigrand-canonical-multiswap-event"]], "swaps_allowed_per_unitcell": [[232, "swaps-allowed-per-unitcell"]], "libcasm.monte.ising_cpp": [[233, "module-libcasm.monte.ising_cpp"]], "IsingConfiguration": [[234, "isingconfiguration"], [314, "isingconfiguration"]], "from_linear_site_index": [[236, "from-linear-site-index"], [316, "from-linear-site-index"]], "n_sites": [[237, "n-sites"], [317, "n-sites"]], "n_unitcells": [[238, "n-unitcells"], [318, "n-unitcells"]], "n_variable_sites": [[239, "n-variable-sites"], [319, "n-variable-sites"]], "occ": [[240, "occ"], [320, "occ"]], "occupation": [[241, "occupation"], [321, "occupation"]], "set_occ": [[242, "set-occ"], [322, "set-occ"]], "set_occupation": [[243, "set-occupation"], [323, "set-occupation"]], "shape": [[244, "shape"], [324, "shape"], [534, "shape"], [560, "shape"]], "to_linear_site_index": [[246, "to-linear-site-index"], [326, "to-linear-site-index"]], "within": [[247, "within"], [327, "within"]], "IsingFormationEnergy": [[248, "isingformationenergy"], [328, "isingformationenergy"]], "occ_delta_per_supercell": [[249, "occ-delta-per-supercell"], [255, "occ-delta-per-supercell"], [307, "occ-delta-per-supercell"], [331, "occ-delta-per-supercell"], [338, "occ-delta-per-supercell"], [383, "occ-delta-per-supercell"]], "per_supercell": [[250, "per-supercell"], [256, "per-supercell"], [309, "per-supercell"], [332, "per-supercell"], [339, "per-supercell"], [385, "per-supercell"]], "per_unitcell": [[251, "per-unitcell"], [257, "per-unitcell"], [310, "per-unitcell"], [333, "per-unitcell"], [340, "per-unitcell"], [386, "per-unitcell"]], "set_state": [[252, "set-state"], [258, "set-state"], [305, "set-state"], [311, "set-state"], [334, "set-state"], [341, "set-state"], [378, "set-state"], [387, "set-state"]], "IsingParamComposition": [[253, "isingparamcomposition"], [336, "isingparamcomposition"]], "n_independent_compositions": [[254, "n-independent-compositions"], [337, "n-independent-compositions"]], "IsingState": [[259, "isingstate"], [342, "isingstate"]], "conditions": [[260, "conditions"], [270, "conditions"], [346, "conditions"], [381, "conditions"]], "configuration": [[261, "configuration"]], "properties": [[263, "properties"]], "IsingSystem": [[265, "isingsystem"], [343, "isingsystem"]], "formation_energy_calculator": [[266, "formation-energy-calculator"], [274, "formation-energy-calculator"], [348, "formation-energy-calculator"], [382, "formation-energy-calculator"]], "param_composition_calculator": [[267, "param-composition-calculator"], [275, "param-composition-calculator"], [349, "param-composition-calculator"], [384, "param-composition-calculator"]], "libcasm.monte.ising_cpp.semigrand_canonical": [[268, "module-libcasm.monte.ising_cpp.semigrand_canonical"]], "SemiGrandCanonicalCalculator": [[269, "semigrandcanonicalcalculator"], [345, "semigrandcanonicalcalculator"]], "data": [[271, "data"], [347, "data"]], "default_json_sampling_functions": [[272, "default-json-sampling-functions"]], "default_sampling_functions": [[273, "default-sampling-functions"]], "potential": [[276, "potential"], [350, "potential"]], "run": [[277, "run"], [351, "run"]], "state": [[278, "state"], [335, "state"], [352, "state"], [379, "state"], [388, "state"]], "system": [[279, "system"], [353, "system"], [389, "system"]], "SemiGrandCanonicalConditions": [[280, "semigrandcanonicalconditions"], [354, "semigrandcanonicalconditions"]], "exchange_potential": [[281, "exchange-potential"], [355, "exchange-potential"]], "from_values": [[283, "from-values"], [357, "from-values"]], "temperature": [[284, "temperature"], [358, "temperature"]], "to_values": [[286, "to-values"], [360, "to-values"]], "SemiGrandCanonicalData": [[287, "semigrandcanonicaldata"], [361, "semigrandcanonicaldata"]], "acceptance_rate": [[288, "acceptance-rate"], [362, "acceptance-rate"], [396, "acceptance-rate"]], "completion_check": [[289, "completion-check"], [363, "completion-check"], [397, "completion-check"]], "json_samplers": [[290, "json-samplers"], [398, "json-samplers"]], "json_sampling_functions": [[291, "json-sampling-functions"], [399, "json-sampling-functions"]], "n_accept": [[292, "n-accept"], [364, "n-accept"], [400, "n-accept"]], "n_pass": [[293, "n-pass"], [365, "n-pass"], [401, "n-pass"]], "n_reject": [[294, "n-reject"], [366, "n-reject"], [402, "n-reject"]], "n_steps_per_pass": [[295, "n-steps-per-pass"], [367, "n-steps-per-pass"], [403, "n-steps-per-pass"]], "rejection_rate": [[296, "rejection-rate"], [368, "rejection-rate"], [404, "rejection-rate"]], "sample_weight": [[298, "sample-weight"], [370, "sample-weight"], [405, "sample-weight"]], "samplers": [[299, "samplers"], [371, "samplers"], [406, "samplers"]], "sampling_functions": [[300, "sampling-functions"], [372, "sampling-functions"], [407, "sampling-functions"]], "SemiGrandCanonicalEventGenerator": [[302, "semigrandcanonicaleventgenerator"], [374, "semigrandcanonicaleventgenerator"]], "propose": [[304, "propose"], [377, "propose"]], "SemiGrandCanonicalPotential": [[306, "semigrandcanonicalpotential"], [380, "semigrandcanonicalpotential"]], "occ_event_delta_per_supercell": [[308, "occ-event-delta-per-supercell"]], "default_write_status": [[312, "default-write-status"], [390, "default-write-status"]], "libcasm.monte.ising_py": [[313, "module-libcasm.monte.ising_py"]], "J": [[329, "j"]], "lattice_type": [[330, "lattice-type"]], "libcasm.monte.ising_py.semigrand_canonical": [[344, "module-libcasm.monte.ising_py.semigrand_canonical"]], "occ_event": [[376, "occ-event"]], "make_formation_energy_f": [[391, "make-formation-energy-f"]], "make_param_composition_f": [[392, "make-param-composition-f"]], "make_potential_energy_f": [[393, "make-potential-energy-f"]], "libcasm.monte.methods": [[394, "module-libcasm.monte.methods"]], "BasicOccupationMetropolisData": [[395, "basicoccupationmetropolisdata"]], "basic_occupation_metropolis": [[409, "basic-occupation-metropolis"]], "metropolis_acceptance": [[410, "metropolis-acceptance"]], "libcasm.monte.sampling": [[411, "module-libcasm.monte.sampling"]], "BasicStatistics": [[412, "basicstatistics"]], "calculated_precision": [[413, "calculated-precision"]], "mean": [[414, "mean"]], "relative_precision": [[415, "relative-precision"]], "BasicStatisticsCalculator": [[417, "basicstatisticscalculator"]], "calculate": [[418, "calculate"]], "confidence": [[419, "confidence"]], "n_resamples": [[421, "n-resamples"]], "weighted_observations_method": [[423, "weighted-observations-method"]], "CompletionCheck": [[424, "completioncheck"]], "check": [[425, "check"]], "count_and_time_check": [[426, "count-and-time-check"]], "count_check": [[427, "count-check"]], "params": [[428, "params"], [455, "params"]], "results": [[430, "results"]], "time_check": [[431, "time-check"]], "CompletionCheckParams": [[432, "completioncheckparams"]], "calc_statistics_f": [[433, "calc-statistics-f"]], "check_base": [[434, "check-base"]], "check_begin": [[435, "check-begin"]], "check_period": [[436, "check-period"]], "check_period_max": [[437, "check-period-max"]], "check_shift": [[438, "check-shift"]], "cutoff_params": [[439, "cutoff-params"]], "equilibration_check_f": [[440, "equilibration-check-f"]], "log_spacing": [[442, "log-spacing"]], "requested_precision": [[443, "requested-precision"], [490, "requested-precision"]], "CompletionCheckResults": [[444, "completioncheckresults"]], "clocktime": [[445, "clocktime"]], "convergence_check_results": [[446, "convergence-check-results"]], "equilibration_check_results": [[448, "equilibration-check-results"]], "full_reset": [[449, "full-reset"]], "has_all_minimums_met": [[450, "has-all-minimums-met"]], "has_any_maximum_met": [[451, "has-any-maximum-met"]], "is_complete": [[452, "is-complete"]], "n_samples": [[453, "n-samples"], [528, "n-samples"]], "n_samples_at_convergence_check": [[454, "n-samples-at-convergence-check"]], "partial_reset": [[456, "partial-reset"]], "time": [[457, "time"]], "ConvergenceCheckResults": [[459, "convergencecheckresults"]], "N_samples_for_statistics": [[460, "n-samples-for-statistics"]], "all_converged": [[461, "all-converged"]], "individual_results": [[462, "individual-results"], [482, "individual-results"]], "ConvergenceResultMap": [[464, "convergenceresultmap"]], "CutoffCheckParams": [[468, "cutoffcheckparams"]], "max_clocktime": [[470, "max-clocktime"]], "max_count": [[471, "max-count"]], "max_sample": [[472, "max-sample"]], "max_time": [[473, "max-time"]], "min_clocktime": [[474, "min-clocktime"]], "min_count": [[475, "min-count"]], "min_sample": [[476, "min-sample"]], "min_time": [[477, "min-time"]], "EquilibrationCheckResults": [[479, "equilibrationcheckresults"]], "N_samples_for_all_to_equilibrate": [[480, "n-samples-for-all-to-equilibrate"]], "all_equilibrated": [[481, "all-equilibrated"]], "EquilibrationResultMap": [[484, "equilibrationresultmap"]], "IndividualConvergenceResult": [[488, "individualconvergenceresult"]], "is_converged": [[489, "is-converged"]], "stats": [[491, "stats"]], "IndividualEquilibrationResult": [[493, "individualequilibrationresult"]], "N_samples_for_equilibration": [[494, "n-samples-for-equilibration"]], "is_equilibrated": [[495, "is-equilibrated"]], "RequestedPrecision": [[497, "requestedprecision"]], "abs_convergence_is_required": [[498, "abs-convergence-is-required"]], "abs_precision": [[499, "abs-precision"]], "rel_convergence_is_required": [[501, "rel-convergence-is-required"]], "rel_precision": [[502, "rel-precision"]], "RequestedPrecisionConstructor": [[504, "requestedprecisionconstructor"]], "set_precision": [[505, "set-precision"]], "RequestedPrecisionMap": [[506, "requestedprecisionmap"]], "SAMPLE_METHOD": [[510, "sample-method"]], "CUSTOM": [[511, "custom"]], "LINEAR": [[512, "linear"]], "LOG": [[513, "log"]], "name": [[514, "name"], [520, "name"], [559, "name"], [577, "name"]], "value": [[515, "value"], [521, "value"]], "SAMPLE_MODE": [[516, "sample-mode"]], "BY_PASS": [[517, "by-pass"]], "BY_STEP": [[518, "by-step"]], "BY_TIME": [[519, "by-time"]], "Sampler": [[522, "sampler"]], "component": [[525, "component"]], "component_names": [[526, "component-names"], [556, "component-names"]], "n_components": [[527, "n-components"]], "sample": [[529, "sample"]], "sample_capacity": [[530, "sample-capacity"]], "set_capacity_increment": [[531, "set-capacity-increment"]], "set_sample_capacity": [[532, "set-sample-capacity"]], "set_values": [[533, "set-values"]], "SamplerComponent": [[536, "samplercomponent"]], "component_index": [[537, "component-index"]], "component_name": [[538, "component-name"]], "sampler_name": [[539, "sampler-name"]], "SamplerMap": [[540, "samplermap"]], "SamplingParams": [[544, "samplingparams"]], "base": [[545, "base"]], "begin": [[546, "begin"]], "do_sample_time": [[547, "do-sample-time"]], "do_sample_trajectory": [[548, "do-sample-trajectory"]], "period": [[549, "period"]], "sample_method": [[550, "sample-method"]], "sample_mode": [[551, "sample-mode"]], "sampler_names": [[552, "sampler-names"]], "shift": [[553, "shift"]], "stochastic_sample_period": [[554, "stochastic-sample-period"]], "StateSamplingFunction": [[555, "statesamplingfunction"]], "description": [[557, "description"], [575, "description"]], "function": [[558, "function"], [576, "function"]], "StateSamplingFunctionMap": [[561, "statesamplingfunctionmap"]], "all_minimums_met": [[565, "all-minimums-met"]], "any_maximum_met": [[566, "any-maximum-met"]], "colmajor_component_names": [[567, "colmajor-component-names"]], "component_convergence_check": [[568, "component-convergence-check"]], "converge": [[569, "converge"]], "convergence_check": [[570, "convergence-check"]], "default_component_names": [[571, "default-component-names"]], "default_equilibration_check": [[572, "default-equilibration-check"]], "get_n_samples": [[573, "get-n-samples"]], "jsonStateSamplingFunction": [[574, "jsonstatesamplingfunction"]], "jsonStateSamplingFunctionMap": [[578, "jsonstatesamplingfunctionmap"]], "matrix_as_vector": [[582, "matrix-as-vector"]], "scalar_as_vector": [[583, "scalar-as-vector"]]}, "indexentries": {"libcasm.monte": [[3, "module-libcasm.monte"]], "module": [[3, "module-libcasm.monte"], [56, "module-libcasm.monte.events"], [233, "module-libcasm.monte.ising_cpp"], [268, "module-libcasm.monte.ising_cpp.semigrand_canonical"], [313, "module-libcasm.monte.ising_py"], [344, "module-libcasm.monte.ising_py.semigrand_canonical"], [394, "module-libcasm.monte.methods"], [411, "module-libcasm.monte.sampling"]], "methodlog (class in libcasm.monte)": [[4, "libcasm.monte.MethodLog"]], "begin_lap() (libcasm.monte.methodlog method)": [[5, "libcasm.monte.MethodLog.begin_lap"]], "begin_section_print_always() (libcasm.monte.methodlog method)": [[6, "libcasm.monte.MethodLog.begin_section_print_always"]], "begin_section_print_if_debug() (libcasm.monte.methodlog method)": [[7, "libcasm.monte.MethodLog.begin_section_print_if_debug"]], "begin_section_print_if_quiet() (libcasm.monte.methodlog method)": [[8, "libcasm.monte.MethodLog.begin_section_print_if_quiet"]], "begin_section_print_if_standard() (libcasm.monte.methodlog method)": [[9, "libcasm.monte.MethodLog.begin_section_print_if_standard"]], "begin_section_print_if_verbose() (libcasm.monte.methodlog method)": [[10, "libcasm.monte.MethodLog.begin_section_print_if_verbose"]], "decrease_indent() (libcasm.monte.methodlog method)": [[11, "libcasm.monte.MethodLog.decrease_indent"]], "end_section() (libcasm.monte.methodlog method)": [[12, "libcasm.monte.MethodLog.end_section"]], "hide_clock() (libcasm.monte.methodlog method)": [[13, "libcasm.monte.MethodLog.hide_clock"]], "increase_indent() (libcasm.monte.methodlog method)": [[14, "libcasm.monte.MethodLog.increase_indent"]], "indent_str() (libcasm.monte.methodlog method)": [[15, "libcasm.monte.MethodLog.indent_str"]], "lap_time() (libcasm.monte.methodlog method)": [[16, "libcasm.monte.MethodLog.lap_time"]], "log_frequency() (libcasm.monte.methodlog method)": [[17, "libcasm.monte.MethodLog.log_frequency"]], "logfile_path() (libcasm.monte.methodlog method)": [[18, "libcasm.monte.MethodLog.logfile_path"]], "paragraph() (libcasm.monte.methodlog method)": [[19, "libcasm.monte.MethodLog.paragraph"]], "paragraph_justification() (libcasm.monte.methodlog method)": [[20, "libcasm.monte.MethodLog.paragraph_justification"]], "paragraph_width() (libcasm.monte.methodlog method)": [[21, "libcasm.monte.MethodLog.paragraph_width"]], "print() (libcasm.monte.methodlog method)": [[22, "libcasm.monte.MethodLog.print"]], "reset() (libcasm.monte.methodlog method)": [[23, "libcasm.monte.MethodLog.reset"]], "reset_to_stdout() (libcasm.monte.methodlog method)": [[24, "libcasm.monte.MethodLog.reset_to_stdout"]], "restart_clock() (libcasm.monte.methodlog method)": [[25, "libcasm.monte.MethodLog.restart_clock"]], "section() (libcasm.monte.methodlog method)": [[26, "libcasm.monte.MethodLog.section"]], "set_debug() (libcasm.monte.methodlog method)": [[27, "libcasm.monte.MethodLog.set_debug"]], "set_indent_space() (libcasm.monte.methodlog method)": [[28, "libcasm.monte.MethodLog.set_indent_space"]], "set_initial_indent_space() (libcasm.monte.methodlog method)": [[29, "libcasm.monte.MethodLog.set_initial_indent_space"]], "set_paragraph_justification() (libcasm.monte.methodlog method)": [[30, "libcasm.monte.MethodLog.set_paragraph_justification"]], "set_paragraph_width() (libcasm.monte.methodlog method)": [[31, "libcasm.monte.MethodLog.set_paragraph_width"]], "set_quiet() (libcasm.monte.methodlog method)": [[32, "libcasm.monte.MethodLog.set_quiet"]], "set_standard() (libcasm.monte.methodlog method)": [[33, "libcasm.monte.MethodLog.set_standard"]], "set_verbose() (libcasm.monte.methodlog method)": [[34, "libcasm.monte.MethodLog.set_verbose"]], "show_clock() (libcasm.monte.methodlog method)": [[35, "libcasm.monte.MethodLog.show_clock"]], "time_s() (libcasm.monte.methodlog method)": [[36, "libcasm.monte.MethodLog.time_s"]], "verbatim() (libcasm.monte.methodlog method)": [[37, "libcasm.monte.MethodLog.verbatim"]], "randomnumberengine (class in libcasm.monte)": [[38, "libcasm.monte.RandomNumberEngine"]], "dump() (libcasm.monte.randomnumberengine method)": [[39, "libcasm.monte.RandomNumberEngine.dump"]], "load() (libcasm.monte.randomnumberengine method)": [[40, "libcasm.monte.RandomNumberEngine.load"]], "seed() (libcasm.monte.randomnumberengine method)": [[41, "libcasm.monte.RandomNumberEngine.seed"]], "seed_seq() (libcasm.monte.randomnumberengine method)": [[42, "libcasm.monte.RandomNumberEngine.seed_seq"]], "randomnumbergenerator (class in libcasm.monte)": [[43, "libcasm.monte.RandomNumberGenerator"]], "engine() (libcasm.monte.randomnumbergenerator method)": [[44, "libcasm.monte.RandomNumberGenerator.engine"]], "random_int() (libcasm.monte.randomnumbergenerator method)": [[45, "libcasm.monte.RandomNumberGenerator.random_int"]], "random_real() (libcasm.monte.randomnumbergenerator method)": [[46, "libcasm.monte.RandomNumberGenerator.random_real"]], "valuemap (class in libcasm.monte)": [[47, "libcasm.monte.ValueMap"]], "boolean_values (libcasm.monte.valuemap property)": [[48, "libcasm.monte.ValueMap.boolean_values"]], "from_dict() (libcasm.monte.valuemap static method)": [[49, "libcasm.monte.ValueMap.from_dict"]], "is_mismatched() (libcasm.monte.valuemap method)": [[50, "libcasm.monte.ValueMap.is_mismatched"]], "make_incremented_values() (libcasm.monte.valuemap method)": [[51, "libcasm.monte.ValueMap.make_incremented_values"]], "matrix_values (libcasm.monte.valuemap property)": [[52, "libcasm.monte.ValueMap.matrix_values"]], "scalar_values (libcasm.monte.valuemap property)": [[53, "libcasm.monte.ValueMap.scalar_values"]], "to_dict() (libcasm.monte.valuemap method)": [[54, "libcasm.monte.ValueMap.to_dict"]], "vector_values (libcasm.monte.valuemap property)": [[55, "libcasm.monte.ValueMap.vector_values"]], "libcasm.monte.events": [[56, "module-libcasm.monte.events"]], "atom (class in libcasm.monte.events)": [[57, "libcasm.monte.events.Atom"]], "n_jumps (libcasm.monte.events.atom property)": [[58, "libcasm.monte.events.Atom.n_jumps"]], "translation (libcasm.monte.events.atom property)": [[59, "libcasm.monte.events.Atom.translation"]], "atomlocation (class in libcasm.monte.events)": [[60, "libcasm.monte.events.AtomLocation"]], "linear_site_index (libcasm.monte.events.atomlocation property)": [[61, "libcasm.monte.events.AtomLocation.linear_site_index"]], "mol_comp (libcasm.monte.events.atomlocation property)": [[62, "libcasm.monte.events.AtomLocation.mol_comp"]], "mol_id (libcasm.monte.events.atomlocation property)": [[63, "libcasm.monte.events.AtomLocation.mol_id"]], "atomtraj (class in libcasm.monte.events)": [[64, "libcasm.monte.events.AtomTraj"]], "delta_ijk (libcasm.monte.events.atomtraj property)": [[65, "libcasm.monte.events.AtomTraj.delta_ijk"]], "from (libcasm.monte.events.atomtraj property)": [[66, "libcasm.monte.events.AtomTraj.from"]], "to (libcasm.monte.events.atomtraj property)": [[67, "libcasm.monte.events.AtomTraj.to"]], "atomtrajvector (class in libcasm.monte.events)": [[68, "libcasm.monte.events.AtomTrajVector"]], "append() (libcasm.monte.events.atomtrajvector method)": [[69, "libcasm.monte.events.AtomTrajVector.append"]], "clear() (libcasm.monte.events.atomtrajvector method)": [[70, "libcasm.monte.events.AtomTrajVector.clear"]], "extend() (libcasm.monte.events.atomtrajvector method)": [[71, "libcasm.monte.events.AtomTrajVector.extend"]], "insert() (libcasm.monte.events.atomtrajvector method)": [[72, "libcasm.monte.events.AtomTrajVector.insert"]], "pop() (libcasm.monte.events.atomtrajvector method)": [[73, "libcasm.monte.events.AtomTrajVector.pop"]], "atomvector (class in libcasm.monte.events)": [[74, "libcasm.monte.events.AtomVector"]], "append() (libcasm.monte.events.atomvector method)": [[75, "libcasm.monte.events.AtomVector.append"]], "clear() (libcasm.monte.events.atomvector method)": [[76, "libcasm.monte.events.AtomVector.clear"]], "extend() (libcasm.monte.events.atomvector method)": [[77, "libcasm.monte.events.AtomVector.extend"]], "insert() (libcasm.monte.events.atomvector method)": [[78, "libcasm.monte.events.AtomVector.insert"]], "pop() (libcasm.monte.events.atomvector method)": [[79, "libcasm.monte.events.AtomVector.pop"]], "conversions (class in libcasm.monte.events)": [[80, "libcasm.monte.events.Conversions"]], "asym_size() (libcasm.monte.events.conversions method)": [[81, "libcasm.monte.events.Conversions.asym_size"]], "asym_to_b() (libcasm.monte.events.conversions method)": [[82, "libcasm.monte.events.Conversions.asym_to_b"]], "asym_to_unitl() (libcasm.monte.events.conversions method)": [[83, "libcasm.monte.events.Conversions.asym_to_unitl"]], "bijk_to_asym() (libcasm.monte.events.conversions method)": [[84, "libcasm.monte.events.Conversions.bijk_to_asym"]], "bijk_to_l() (libcasm.monte.events.conversions method)": [[85, "libcasm.monte.events.Conversions.bijk_to_l"]], "bijk_to_unitl() (libcasm.monte.events.conversions method)": [[86, "libcasm.monte.events.Conversions.bijk_to_unitl"]], "l_size() (libcasm.monte.events.conversions method)": [[87, "libcasm.monte.events.Conversions.l_size"]], "l_to_asym() (libcasm.monte.events.conversions method)": [[88, "libcasm.monte.events.Conversions.l_to_asym"]], "l_to_b() (libcasm.monte.events.conversions method)": [[89, "libcasm.monte.events.Conversions.l_to_b"]], "l_to_basis_cart() (libcasm.monte.events.conversions method)": [[90, "libcasm.monte.events.Conversions.l_to_basis_cart"]], "l_to_basis_frac() (libcasm.monte.events.conversions method)": [[91, "libcasm.monte.events.Conversions.l_to_basis_frac"]], "l_to_bijk() (libcasm.monte.events.conversions method)": [[92, "libcasm.monte.events.Conversions.l_to_bijk"]], "l_to_cart() (libcasm.monte.events.conversions method)": [[93, "libcasm.monte.events.Conversions.l_to_cart"]], "l_to_frac() (libcasm.monte.events.conversions method)": [[94, "libcasm.monte.events.Conversions.l_to_frac"]], "l_to_ijk() (libcasm.monte.events.conversions method)": [[95, "libcasm.monte.events.Conversions.l_to_ijk"]], "l_to_unitl() (libcasm.monte.events.conversions method)": [[96, "libcasm.monte.events.Conversions.l_to_unitl"]], "lat_column_mat() (libcasm.monte.events.conversions method)": [[97, "libcasm.monte.events.Conversions.lat_column_mat"]], "make_with_custom_asym() (libcasm.monte.events.conversions static method)": [[98, "libcasm.monte.events.Conversions.make_with_custom_asym"]], "make_with_custom_unitcell() (libcasm.monte.events.conversions static method)": [[99, "libcasm.monte.events.Conversions.make_with_custom_unitcell"]], "occ_size() (libcasm.monte.events.conversions method)": [[100, "libcasm.monte.events.Conversions.occ_size"]], "occ_to_species_index() (libcasm.monte.events.conversions method)": [[101, "libcasm.monte.events.Conversions.occ_to_species_index"]], "site_index_converter() (libcasm.monte.events.conversions method)": [[102, "libcasm.monte.events.Conversions.site_index_converter"]], "species_allowed() (libcasm.monte.events.conversions method)": [[103, "libcasm.monte.events.Conversions.species_allowed"]], "species_index_to_atoms_size() (libcasm.monte.events.conversions method)": [[104, "libcasm.monte.events.Conversions.species_index_to_atoms_size"]], "species_index_to_name() (libcasm.monte.events.conversions method)": [[105, "libcasm.monte.events.Conversions.species_index_to_name"]], "species_index_to_occupant() (libcasm.monte.events.conversions method)": [[106, "libcasm.monte.events.Conversions.species_index_to_occupant"]], "species_name_to_index() (libcasm.monte.events.conversions method)": [[107, "libcasm.monte.events.Conversions.species_name_to_index"]], "species_size() (libcasm.monte.events.conversions method)": [[108, "libcasm.monte.events.Conversions.species_size"]], "species_to_occ_index() (libcasm.monte.events.conversions method)": [[109, "libcasm.monte.events.Conversions.species_to_occ_index"]], "transformation_matrix_to_super() (libcasm.monte.events.conversions method)": [[110, "libcasm.monte.events.Conversions.transformation_matrix_to_super"]], "unit_site_index_converter() (libcasm.monte.events.conversions method)": [[111, "libcasm.monte.events.Conversions.unit_site_index_converter"]], "unit_transformation_matrix_to_super() (libcasm.monte.events.conversions method)": [[112, "libcasm.monte.events.Conversions.unit_transformation_matrix_to_super"]], "unitcell_index_converter() (libcasm.monte.events.conversions method)": [[113, "libcasm.monte.events.Conversions.unitcell_index_converter"]], "unitl_size() (libcasm.monte.events.conversions method)": [[114, "libcasm.monte.events.Conversions.unitl_size"]], "unitl_to_asym() (libcasm.monte.events.conversions method)": [[115, "libcasm.monte.events.Conversions.unitl_to_asym"]], "unitl_to_b() (libcasm.monte.events.conversions method)": [[116, "libcasm.monte.events.Conversions.unitl_to_b"]], "unitl_to_bijk() (libcasm.monte.events.conversions method)": [[117, "libcasm.monte.events.Conversions.unitl_to_bijk"]], "intvector (class in libcasm.monte.events)": [[118, "libcasm.monte.events.IntVector"]], "append() (libcasm.monte.events.intvector method)": [[119, "libcasm.monte.events.IntVector.append"]], "clear() (libcasm.monte.events.intvector method)": [[120, "libcasm.monte.events.IntVector.clear"]], "count() (libcasm.monte.events.intvector method)": [[121, "libcasm.monte.events.IntVector.count"]], "extend() (libcasm.monte.events.intvector method)": [[122, "libcasm.monte.events.IntVector.extend"]], "insert() (libcasm.monte.events.intvector method)": [[123, "libcasm.monte.events.IntVector.insert"]], "pop() (libcasm.monte.events.intvector method)": [[124, "libcasm.monte.events.IntVector.pop"]], "remove() (libcasm.monte.events.intvector method)": [[125, "libcasm.monte.events.IntVector.remove"]], "longvector (class in libcasm.monte.events)": [[126, "libcasm.monte.events.LongVector"]], "append() (libcasm.monte.events.longvector method)": [[127, "libcasm.monte.events.LongVector.append"]], "clear() (libcasm.monte.events.longvector method)": [[128, "libcasm.monte.events.LongVector.clear"]], "count() (libcasm.monte.events.longvector method)": [[129, "libcasm.monte.events.LongVector.count"]], "extend() (libcasm.monte.events.longvector method)": [[130, "libcasm.monte.events.LongVector.extend"]], "insert() (libcasm.monte.events.longvector method)": [[131, "libcasm.monte.events.LongVector.insert"]], "pop() (libcasm.monte.events.longvector method)": [[132, "libcasm.monte.events.LongVector.pop"]], "remove() (libcasm.monte.events.longvector method)": [[133, "libcasm.monte.events.LongVector.remove"]], "mol (class in libcasm.monte.events)": [[134, "libcasm.monte.events.Mol"]], "asymmetric_unit_index (libcasm.monte.events.mol property)": [[135, "libcasm.monte.events.Mol.asymmetric_unit_index"]], "component_id (libcasm.monte.events.mol property)": [[136, "libcasm.monte.events.Mol.component_id"]], "id (libcasm.monte.events.mol property)": [[137, "libcasm.monte.events.Mol.id"]], "linear_site_index (libcasm.monte.events.mol property)": [[138, "libcasm.monte.events.Mol.linear_site_index"]], "mol_location_index (libcasm.monte.events.mol property)": [[139, "libcasm.monte.events.Mol.mol_location_index"]], "molvector (class in libcasm.monte.events)": [[140, "libcasm.monte.events.MolVector"]], "append() (libcasm.monte.events.molvector method)": [[141, "libcasm.monte.events.MolVector.append"]], "clear() (libcasm.monte.events.molvector method)": [[142, "libcasm.monte.events.MolVector.clear"]], "extend() (libcasm.monte.events.molvector method)": [[143, "libcasm.monte.events.MolVector.extend"]], "insert() (libcasm.monte.events.molvector method)": [[144, "libcasm.monte.events.MolVector.insert"]], "pop() (libcasm.monte.events.molvector method)": [[145, "libcasm.monte.events.MolVector.pop"]], "multioccswap (class in libcasm.monte.events)": [[146, "libcasm.monte.events.MultiOccSwap"]], "from_dict() (libcasm.monte.events.multioccswap static method)": [[147, "libcasm.monte.events.MultiOccSwap.from_dict"]], "reverse() (libcasm.monte.events.multioccswap method)": [[148, "libcasm.monte.events.MultiOccSwap.reverse"]], "sort() (libcasm.monte.events.multioccswap method)": [[149, "libcasm.monte.events.MultiOccSwap.sort"]], "sorted() (libcasm.monte.events.multioccswap method)": [[150, "libcasm.monte.events.MultiOccSwap.sorted"]], "swaps (libcasm.monte.events.multioccswap property)": [[151, "libcasm.monte.events.MultiOccSwap.swaps"]], "to_dict() (libcasm.monte.events.multioccswap method)": [[152, "libcasm.monte.events.MultiOccSwap.to_dict"]], "total_count (libcasm.monte.events.multioccswap property)": [[153, "libcasm.monte.events.MultiOccSwap.total_count"]], "occcandidate (class in libcasm.monte.events)": [[154, "libcasm.monte.events.OccCandidate"]], "asymmetric_unit_index (libcasm.monte.events.occcandidate property)": [[155, "libcasm.monte.events.OccCandidate.asymmetric_unit_index"]], "from_dict() (libcasm.monte.events.occcandidate static method)": [[156, "libcasm.monte.events.OccCandidate.from_dict"]], "is_valid() (libcasm.monte.events.occcandidate method)": [[157, "libcasm.monte.events.OccCandidate.is_valid"]], "species_index (libcasm.monte.events.occcandidate property)": [[158, "libcasm.monte.events.OccCandidate.species_index"]], "to_dict() (libcasm.monte.events.occcandidate method)": [[159, "libcasm.monte.events.OccCandidate.to_dict"]], "occcandidatelist (class in libcasm.monte.events)": [[160, "libcasm.monte.events.OccCandidateList"]], "from_dict() (libcasm.monte.events.occcandidatelist static method)": [[161, "libcasm.monte.events.OccCandidateList.from_dict"]], "index() (libcasm.monte.events.occcandidatelist method)": [[162, "libcasm.monte.events.OccCandidateList.index"]], "matching_index() (libcasm.monte.events.occcandidatelist method)": [[163, "libcasm.monte.events.OccCandidateList.matching_index"]], "to_dict() (libcasm.monte.events.occcandidatelist method)": [[164, "libcasm.monte.events.OccCandidateList.to_dict"]], "occevent (class in libcasm.monte.events)": [[165, "libcasm.monte.events.OccEvent"]], "atom_traj (libcasm.monte.events.occevent property)": [[166, "libcasm.monte.events.OccEvent.atom_traj"]], "linear_site_index (libcasm.monte.events.occevent property)": [[167, "libcasm.monte.events.OccEvent.linear_site_index"]], "new_occ (libcasm.monte.events.occevent property)": [[168, "libcasm.monte.events.OccEvent.new_occ"]], "occ_transform (libcasm.monte.events.occevent property)": [[169, "libcasm.monte.events.OccEvent.occ_transform"]], "occlocation (class in libcasm.monte.events)": [[170, "libcasm.monte.events.OccLocation"]], "apply() (libcasm.monte.events.occlocation method)": [[171, "libcasm.monte.events.OccLocation.apply"]], "atom() (libcasm.monte.events.occlocation method)": [[172, "libcasm.monte.events.OccLocation.atom"]], "atom_positions_cart() (libcasm.monte.events.occlocation method)": [[173, "libcasm.monte.events.OccLocation.atom_positions_cart"]], "atom_positions_cart_within() (libcasm.monte.events.occlocation method)": [[174, "libcasm.monte.events.OccLocation.atom_positions_cart_within"]], "atom_size() (libcasm.monte.events.occlocation method)": [[175, "libcasm.monte.events.OccLocation.atom_size"]], "cand_size() (libcasm.monte.events.occlocation method)": [[176, "libcasm.monte.events.OccLocation.cand_size"]], "cand_size_by_candidate_index() (libcasm.monte.events.occlocation method)": [[177, "libcasm.monte.events.OccLocation.cand_size_by_candidate_index"]], "candidate_list() (libcasm.monte.events.occlocation method)": [[178, "libcasm.monte.events.OccLocation.candidate_list"]], "choose_mol() (libcasm.monte.events.occlocation method)": [[179, "libcasm.monte.events.OccLocation.choose_mol"]], "choose_mol_by_candidate_index() (libcasm.monte.events.occlocation method)": [[180, "libcasm.monte.events.OccLocation.choose_mol_by_candidate_index"]], "convert() (libcasm.monte.events.occlocation method)": [[181, "libcasm.monte.events.OccLocation.convert"]], "current_atom_n_jumps() (libcasm.monte.events.occlocation method)": [[182, "libcasm.monte.events.OccLocation.current_atom_n_jumps"]], "current_atom_names() (libcasm.monte.events.occlocation method)": [[183, "libcasm.monte.events.OccLocation.current_atom_names"]], "current_atom_position_index() (libcasm.monte.events.occlocation method)": [[184, "libcasm.monte.events.OccLocation.current_atom_position_index"]], "current_atom_species_index() (libcasm.monte.events.occlocation method)": [[185, "libcasm.monte.events.OccLocation.current_atom_species_index"]], "initial_atom_position_index() (libcasm.monte.events.occlocation method)": [[186, "libcasm.monte.events.OccLocation.initial_atom_position_index"]], "initial_atom_species_index() (libcasm.monte.events.occlocation method)": [[187, "libcasm.monte.events.OccLocation.initial_atom_species_index"]], "initialize() (libcasm.monte.events.occlocation method)": [[188, "libcasm.monte.events.OccLocation.initialize"]], "linear_site_index_to_mol_id() (libcasm.monte.events.occlocation method)": [[189, "libcasm.monte.events.OccLocation.linear_site_index_to_mol_id"]], "mol() (libcasm.monte.events.occlocation method)": [[190, "libcasm.monte.events.OccLocation.mol"]], "mol_id() (libcasm.monte.events.occlocation method)": [[191, "libcasm.monte.events.OccLocation.mol_id"]], "mol_id_by_candidate_index() (libcasm.monte.events.occlocation method)": [[192, "libcasm.monte.events.OccLocation.mol_id_by_candidate_index"]], "mol_size() (libcasm.monte.events.occlocation method)": [[193, "libcasm.monte.events.OccLocation.mol_size"]], "occswap (class in libcasm.monte.events)": [[194, "libcasm.monte.events.OccSwap"]], "first (libcasm.monte.events.occswap property)": [[195, "libcasm.monte.events.OccSwap.first"]], "from_dict() (libcasm.monte.events.occswap static method)": [[196, "libcasm.monte.events.OccSwap.from_dict"]], "is_valid() (libcasm.monte.events.occswap method)": [[197, "libcasm.monte.events.OccSwap.is_valid"]], "reverse() (libcasm.monte.events.occswap method)": [[198, "libcasm.monte.events.OccSwap.reverse"]], "second (libcasm.monte.events.occswap property)": [[199, "libcasm.monte.events.OccSwap.second"]], "sort() (libcasm.monte.events.occswap method)": [[200, "libcasm.monte.events.OccSwap.sort"]], "sorted() (libcasm.monte.events.occswap method)": [[201, "libcasm.monte.events.OccSwap.sorted"]], "to_dict() (libcasm.monte.events.occswap method)": [[202, "libcasm.monte.events.OccSwap.to_dict"]], "occswapcountmap (class in libcasm.monte.events)": [[203, "libcasm.monte.events.OccSwapCountMap"]], "items() (libcasm.monte.events.occswapcountmap method)": [[204, "libcasm.monte.events.OccSwapCountMap.items"]], "keys() (libcasm.monte.events.occswapcountmap method)": [[205, "libcasm.monte.events.OccSwapCountMap.keys"]], "values() (libcasm.monte.events.occswapcountmap method)": [[206, "libcasm.monte.events.OccSwapCountMap.values"]], "occtransform (class in libcasm.monte.events)": [[207, "libcasm.monte.events.OccTransform"]], "asym (libcasm.monte.events.occtransform property)": [[208, "libcasm.monte.events.OccTransform.asym"]], "from_species (libcasm.monte.events.occtransform property)": [[209, "libcasm.monte.events.OccTransform.from_species"]], "linear_site_index (libcasm.monte.events.occtransform property)": [[210, "libcasm.monte.events.OccTransform.linear_site_index"]], "mol_id (libcasm.monte.events.occtransform property)": [[211, "libcasm.monte.events.OccTransform.mol_id"]], "to_species (libcasm.monte.events.occtransform property)": [[212, "libcasm.monte.events.OccTransform.to_species"]], "occtransformvector (class in libcasm.monte.events)": [[213, "libcasm.monte.events.OccTransformVector"]], "append() (libcasm.monte.events.occtransformvector method)": [[214, "libcasm.monte.events.OccTransformVector.append"]], "clear() (libcasm.monte.events.occtransformvector method)": [[215, "libcasm.monte.events.OccTransformVector.clear"]], "extend() (libcasm.monte.events.occtransformvector method)": [[216, "libcasm.monte.events.OccTransformVector.extend"]], "insert() (libcasm.monte.events.occtransformvector method)": [[217, "libcasm.monte.events.OccTransformVector.insert"]], "pop() (libcasm.monte.events.occtransformvector method)": [[218, "libcasm.monte.events.OccTransformVector.pop"]], "choose_canonical_swap() (in module libcasm.monte.events)": [[219, "libcasm.monte.events.choose_canonical_swap"]], "choose_semigrand_canonical_multiswap() (in module libcasm.monte.events)": [[220, "libcasm.monte.events.choose_semigrand_canonical_multiswap"]], "choose_semigrand_canonical_swap() (in module libcasm.monte.events)": [[221, "libcasm.monte.events.choose_semigrand_canonical_swap"]], "is_allowed_canonical_swap() (in module libcasm.monte.events)": [[222, "libcasm.monte.events.is_allowed_canonical_swap"]], "make_canonical_swaps() (in module libcasm.monte.events)": [[223, "libcasm.monte.events.make_canonical_swaps"]], "make_multiswaps() (in module libcasm.monte.events)": [[224, "libcasm.monte.events.make_multiswaps"]], "make_semigrand_canonical_swaps() (in module libcasm.monte.events)": [[225, "libcasm.monte.events.make_semigrand_canonical_swaps"]], "propose_canonical_event() (in module libcasm.monte.events)": [[226, "libcasm.monte.events.propose_canonical_event"]], "propose_canonical_event_from_swap() (in module libcasm.monte.events)": [[227, "libcasm.monte.events.propose_canonical_event_from_swap"]], "propose_semigrand_canonical_event() (in module libcasm.monte.events)": [[228, "libcasm.monte.events.propose_semigrand_canonical_event"]], "propose_semigrand_canonical_event_from_multiswap() (in module libcasm.monte.events)": [[229, "libcasm.monte.events.propose_semigrand_canonical_event_from_multiswap"]], "propose_semigrand_canonical_event_from_swap() (in module libcasm.monte.events)": [[230, "libcasm.monte.events.propose_semigrand_canonical_event_from_swap"]], "propose_semigrand_canonical_multiswap_event() (in module libcasm.monte.events)": [[231, "libcasm.monte.events.propose_semigrand_canonical_multiswap_event"]], "swaps_allowed_per_unitcell() (in module libcasm.monte.events)": [[232, "libcasm.monte.events.swaps_allowed_per_unitcell"]], "libcasm.monte.ising_cpp": [[233, "module-libcasm.monte.ising_cpp"]], "isingconfiguration (class in libcasm.monte.ising_cpp)": [[234, "libcasm.monte.ising_cpp.IsingConfiguration"]], "from_dict() (libcasm.monte.ising_cpp.isingconfiguration static method)": [[235, "libcasm.monte.ising_cpp.IsingConfiguration.from_dict"]], "from_linear_site_index() (libcasm.monte.ising_cpp.isingconfiguration method)": [[236, "libcasm.monte.ising_cpp.IsingConfiguration.from_linear_site_index"]], "n_sites (libcasm.monte.ising_cpp.isingconfiguration property)": [[237, "libcasm.monte.ising_cpp.IsingConfiguration.n_sites"]], "n_unitcells (libcasm.monte.ising_cpp.isingconfiguration property)": [[238, "libcasm.monte.ising_cpp.IsingConfiguration.n_unitcells"]], "n_variable_sites (libcasm.monte.ising_cpp.isingconfiguration property)": [[239, "libcasm.monte.ising_cpp.IsingConfiguration.n_variable_sites"]], "occ() (libcasm.monte.ising_cpp.isingconfiguration method)": [[240, "libcasm.monte.ising_cpp.IsingConfiguration.occ"]], "occupation() (libcasm.monte.ising_cpp.isingconfiguration method)": [[241, "libcasm.monte.ising_cpp.IsingConfiguration.occupation"]], "set_occ() (libcasm.monte.ising_cpp.isingconfiguration method)": [[242, "libcasm.monte.ising_cpp.IsingConfiguration.set_occ"]], "set_occupation() (libcasm.monte.ising_cpp.isingconfiguration method)": [[243, "libcasm.monte.ising_cpp.IsingConfiguration.set_occupation"]], "shape (libcasm.monte.ising_cpp.isingconfiguration property)": [[244, "libcasm.monte.ising_cpp.IsingConfiguration.shape"]], "to_dict() (libcasm.monte.ising_cpp.isingconfiguration method)": [[245, "libcasm.monte.ising_cpp.IsingConfiguration.to_dict"]], "to_linear_site_index() (libcasm.monte.ising_cpp.isingconfiguration method)": [[246, "libcasm.monte.ising_cpp.IsingConfiguration.to_linear_site_index"]], "within() (libcasm.monte.ising_cpp.isingconfiguration method)": [[247, "libcasm.monte.ising_cpp.IsingConfiguration.within"]], "isingformationenergy (class in libcasm.monte.ising_cpp)": [[248, "libcasm.monte.ising_cpp.IsingFormationEnergy"]], "occ_delta_per_supercell() (libcasm.monte.ising_cpp.isingformationenergy method)": [[249, "libcasm.monte.ising_cpp.IsingFormationEnergy.occ_delta_per_supercell"]], "per_supercell() (libcasm.monte.ising_cpp.isingformationenergy method)": [[250, "libcasm.monte.ising_cpp.IsingFormationEnergy.per_supercell"]], "per_unitcell() (libcasm.monte.ising_cpp.isingformationenergy method)": [[251, "libcasm.monte.ising_cpp.IsingFormationEnergy.per_unitcell"]], "set_state() (libcasm.monte.ising_cpp.isingformationenergy method)": [[252, "libcasm.monte.ising_cpp.IsingFormationEnergy.set_state"]], "isingparamcomposition (class in libcasm.monte.ising_cpp)": [[253, "libcasm.monte.ising_cpp.IsingParamComposition"]], "n_independent_compositions() (libcasm.monte.ising_cpp.isingparamcomposition method)": [[254, "libcasm.monte.ising_cpp.IsingParamComposition.n_independent_compositions"]], "occ_delta_per_supercell() (libcasm.monte.ising_cpp.isingparamcomposition method)": [[255, "libcasm.monte.ising_cpp.IsingParamComposition.occ_delta_per_supercell"]], "per_supercell() (libcasm.monte.ising_cpp.isingparamcomposition method)": [[256, "libcasm.monte.ising_cpp.IsingParamComposition.per_supercell"]], "per_unitcell() (libcasm.monte.ising_cpp.isingparamcomposition method)": [[257, "libcasm.monte.ising_cpp.IsingParamComposition.per_unitcell"]], "set_state() (libcasm.monte.ising_cpp.isingparamcomposition method)": [[258, "libcasm.monte.ising_cpp.IsingParamComposition.set_state"]], "isingstate (class in libcasm.monte.ising_cpp)": [[259, "libcasm.monte.ising_cpp.IsingState"]], "conditions (libcasm.monte.ising_cpp.isingstate property)": [[260, "libcasm.monte.ising_cpp.IsingState.conditions"]], "configuration (libcasm.monte.ising_cpp.isingstate property)": [[261, "libcasm.monte.ising_cpp.IsingState.configuration"]], "from_dict() (libcasm.monte.ising_cpp.isingstate static method)": [[262, "libcasm.monte.ising_cpp.IsingState.from_dict"]], "properties (libcasm.monte.ising_cpp.isingstate property)": [[263, "libcasm.monte.ising_cpp.IsingState.properties"]], "to_dict() (libcasm.monte.ising_cpp.isingstate method)": [[264, "libcasm.monte.ising_cpp.IsingState.to_dict"]], "isingsystem (class in libcasm.monte.ising_cpp)": [[265, "libcasm.monte.ising_cpp.IsingSystem"]], "formation_energy_calculator (libcasm.monte.ising_cpp.isingsystem property)": [[266, "libcasm.monte.ising_cpp.IsingSystem.formation_energy_calculator"]], "param_composition_calculator (libcasm.monte.ising_cpp.isingsystem property)": [[267, "libcasm.monte.ising_cpp.IsingSystem.param_composition_calculator"]], "libcasm.monte.ising_cpp.semigrand_canonical": [[268, "module-libcasm.monte.ising_cpp.semigrand_canonical"]], "semigrandcanonicalcalculator (class in libcasm.monte.ising_cpp.semigrand_canonical)": [[269, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator"]], "conditions (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalcalculator property)": [[270, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.conditions"]], "data (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalcalculator property)": [[271, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.data"]], "default_json_sampling_functions() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalcalculator method)": [[272, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.default_json_sampling_functions"]], "default_sampling_functions() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalcalculator method)": [[273, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.default_sampling_functions"]], "formation_energy_calculator (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalcalculator property)": [[274, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.formation_energy_calculator"]], "param_composition_calculator (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalcalculator property)": [[275, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.param_composition_calculator"]], "potential (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalcalculator property)": [[276, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.potential"]], "run() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalcalculator method)": [[277, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.run"]], "state (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalcalculator property)": [[278, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.state"]], "system (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalcalculator property)": [[279, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.system"]], "semigrandcanonicalconditions (class in libcasm.monte.ising_cpp.semigrand_canonical)": [[280, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions"]], "exchange_potential (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalconditions property)": [[281, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.exchange_potential"]], "from_dict() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalconditions static method)": [[282, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.from_dict"]], "from_values() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalconditions static method)": [[283, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.from_values"]], "temperature (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalconditions property)": [[284, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.temperature"]], "to_dict() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalconditions method)": [[285, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.to_dict"]], "to_values() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalconditions method)": [[286, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.to_values"]], "semigrandcanonicaldata (class in libcasm.monte.ising_cpp.semigrand_canonical)": [[287, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData"]], "acceptance_rate() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaldata method)": [[288, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.acceptance_rate"]], "completion_check (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaldata property)": [[289, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.completion_check"]], "json_samplers (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaldata property)": [[290, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.json_samplers"]], "json_sampling_functions (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaldata property)": [[291, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.json_sampling_functions"]], "n_accept (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaldata property)": [[292, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.n_accept"]], "n_pass (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaldata property)": [[293, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.n_pass"]], "n_reject (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaldata property)": [[294, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.n_reject"]], "n_steps_per_pass (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaldata property)": [[295, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.n_steps_per_pass"]], "rejection_rate() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaldata method)": [[296, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.rejection_rate"]], "reset() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaldata method)": [[297, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.reset"]], "sample_weight (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaldata property)": [[298, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.sample_weight"]], "samplers (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaldata property)": [[299, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.samplers"]], "sampling_functions (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaldata property)": [[300, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.sampling_functions"]], "to_dict() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaldata method)": [[301, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.to_dict"]], "semigrandcanonicaleventgenerator (class in libcasm.monte.ising_cpp.semigrand_canonical)": [[302, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalEventGenerator"]], "apply() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaleventgenerator method)": [[303, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalEventGenerator.apply"]], "propose() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaleventgenerator method)": [[304, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalEventGenerator.propose"]], "set_state() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaleventgenerator method)": [[305, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalEventGenerator.set_state"]], "semigrandcanonicalpotential (class in libcasm.monte.ising_cpp.semigrand_canonical)": [[306, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential"]], "occ_delta_per_supercell() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalpotential method)": [[307, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential.occ_delta_per_supercell"]], "occ_event_delta_per_supercell() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalpotential method)": [[308, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential.occ_event_delta_per_supercell"]], "per_supercell() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalpotential method)": [[309, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential.per_supercell"]], "per_unitcell() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalpotential method)": [[310, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential.per_unitcell"]], "set_state() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalpotential method)": [[311, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential.set_state"]], "default_write_status() (in module libcasm.monte.ising_cpp.semigrand_canonical)": [[312, "libcasm.monte.ising_cpp.semigrand_canonical.default_write_status"]], "libcasm.monte.ising_py": [[313, "module-libcasm.monte.ising_py"]], "isingconfiguration (class in libcasm.monte.ising_py)": [[314, "libcasm.monte.ising_py.IsingConfiguration"]], "from_dict() (libcasm.monte.ising_py.isingconfiguration static method)": [[315, "libcasm.monte.ising_py.IsingConfiguration.from_dict"]], "from_linear_site_index() (libcasm.monte.ising_py.isingconfiguration method)": [[316, "libcasm.monte.ising_py.IsingConfiguration.from_linear_site_index"]], "n_sites (libcasm.monte.ising_py.isingconfiguration attribute)": [[317, "libcasm.monte.ising_py.IsingConfiguration.n_sites"]], "n_unitcells (libcasm.monte.ising_py.isingconfiguration attribute)": [[318, "libcasm.monte.ising_py.IsingConfiguration.n_unitcells"]], "n_variable_sites (libcasm.monte.ising_py.isingconfiguration attribute)": [[319, "libcasm.monte.ising_py.IsingConfiguration.n_variable_sites"]], "occ() (libcasm.monte.ising_py.isingconfiguration method)": [[320, "libcasm.monte.ising_py.IsingConfiguration.occ"]], "occupation() (libcasm.monte.ising_py.isingconfiguration method)": [[321, "libcasm.monte.ising_py.IsingConfiguration.occupation"]], "set_occ() (libcasm.monte.ising_py.isingconfiguration method)": [[322, "libcasm.monte.ising_py.IsingConfiguration.set_occ"]], "set_occupation() (libcasm.monte.ising_py.isingconfiguration method)": [[323, "libcasm.monte.ising_py.IsingConfiguration.set_occupation"]], "shape (libcasm.monte.ising_py.isingconfiguration attribute)": [[324, "libcasm.monte.ising_py.IsingConfiguration.shape"]], "to_dict() (libcasm.monte.ising_py.isingconfiguration method)": [[325, "libcasm.monte.ising_py.IsingConfiguration.to_dict"]], "to_linear_site_index() (libcasm.monte.ising_py.isingconfiguration method)": [[326, "libcasm.monte.ising_py.IsingConfiguration.to_linear_site_index"]], "within() (libcasm.monte.ising_py.isingconfiguration method)": [[327, "libcasm.monte.ising_py.IsingConfiguration.within"]], "isingformationenergy (class in libcasm.monte.ising_py)": [[328, "libcasm.monte.ising_py.IsingFormationEnergy"]], "j (libcasm.monte.ising_py.isingformationenergy attribute)": [[329, "libcasm.monte.ising_py.IsingFormationEnergy.J"]], "lattice_type (libcasm.monte.ising_py.isingformationenergy attribute)": [[330, "libcasm.monte.ising_py.IsingFormationEnergy.lattice_type"]], "occ_delta_per_supercell() (libcasm.monte.ising_py.isingformationenergy method)": [[331, "libcasm.monte.ising_py.IsingFormationEnergy.occ_delta_per_supercell"]], "per_supercell() (libcasm.monte.ising_py.isingformationenergy method)": [[332, "libcasm.monte.ising_py.IsingFormationEnergy.per_supercell"]], "per_unitcell() (libcasm.monte.ising_py.isingformationenergy method)": [[333, "libcasm.monte.ising_py.IsingFormationEnergy.per_unitcell"]], "set_state() (libcasm.monte.ising_py.isingformationenergy method)": [[334, "libcasm.monte.ising_py.IsingFormationEnergy.set_state"]], "state (libcasm.monte.ising_py.isingformationenergy attribute)": [[335, "libcasm.monte.ising_py.IsingFormationEnergy.state"]], "isingparamcomposition (class in libcasm.monte.ising_py)": [[336, "libcasm.monte.ising_py.IsingParamComposition"]], "n_independent_compositions() (libcasm.monte.ising_py.isingparamcomposition method)": [[337, "libcasm.monte.ising_py.IsingParamComposition.n_independent_compositions"]], "occ_delta_per_supercell() (libcasm.monte.ising_py.isingparamcomposition method)": [[338, "libcasm.monte.ising_py.IsingParamComposition.occ_delta_per_supercell"]], "per_supercell() (libcasm.monte.ising_py.isingparamcomposition method)": [[339, "libcasm.monte.ising_py.IsingParamComposition.per_supercell"]], "per_unitcell() (libcasm.monte.ising_py.isingparamcomposition method)": [[340, "libcasm.monte.ising_py.IsingParamComposition.per_unitcell"]], "set_state() (libcasm.monte.ising_py.isingparamcomposition method)": [[341, "libcasm.monte.ising_py.IsingParamComposition.set_state"]], "isingstate (class in libcasm.monte.ising_py)": [[342, "libcasm.monte.ising_py.IsingState"]], "conditions (libcasm.monte.ising_py.isingstate attribute)": [[342, "libcasm.monte.ising_py.IsingState.conditions"]], "configuration (libcasm.monte.ising_py.isingstate attribute)": [[342, "libcasm.monte.ising_py.IsingState.configuration"]], "properties (libcasm.monte.ising_py.isingstate attribute)": [[342, "libcasm.monte.ising_py.IsingState.properties"]], "isingsystem (class in libcasm.monte.ising_py)": [[343, "libcasm.monte.ising_py.IsingSystem"]], "libcasm.monte.ising_py.semigrand_canonical": [[344, "module-libcasm.monte.ising_py.semigrand_canonical"]], "semigrandcanonicalcalculator (class in libcasm.monte.ising_py.semigrand_canonical)": [[345, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator"]], "conditions (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalcalculator attribute)": [[346, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.conditions"]], "data (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalcalculator attribute)": [[347, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.data"]], "formation_energy_calculator (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalcalculator attribute)": [[348, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.formation_energy_calculator"]], "param_composition_calculator (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalcalculator attribute)": [[349, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.param_composition_calculator"]], "potential (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalcalculator attribute)": [[350, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.potential"]], "run() (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalcalculator method)": [[351, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.run"]], "state (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalcalculator attribute)": [[352, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.state"]], "system (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalcalculator attribute)": [[353, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.system"]], "semigrandcanonicalconditions (class in libcasm.monte.ising_py.semigrand_canonical)": [[354, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions"]], "exchange_potential (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalconditions attribute)": [[355, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.exchange_potential"]], "from_dict() (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalconditions static method)": [[356, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.from_dict"]], "from_values() (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalconditions static method)": [[357, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.from_values"]], "temperature (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalconditions attribute)": [[358, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.temperature"]], "to_dict() (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalconditions static method)": [[359, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.to_dict"]], "to_values() (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalconditions method)": [[360, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.to_values"]], "semigrandcanonicaldata (class in libcasm.monte.ising_py.semigrand_canonical)": [[361, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData"]], "acceptance_rate() (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaldata method)": [[362, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.acceptance_rate"]], "completion_check (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaldata attribute)": [[363, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.completion_check"]], "n_accept (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaldata attribute)": [[364, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.n_accept"]], "n_pass (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaldata attribute)": [[365, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.n_pass"]], "n_reject (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaldata attribute)": [[366, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.n_reject"]], "n_steps_per_pass (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaldata attribute)": [[367, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.n_steps_per_pass"]], "rejection_rate() (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaldata method)": [[368, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.rejection_rate"]], "reset() (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaldata method)": [[369, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.reset"]], "sample_weight (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaldata attribute)": [[370, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.sample_weight"]], "samplers (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaldata attribute)": [[371, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.samplers"]], "sampling_functions (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaldata attribute)": [[372, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.sampling_functions"]], "to_dict() (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaldata method)": [[373, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.to_dict"]], "semigrandcanonicaleventgenerator (class in libcasm.monte.ising_py.semigrand_canonical)": [[374, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator"]], "apply() (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaleventgenerator method)": [[375, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator.apply"]], "occ_event (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaleventgenerator attribute)": [[376, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator.occ_event"]], "propose() (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaleventgenerator method)": [[377, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator.propose"]], "set_state() (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaleventgenerator method)": [[378, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator.set_state"]], "state (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaleventgenerator attribute)": [[379, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator.state"]], "semigrandcanonicalpotential (class in libcasm.monte.ising_py.semigrand_canonical)": [[380, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential"]], "conditions (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalpotential attribute)": [[381, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.conditions"]], "formation_energy_calculator (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalpotential attribute)": [[382, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.formation_energy_calculator"]], "occ_delta_per_supercell() (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalpotential method)": [[383, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.occ_delta_per_supercell"]], "param_composition_calculator (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalpotential attribute)": [[384, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.param_composition_calculator"]], "per_supercell() (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalpotential method)": [[385, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.per_supercell"]], "per_unitcell() (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalpotential method)": [[386, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.per_unitcell"]], "set_state() (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalpotential method)": [[387, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.set_state"]], "state (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalpotential attribute)": [[388, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.state"]], "system (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalpotential attribute)": [[389, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.system"]], "default_write_status() (in module libcasm.monte.ising_py.semigrand_canonical)": [[390, "libcasm.monte.ising_py.semigrand_canonical.default_write_status"]], "make_formation_energy_f() (in module libcasm.monte.ising_py.semigrand_canonical)": [[391, "libcasm.monte.ising_py.semigrand_canonical.make_formation_energy_f"]], "make_param_composition_f() (in module libcasm.monte.ising_py.semigrand_canonical)": [[392, "libcasm.monte.ising_py.semigrand_canonical.make_param_composition_f"]], "make_potential_energy_f() (in module libcasm.monte.ising_py.semigrand_canonical)": [[393, "libcasm.monte.ising_py.semigrand_canonical.make_potential_energy_f"]], "libcasm.monte.methods": [[394, "module-libcasm.monte.methods"]], "basicoccupationmetropolisdata (class in libcasm.monte.methods)": [[395, "libcasm.monte.methods.BasicOccupationMetropolisData"]], "acceptance_rate() (libcasm.monte.methods.basicoccupationmetropolisdata method)": [[396, "libcasm.monte.methods.BasicOccupationMetropolisData.acceptance_rate"]], "completion_check (libcasm.monte.methods.basicoccupationmetropolisdata property)": [[397, "libcasm.monte.methods.BasicOccupationMetropolisData.completion_check"]], "json_samplers (libcasm.monte.methods.basicoccupationmetropolisdata property)": [[398, "libcasm.monte.methods.BasicOccupationMetropolisData.json_samplers"]], "json_sampling_functions (libcasm.monte.methods.basicoccupationmetropolisdata property)": [[399, "libcasm.monte.methods.BasicOccupationMetropolisData.json_sampling_functions"]], "n_accept (libcasm.monte.methods.basicoccupationmetropolisdata property)": [[400, "libcasm.monte.methods.BasicOccupationMetropolisData.n_accept"]], "n_pass (libcasm.monte.methods.basicoccupationmetropolisdata property)": [[401, "libcasm.monte.methods.BasicOccupationMetropolisData.n_pass"]], "n_reject (libcasm.monte.methods.basicoccupationmetropolisdata property)": [[402, "libcasm.monte.methods.BasicOccupationMetropolisData.n_reject"]], "n_steps_per_pass (libcasm.monte.methods.basicoccupationmetropolisdata property)": [[403, "libcasm.monte.methods.BasicOccupationMetropolisData.n_steps_per_pass"]], "rejection_rate() (libcasm.monte.methods.basicoccupationmetropolisdata method)": [[404, "libcasm.monte.methods.BasicOccupationMetropolisData.rejection_rate"]], "sample_weight (libcasm.monte.methods.basicoccupationmetropolisdata property)": [[405, "libcasm.monte.methods.BasicOccupationMetropolisData.sample_weight"]], "samplers (libcasm.monte.methods.basicoccupationmetropolisdata property)": [[406, "libcasm.monte.methods.BasicOccupationMetropolisData.samplers"]], "sampling_functions (libcasm.monte.methods.basicoccupationmetropolisdata property)": [[407, "libcasm.monte.methods.BasicOccupationMetropolisData.sampling_functions"]], "to_dict() (libcasm.monte.methods.basicoccupationmetropolisdata method)": [[408, "libcasm.monte.methods.BasicOccupationMetropolisData.to_dict"]], "basic_occupation_metropolis() (in module libcasm.monte.methods)": [[409, "libcasm.monte.methods.basic_occupation_metropolis"]], "metropolis_acceptance() (in module libcasm.monte.methods)": [[410, "libcasm.monte.methods.metropolis_acceptance"]], "libcasm.monte.sampling": [[411, "module-libcasm.monte.sampling"]], "basicstatistics (class in libcasm.monte.sampling)": [[412, "libcasm.monte.sampling.BasicStatistics"]], "calculated_precision (libcasm.monte.sampling.basicstatistics property)": [[413, "libcasm.monte.sampling.BasicStatistics.calculated_precision"]], "mean (libcasm.monte.sampling.basicstatistics property)": [[414, "libcasm.monte.sampling.BasicStatistics.mean"]], "relative_precision() (libcasm.monte.sampling.basicstatistics method)": [[415, "libcasm.monte.sampling.BasicStatistics.relative_precision"]], "to_dict() (libcasm.monte.sampling.basicstatistics method)": [[416, "libcasm.monte.sampling.BasicStatistics.to_dict"]], "basicstatisticscalculator (class in libcasm.monte.sampling)": [[417, "libcasm.monte.sampling.BasicStatisticsCalculator"]], "calculate() (libcasm.monte.sampling.basicstatisticscalculator method)": [[418, "libcasm.monte.sampling.BasicStatisticsCalculator.calculate"]], "confidence (libcasm.monte.sampling.basicstatisticscalculator property)": [[419, "libcasm.monte.sampling.BasicStatisticsCalculator.confidence"]], "from_dict() (libcasm.monte.sampling.basicstatisticscalculator static method)": [[420, "libcasm.monte.sampling.BasicStatisticsCalculator.from_dict"]], "n_resamples (libcasm.monte.sampling.basicstatisticscalculator property)": [[421, "libcasm.monte.sampling.BasicStatisticsCalculator.n_resamples"]], "to_dict() (libcasm.monte.sampling.basicstatisticscalculator method)": [[422, "libcasm.monte.sampling.BasicStatisticsCalculator.to_dict"]], "weighted_observations_method (libcasm.monte.sampling.basicstatisticscalculator property)": [[423, "libcasm.monte.sampling.BasicStatisticsCalculator.weighted_observations_method"]], "completioncheck (class in libcasm.monte.sampling)": [[424, "libcasm.monte.sampling.CompletionCheck"]], "check() (libcasm.monte.sampling.completioncheck method)": [[425, "libcasm.monte.sampling.CompletionCheck.check"]], "count_and_time_check() (libcasm.monte.sampling.completioncheck method)": [[426, "libcasm.monte.sampling.CompletionCheck.count_and_time_check"]], "count_check() (libcasm.monte.sampling.completioncheck method)": [[427, "libcasm.monte.sampling.CompletionCheck.count_check"]], "params() (libcasm.monte.sampling.completioncheck method)": [[428, "libcasm.monte.sampling.CompletionCheck.params"]], "reset() (libcasm.monte.sampling.completioncheck method)": [[429, "libcasm.monte.sampling.CompletionCheck.reset"]], "results() (libcasm.monte.sampling.completioncheck method)": [[430, "libcasm.monte.sampling.CompletionCheck.results"]], "time_check() (libcasm.monte.sampling.completioncheck method)": [[431, "libcasm.monte.sampling.CompletionCheck.time_check"]], "completioncheckparams (class in libcasm.monte.sampling)": [[432, "libcasm.monte.sampling.CompletionCheckParams"]], "calc_statistics_f (libcasm.monte.sampling.completioncheckparams property)": [[433, "libcasm.monte.sampling.CompletionCheckParams.calc_statistics_f"]], "check_base (libcasm.monte.sampling.completioncheckparams property)": [[434, "libcasm.monte.sampling.CompletionCheckParams.check_base"]], "check_begin (libcasm.monte.sampling.completioncheckparams property)": [[435, "libcasm.monte.sampling.CompletionCheckParams.check_begin"]], "check_period (libcasm.monte.sampling.completioncheckparams property)": [[436, "libcasm.monte.sampling.CompletionCheckParams.check_period"]], "check_period_max (libcasm.monte.sampling.completioncheckparams property)": [[437, "libcasm.monte.sampling.CompletionCheckParams.check_period_max"]], "check_shift (libcasm.monte.sampling.completioncheckparams property)": [[438, "libcasm.monte.sampling.CompletionCheckParams.check_shift"]], "cutoff_params (libcasm.monte.sampling.completioncheckparams property)": [[439, "libcasm.monte.sampling.CompletionCheckParams.cutoff_params"]], "equilibration_check_f (libcasm.monte.sampling.completioncheckparams property)": [[440, "libcasm.monte.sampling.CompletionCheckParams.equilibration_check_f"]], "from_dict() (libcasm.monte.sampling.completioncheckparams static method)": [[441, "libcasm.monte.sampling.CompletionCheckParams.from_dict"]], "log_spacing (libcasm.monte.sampling.completioncheckparams property)": [[442, "libcasm.monte.sampling.CompletionCheckParams.log_spacing"]], "requested_precision (libcasm.monte.sampling.completioncheckparams property)": [[443, "libcasm.monte.sampling.CompletionCheckParams.requested_precision"]], "completioncheckresults (class in libcasm.monte.sampling)": [[444, "libcasm.monte.sampling.CompletionCheckResults"]], "clocktime (libcasm.monte.sampling.completioncheckresults property)": [[445, "libcasm.monte.sampling.CompletionCheckResults.clocktime"]], "convergence_check_results (libcasm.monte.sampling.completioncheckresults property)": [[446, "libcasm.monte.sampling.CompletionCheckResults.convergence_check_results"]], "count (libcasm.monte.sampling.completioncheckresults property)": [[447, "libcasm.monte.sampling.CompletionCheckResults.count"]], "equilibration_check_results (libcasm.monte.sampling.completioncheckresults property)": [[448, "libcasm.monte.sampling.CompletionCheckResults.equilibration_check_results"]], "full_reset() (libcasm.monte.sampling.completioncheckresults method)": [[449, "libcasm.monte.sampling.CompletionCheckResults.full_reset"]], "has_all_minimums_met (libcasm.monte.sampling.completioncheckresults property)": [[450, "libcasm.monte.sampling.CompletionCheckResults.has_all_minimums_met"]], "has_any_maximum_met (libcasm.monte.sampling.completioncheckresults property)": [[451, "libcasm.monte.sampling.CompletionCheckResults.has_any_maximum_met"]], "is_complete (libcasm.monte.sampling.completioncheckresults property)": [[452, "libcasm.monte.sampling.CompletionCheckResults.is_complete"]], "n_samples (libcasm.monte.sampling.completioncheckresults property)": [[453, "libcasm.monte.sampling.CompletionCheckResults.n_samples"]], "n_samples_at_convergence_check (libcasm.monte.sampling.completioncheckresults property)": [[454, "libcasm.monte.sampling.CompletionCheckResults.n_samples_at_convergence_check"]], "params (libcasm.monte.sampling.completioncheckresults property)": [[455, "libcasm.monte.sampling.CompletionCheckResults.params"]], "partial_reset() (libcasm.monte.sampling.completioncheckresults method)": [[456, "libcasm.monte.sampling.CompletionCheckResults.partial_reset"]], "time (libcasm.monte.sampling.completioncheckresults property)": [[457, "libcasm.monte.sampling.CompletionCheckResults.time"]], "to_dict() (libcasm.monte.sampling.completioncheckresults method)": [[458, "libcasm.monte.sampling.CompletionCheckResults.to_dict"]], "convergencecheckresults (class in libcasm.monte.sampling)": [[459, "libcasm.monte.sampling.ConvergenceCheckResults"]], "n_samples_for_statistics (libcasm.monte.sampling.convergencecheckresults property)": [[460, "libcasm.monte.sampling.ConvergenceCheckResults.N_samples_for_statistics"]], "all_converged (libcasm.monte.sampling.convergencecheckresults property)": [[461, "libcasm.monte.sampling.ConvergenceCheckResults.all_converged"]], "individual_results (libcasm.monte.sampling.convergencecheckresults property)": [[462, "libcasm.monte.sampling.ConvergenceCheckResults.individual_results"]], "to_dict() (libcasm.monte.sampling.convergencecheckresults method)": [[463, "libcasm.monte.sampling.ConvergenceCheckResults.to_dict"]], "convergenceresultmap (class in libcasm.monte.sampling)": [[464, "libcasm.monte.sampling.ConvergenceResultMap"]], "items() (libcasm.monte.sampling.convergenceresultmap method)": [[465, "libcasm.monte.sampling.ConvergenceResultMap.items"]], "keys() (libcasm.monte.sampling.convergenceresultmap method)": [[466, "libcasm.monte.sampling.ConvergenceResultMap.keys"]], "values() (libcasm.monte.sampling.convergenceresultmap method)": [[467, "libcasm.monte.sampling.ConvergenceResultMap.values"]], "cutoffcheckparams (class in libcasm.monte.sampling)": [[468, "libcasm.monte.sampling.CutoffCheckParams"]], "from_dict() (libcasm.monte.sampling.cutoffcheckparams static method)": [[469, "libcasm.monte.sampling.CutoffCheckParams.from_dict"]], "max_clocktime (libcasm.monte.sampling.cutoffcheckparams property)": [[470, "libcasm.monte.sampling.CutoffCheckParams.max_clocktime"]], "max_count (libcasm.monte.sampling.cutoffcheckparams property)": [[471, "libcasm.monte.sampling.CutoffCheckParams.max_count"]], "max_sample (libcasm.monte.sampling.cutoffcheckparams property)": [[472, "libcasm.monte.sampling.CutoffCheckParams.max_sample"]], "max_time (libcasm.monte.sampling.cutoffcheckparams property)": [[473, "libcasm.monte.sampling.CutoffCheckParams.max_time"]], "min_clocktime (libcasm.monte.sampling.cutoffcheckparams property)": [[474, "libcasm.monte.sampling.CutoffCheckParams.min_clocktime"]], "min_count (libcasm.monte.sampling.cutoffcheckparams property)": [[475, "libcasm.monte.sampling.CutoffCheckParams.min_count"]], "min_sample (libcasm.monte.sampling.cutoffcheckparams property)": [[476, "libcasm.monte.sampling.CutoffCheckParams.min_sample"]], "min_time (libcasm.monte.sampling.cutoffcheckparams property)": [[477, "libcasm.monte.sampling.CutoffCheckParams.min_time"]], "to_dict() (libcasm.monte.sampling.cutoffcheckparams method)": [[478, "libcasm.monte.sampling.CutoffCheckParams.to_dict"]], "equilibrationcheckresults (class in libcasm.monte.sampling)": [[479, "libcasm.monte.sampling.EquilibrationCheckResults"]], "n_samples_for_all_to_equilibrate (libcasm.monte.sampling.equilibrationcheckresults property)": [[480, "libcasm.monte.sampling.EquilibrationCheckResults.N_samples_for_all_to_equilibrate"]], "all_equilibrated (libcasm.monte.sampling.equilibrationcheckresults property)": [[481, "libcasm.monte.sampling.EquilibrationCheckResults.all_equilibrated"]], "individual_results (libcasm.monte.sampling.equilibrationcheckresults property)": [[482, "libcasm.monte.sampling.EquilibrationCheckResults.individual_results"]], "to_dict() (libcasm.monte.sampling.equilibrationcheckresults method)": [[483, "libcasm.monte.sampling.EquilibrationCheckResults.to_dict"]], "equilibrationresultmap (class in libcasm.monte.sampling)": [[484, "libcasm.monte.sampling.EquilibrationResultMap"]], "items() (libcasm.monte.sampling.equilibrationresultmap method)": [[485, "libcasm.monte.sampling.EquilibrationResultMap.items"]], "keys() (libcasm.monte.sampling.equilibrationresultmap method)": [[486, "libcasm.monte.sampling.EquilibrationResultMap.keys"]], "values() (libcasm.monte.sampling.equilibrationresultmap method)": [[487, "libcasm.monte.sampling.EquilibrationResultMap.values"]], "individualconvergenceresult (class in libcasm.monte.sampling)": [[488, "libcasm.monte.sampling.IndividualConvergenceResult"]], "is_converged (libcasm.monte.sampling.individualconvergenceresult property)": [[489, "libcasm.monte.sampling.IndividualConvergenceResult.is_converged"]], "requested_precision (libcasm.monte.sampling.individualconvergenceresult property)": [[490, "libcasm.monte.sampling.IndividualConvergenceResult.requested_precision"]], "stats (libcasm.monte.sampling.individualconvergenceresult property)": [[491, "libcasm.monte.sampling.IndividualConvergenceResult.stats"]], "to_dict() (libcasm.monte.sampling.individualconvergenceresult method)": [[492, "libcasm.monte.sampling.IndividualConvergenceResult.to_dict"]], "individualequilibrationresult (class in libcasm.monte.sampling)": [[493, "libcasm.monte.sampling.IndividualEquilibrationResult"]], "n_samples_for_equilibration (libcasm.monte.sampling.individualequilibrationresult property)": [[494, "libcasm.monte.sampling.IndividualEquilibrationResult.N_samples_for_equilibration"]], "is_equilibrated (libcasm.monte.sampling.individualequilibrationresult property)": [[495, "libcasm.monte.sampling.IndividualEquilibrationResult.is_equilibrated"]], "to_dict() (libcasm.monte.sampling.individualequilibrationresult method)": [[496, "libcasm.monte.sampling.IndividualEquilibrationResult.to_dict"]], "requestedprecision (class in libcasm.monte.sampling)": [[497, "libcasm.monte.sampling.RequestedPrecision"]], "abs_convergence_is_required (libcasm.monte.sampling.requestedprecision property)": [[498, "libcasm.monte.sampling.RequestedPrecision.abs_convergence_is_required"]], "abs_precision (libcasm.monte.sampling.requestedprecision property)": [[499, "libcasm.monte.sampling.RequestedPrecision.abs_precision"]], "from_dict() (libcasm.monte.sampling.requestedprecision static method)": [[500, "libcasm.monte.sampling.RequestedPrecision.from_dict"]], "rel_convergence_is_required (libcasm.monte.sampling.requestedprecision property)": [[501, "libcasm.monte.sampling.RequestedPrecision.rel_convergence_is_required"]], "rel_precision (libcasm.monte.sampling.requestedprecision property)": [[502, "libcasm.monte.sampling.RequestedPrecision.rel_precision"]], "to_dict() (libcasm.monte.sampling.requestedprecision method)": [[503, "libcasm.monte.sampling.RequestedPrecision.to_dict"]], "requestedprecisionconstructor (class in libcasm.monte.sampling)": [[504, "libcasm.monte.sampling.RequestedPrecisionConstructor"]], "set_precision() (libcasm.monte.sampling.requestedprecisionconstructor method)": [[505, "libcasm.monte.sampling.RequestedPrecisionConstructor.set_precision"]], "requestedprecisionmap (class in libcasm.monte.sampling)": [[506, "libcasm.monte.sampling.RequestedPrecisionMap"]], "items() (libcasm.monte.sampling.requestedprecisionmap method)": [[507, "libcasm.monte.sampling.RequestedPrecisionMap.items"]], "keys() (libcasm.monte.sampling.requestedprecisionmap method)": [[508, "libcasm.monte.sampling.RequestedPrecisionMap.keys"]], "values() (libcasm.monte.sampling.requestedprecisionmap method)": [[509, "libcasm.monte.sampling.RequestedPrecisionMap.values"]], "sample_method (class in libcasm.monte.sampling)": [[510, "libcasm.monte.sampling.SAMPLE_METHOD"]], "custom (libcasm.monte.sampling.sample_method attribute)": [[511, "libcasm.monte.sampling.SAMPLE_METHOD.CUSTOM"]], "linear (libcasm.monte.sampling.sample_method attribute)": [[512, "libcasm.monte.sampling.SAMPLE_METHOD.LINEAR"]], "log (libcasm.monte.sampling.sample_method attribute)": [[513, "libcasm.monte.sampling.SAMPLE_METHOD.LOG"]], "name (libcasm.monte.sampling.sample_method property)": [[514, "libcasm.monte.sampling.SAMPLE_METHOD.name"]], "value (libcasm.monte.sampling.sample_method property)": [[515, "libcasm.monte.sampling.SAMPLE_METHOD.value"]], "sample_mode (class in libcasm.monte.sampling)": [[516, "libcasm.monte.sampling.SAMPLE_MODE"]], "by_pass (libcasm.monte.sampling.sample_mode attribute)": [[517, "libcasm.monte.sampling.SAMPLE_MODE.BY_PASS"]], "by_step (libcasm.monte.sampling.sample_mode attribute)": [[518, "libcasm.monte.sampling.SAMPLE_MODE.BY_STEP"]], "by_time (libcasm.monte.sampling.sample_mode attribute)": [[519, "libcasm.monte.sampling.SAMPLE_MODE.BY_TIME"]], "name (libcasm.monte.sampling.sample_mode property)": [[520, "libcasm.monte.sampling.SAMPLE_MODE.name"]], "value (libcasm.monte.sampling.sample_mode property)": [[521, "libcasm.monte.sampling.SAMPLE_MODE.value"]], "sampler (class in libcasm.monte.sampling)": [[522, "libcasm.monte.sampling.Sampler"]], "append() (libcasm.monte.sampling.sampler method)": [[523, "libcasm.monte.sampling.Sampler.append"]], "clear() (libcasm.monte.sampling.sampler method)": [[524, "libcasm.monte.sampling.Sampler.clear"]], "component() (libcasm.monte.sampling.sampler method)": [[525, "libcasm.monte.sampling.Sampler.component"]], "component_names() (libcasm.monte.sampling.sampler method)": [[526, "libcasm.monte.sampling.Sampler.component_names"]], "n_components() (libcasm.monte.sampling.sampler method)": [[527, "libcasm.monte.sampling.Sampler.n_components"]], "n_samples() (libcasm.monte.sampling.sampler method)": [[528, "libcasm.monte.sampling.Sampler.n_samples"]], "sample() (libcasm.monte.sampling.sampler method)": [[529, "libcasm.monte.sampling.Sampler.sample"]], "sample_capacity() (libcasm.monte.sampling.sampler method)": [[530, "libcasm.monte.sampling.Sampler.sample_capacity"]], "set_capacity_increment() (libcasm.monte.sampling.sampler method)": [[531, "libcasm.monte.sampling.Sampler.set_capacity_increment"]], "set_sample_capacity() (libcasm.monte.sampling.sampler method)": [[532, "libcasm.monte.sampling.Sampler.set_sample_capacity"]], "set_values() (libcasm.monte.sampling.sampler method)": [[533, "libcasm.monte.sampling.Sampler.set_values"]], "shape() (libcasm.monte.sampling.sampler method)": [[534, "libcasm.monte.sampling.Sampler.shape"]], "values() (libcasm.monte.sampling.sampler method)": [[535, "libcasm.monte.sampling.Sampler.values"]], "samplercomponent (class in libcasm.monte.sampling)": [[536, "libcasm.monte.sampling.SamplerComponent"]], "component_index (libcasm.monte.sampling.samplercomponent property)": [[537, "libcasm.monte.sampling.SamplerComponent.component_index"]], "component_name (libcasm.monte.sampling.samplercomponent property)": [[538, "libcasm.monte.sampling.SamplerComponent.component_name"]], "sampler_name (libcasm.monte.sampling.samplercomponent property)": [[539, "libcasm.monte.sampling.SamplerComponent.sampler_name"]], "samplermap (class in libcasm.monte.sampling)": [[540, "libcasm.monte.sampling.SamplerMap"]], "items() (libcasm.monte.sampling.samplermap method)": [[541, "libcasm.monte.sampling.SamplerMap.items"]], "keys() (libcasm.monte.sampling.samplermap method)": [[542, "libcasm.monte.sampling.SamplerMap.keys"]], "values() (libcasm.monte.sampling.samplermap method)": [[543, "libcasm.monte.sampling.SamplerMap.values"]], "samplingparams (class in libcasm.monte.sampling)": [[544, "libcasm.monte.sampling.SamplingParams"]], "base (libcasm.monte.sampling.samplingparams property)": [[545, "libcasm.monte.sampling.SamplingParams.base"]], "begin (libcasm.monte.sampling.samplingparams property)": [[546, "libcasm.monte.sampling.SamplingParams.begin"]], "do_sample_time (libcasm.monte.sampling.samplingparams property)": [[547, "libcasm.monte.sampling.SamplingParams.do_sample_time"]], "do_sample_trajectory (libcasm.monte.sampling.samplingparams property)": [[548, "libcasm.monte.sampling.SamplingParams.do_sample_trajectory"]], "period (libcasm.monte.sampling.samplingparams property)": [[549, "libcasm.monte.sampling.SamplingParams.period"]], "sample_method (libcasm.monte.sampling.samplingparams property)": [[550, "libcasm.monte.sampling.SamplingParams.sample_method"]], "sample_mode (libcasm.monte.sampling.samplingparams property)": [[551, "libcasm.monte.sampling.SamplingParams.sample_mode"]], "sampler_names (libcasm.monte.sampling.samplingparams property)": [[552, "libcasm.monte.sampling.SamplingParams.sampler_names"]], "shift (libcasm.monte.sampling.samplingparams property)": [[553, "libcasm.monte.sampling.SamplingParams.shift"]], "stochastic_sample_period (libcasm.monte.sampling.samplingparams property)": [[554, "libcasm.monte.sampling.SamplingParams.stochastic_sample_period"]], "statesamplingfunction (class in libcasm.monte.sampling)": [[555, "libcasm.monte.sampling.StateSamplingFunction"]], "component_names (libcasm.monte.sampling.statesamplingfunction property)": [[556, "libcasm.monte.sampling.StateSamplingFunction.component_names"]], "description (libcasm.monte.sampling.statesamplingfunction property)": [[557, "libcasm.monte.sampling.StateSamplingFunction.description"]], "function (libcasm.monte.sampling.statesamplingfunction property)": [[558, "libcasm.monte.sampling.StateSamplingFunction.function"]], "name (libcasm.monte.sampling.statesamplingfunction property)": [[559, "libcasm.monte.sampling.StateSamplingFunction.name"]], "shape (libcasm.monte.sampling.statesamplingfunction property)": [[560, "libcasm.monte.sampling.StateSamplingFunction.shape"]], "statesamplingfunctionmap (class in libcasm.monte.sampling)": [[561, "libcasm.monte.sampling.StateSamplingFunctionMap"]], "items() (libcasm.monte.sampling.statesamplingfunctionmap method)": [[562, "libcasm.monte.sampling.StateSamplingFunctionMap.items"]], "keys() (libcasm.monte.sampling.statesamplingfunctionmap method)": [[563, "libcasm.monte.sampling.StateSamplingFunctionMap.keys"]], "values() (libcasm.monte.sampling.statesamplingfunctionmap method)": [[564, "libcasm.monte.sampling.StateSamplingFunctionMap.values"]], "all_minimums_met() (in module libcasm.monte.sampling)": [[565, "libcasm.monte.sampling.all_minimums_met"]], "any_maximum_met() (in module libcasm.monte.sampling)": [[566, "libcasm.monte.sampling.any_maximum_met"]], "colmajor_component_names() (in module libcasm.monte.sampling)": [[567, "libcasm.monte.sampling.colmajor_component_names"]], "component_convergence_check() (in module libcasm.monte.sampling)": [[568, "libcasm.monte.sampling.component_convergence_check"]], "converge() (in module libcasm.monte.sampling)": [[569, "libcasm.monte.sampling.converge"]], "convergence_check() (in module libcasm.monte.sampling)": [[570, "libcasm.monte.sampling.convergence_check"]], "default_component_names() (in module libcasm.monte.sampling)": [[571, "libcasm.monte.sampling.default_component_names"]], "default_equilibration_check() (in module libcasm.monte.sampling)": [[572, "libcasm.monte.sampling.default_equilibration_check"]], "get_n_samples() (in module libcasm.monte.sampling)": [[573, "libcasm.monte.sampling.get_n_samples"]], "jsonstatesamplingfunction (class in libcasm.monte.sampling)": [[574, "libcasm.monte.sampling.jsonStateSamplingFunction"]], "description (libcasm.monte.sampling.jsonstatesamplingfunction property)": [[575, "libcasm.monte.sampling.jsonStateSamplingFunction.description"]], "function (libcasm.monte.sampling.jsonstatesamplingfunction property)": [[576, "libcasm.monte.sampling.jsonStateSamplingFunction.function"]], "name (libcasm.monte.sampling.jsonstatesamplingfunction property)": [[577, "libcasm.monte.sampling.jsonStateSamplingFunction.name"]], "jsonstatesamplingfunctionmap (class in libcasm.monte.sampling)": [[578, "libcasm.monte.sampling.jsonStateSamplingFunctionMap"]], "items() (libcasm.monte.sampling.jsonstatesamplingfunctionmap method)": [[579, "libcasm.monte.sampling.jsonStateSamplingFunctionMap.items"]], "keys() (libcasm.monte.sampling.jsonstatesamplingfunctionmap method)": [[580, "libcasm.monte.sampling.jsonStateSamplingFunctionMap.keys"]], "values() (libcasm.monte.sampling.jsonstatesamplingfunctionmap method)": [[581, "libcasm.monte.sampling.jsonStateSamplingFunctionMap.values"]], "matrix_as_vector() (in module libcasm.monte.sampling)": [[582, "libcasm.monte.sampling.matrix_as_vector"]], "scalar_as_vector() (in module libcasm.monte.sampling)": [[583, "libcasm.monte.sampling.scalar_as_vector"]]}})