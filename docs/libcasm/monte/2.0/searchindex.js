Search.setIndex({"docnames": ["bibliography", "index", "installation", "reference/libcasm/_autosummary/libcasm.monte", "reference/libcasm/_autosummary/libcasm.monte.MethodLog", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.begin_lap", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.begin_section_print_always", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.begin_section_print_if_debug", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.begin_section_print_if_quiet", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.begin_section_print_if_standard", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.begin_section_print_if_verbose", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.decrease_indent", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.end_section", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.hide_clock", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.increase_indent", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.indent_str", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.lap_time", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.log_frequency", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.logfile_path", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.paragraph", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.paragraph_justification", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.paragraph_width", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.print", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.reset", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.restart_clock", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.section", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.set_debug", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.set_indent_space", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.set_initial_indent_space", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.set_paragraph_justification", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.set_paragraph_width", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.set_quiet", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.set_standard", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.set_verbose", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.show_clock", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.time_s", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.verbatim", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberEngine", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberEngine.dump", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberEngine.load", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberEngine.seed", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberEngine.seed_seq", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberGenerator", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberGenerator.engine", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberGenerator.random_int", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberGenerator.random_real", "reference/libcasm/_autosummary/libcasm.monte.ValueMap", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.boolean_values", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.from_dict", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.is_mismatched", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.make_incremented_values", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.matrix_values", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.scalar_values", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.to_dict", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.vector_values", "reference/libcasm/_autosummary/libcasm.monte.events", "reference/libcasm/_autosummary/libcasm.monte.events.Atom", "reference/libcasm/_autosummary/libcasm.monte.events.Atom.n_jumps", "reference/libcasm/_autosummary/libcasm.monte.events.Atom.translation", "reference/libcasm/_autosummary/libcasm.monte.events.AtomLocation", "reference/libcasm/_autosummary/libcasm.monte.events.AtomLocation.linear_site_index", "reference/libcasm/_autosummary/libcasm.monte.events.AtomLocation.mol_comp", "reference/libcasm/_autosummary/libcasm.monte.events.AtomLocation.mol_id", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTraj", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTraj.delta_ijk", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTraj.from", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTraj.to", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTrajVector", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTrajVector.append", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTrajVector.clear", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTrajVector.extend", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTrajVector.insert", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTrajVector.pop", "reference/libcasm/_autosummary/libcasm.monte.events.AtomVector", "reference/libcasm/_autosummary/libcasm.monte.events.AtomVector.append", "reference/libcasm/_autosummary/libcasm.monte.events.AtomVector.clear", "reference/libcasm/_autosummary/libcasm.monte.events.AtomVector.extend", "reference/libcasm/_autosummary/libcasm.monte.events.AtomVector.insert", "reference/libcasm/_autosummary/libcasm.monte.events.AtomVector.pop", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.asym_size", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.asym_to_b", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.asym_to_unitl", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.bijk_to_asym", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.bijk_to_l", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.bijk_to_unitl", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_size", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_asym", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_b", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_basis_cart", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_basis_frac", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_bijk", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_cart", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_frac", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_ijk", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_unitl", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.lat_column_mat", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.make_with_custom_asym", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.make_with_custom_unitcell", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.occ_size", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.occ_to_species_index", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.site_index_converter", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.species_allowed", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.species_index_to_atoms_size", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.species_index_to_name", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.species_index_to_occupant", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.species_name_to_index", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.species_size", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.species_to_occ_index", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.transformation_matrix_to_super", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.unit_site_index_converter", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.unit_transformation_matrix_to_super", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.unitcell_index_converter", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.unitl_size", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.unitl_to_asym", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.unitl_to_b", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.unitl_to_bijk", "reference/libcasm/_autosummary/libcasm.monte.events.IntVector", "reference/libcasm/_autosummary/libcasm.monte.events.IntVector.append", "reference/libcasm/_autosummary/libcasm.monte.events.IntVector.clear", "reference/libcasm/_autosummary/libcasm.monte.events.IntVector.count", "reference/libcasm/_autosummary/libcasm.monte.events.IntVector.extend", "reference/libcasm/_autosummary/libcasm.monte.events.IntVector.insert", "reference/libcasm/_autosummary/libcasm.monte.events.IntVector.pop", "reference/libcasm/_autosummary/libcasm.monte.events.IntVector.remove", "reference/libcasm/_autosummary/libcasm.monte.events.LongVector", "reference/libcasm/_autosummary/libcasm.monte.events.LongVector.append", "reference/libcasm/_autosummary/libcasm.monte.events.LongVector.clear", "reference/libcasm/_autosummary/libcasm.monte.events.LongVector.count", "reference/libcasm/_autosummary/libcasm.monte.events.LongVector.extend", "reference/libcasm/_autosummary/libcasm.monte.events.LongVector.insert", "reference/libcasm/_autosummary/libcasm.monte.events.LongVector.pop", "reference/libcasm/_autosummary/libcasm.monte.events.LongVector.remove", "reference/libcasm/_autosummary/libcasm.monte.events.Mol", "reference/libcasm/_autosummary/libcasm.monte.events.Mol.asymmetric_unit_index", "reference/libcasm/_autosummary/libcasm.monte.events.Mol.component_id", "reference/libcasm/_autosummary/libcasm.monte.events.Mol.id", "reference/libcasm/_autosummary/libcasm.monte.events.Mol.linear_site_index", "reference/libcasm/_autosummary/libcasm.monte.events.Mol.mol_location_index", "reference/libcasm/_autosummary/libcasm.monte.events.MolVector", "reference/libcasm/_autosummary/libcasm.monte.events.MolVector.append", "reference/libcasm/_autosummary/libcasm.monte.events.MolVector.clear", "reference/libcasm/_autosummary/libcasm.monte.events.MolVector.extend", "reference/libcasm/_autosummary/libcasm.monte.events.MolVector.insert", "reference/libcasm/_autosummary/libcasm.monte.events.MolVector.pop", "reference/libcasm/_autosummary/libcasm.monte.events.MultiOccSwap", "reference/libcasm/_autosummary/libcasm.monte.events.MultiOccSwap.from_dict", "reference/libcasm/_autosummary/libcasm.monte.events.MultiOccSwap.reverse", "reference/libcasm/_autosummary/libcasm.monte.events.MultiOccSwap.sort", "reference/libcasm/_autosummary/libcasm.monte.events.MultiOccSwap.sorted", "reference/libcasm/_autosummary/libcasm.monte.events.MultiOccSwap.swaps", "reference/libcasm/_autosummary/libcasm.monte.events.MultiOccSwap.to_dict", "reference/libcasm/_autosummary/libcasm.monte.events.MultiOccSwap.total_count", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidate", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidate.asymmetric_unit_index", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidate.from_dict", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidate.is_valid", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidate.species_index", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidate.to_dict", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidateList", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidateList.from_dict", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidateList.index", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidateList.matching_index", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidateList.to_dict", "reference/libcasm/_autosummary/libcasm.monte.events.OccEvent", "reference/libcasm/_autosummary/libcasm.monte.events.OccEvent.atom_traj", "reference/libcasm/_autosummary/libcasm.monte.events.OccEvent.linear_site_index", "reference/libcasm/_autosummary/libcasm.monte.events.OccEvent.new_occ", "reference/libcasm/_autosummary/libcasm.monte.events.OccEvent.occ_transform", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.apply", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.atom", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.atom_positions_cart", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.atom_positions_cart_within", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.atom_size", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.cand_size", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.cand_size_by_candidate_index", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.candidate_list", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.choose_mol", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.choose_mol_by_candidate_index", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.convert", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.current_atom_n_jumps", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.current_atom_names", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.current_atom_position_index", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.current_atom_species_index", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.initial_atom_position_index", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.initial_atom_species_index", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.initialize", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.linear_site_index_to_mol_id", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.mol", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.mol_id", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.mol_id_by_candidate_index", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.mol_size", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.first", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.from_dict", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.is_valid", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.reverse", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.second", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.sort", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.sorted", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.to_dict", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwapCountMap", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwapCountMap.items", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwapCountMap.keys", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwapCountMap.values", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransform", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransform.asym", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransform.from_species", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransform.linear_site_index", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransform.mol_id", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransform.to_species", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransformVector", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransformVector.append", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransformVector.clear", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransformVector.extend", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransformVector.insert", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransformVector.pop", "reference/libcasm/_autosummary/libcasm.monte.events.choose_canonical_swap", "reference/libcasm/_autosummary/libcasm.monte.events.choose_semigrand_canonical_multiswap", "reference/libcasm/_autosummary/libcasm.monte.events.choose_semigrand_canonical_swap", "reference/libcasm/_autosummary/libcasm.monte.events.is_allowed_canonical_swap", "reference/libcasm/_autosummary/libcasm.monte.events.make_canonical_swaps", "reference/libcasm/_autosummary/libcasm.monte.events.make_multiswaps", "reference/libcasm/_autosummary/libcasm.monte.events.make_semigrand_canonical_swaps", "reference/libcasm/_autosummary/libcasm.monte.events.propose_canonical_event", "reference/libcasm/_autosummary/libcasm.monte.events.propose_canonical_event_from_swap", "reference/libcasm/_autosummary/libcasm.monte.events.propose_semigrand_canonical_event", "reference/libcasm/_autosummary/libcasm.monte.events.propose_semigrand_canonical_event_from_multiswap", "reference/libcasm/_autosummary/libcasm.monte.events.propose_semigrand_canonical_event_from_swap", "reference/libcasm/_autosummary/libcasm.monte.events.propose_semigrand_canonical_multiswap_event", "reference/libcasm/_autosummary/libcasm.monte.events.swaps_allowed_per_unitcell", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.from_dict", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.from_linear_site_index", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.n_sites", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.n_unitcells", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.n_variable_sites", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.occ", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.occupation", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.set_occ", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.set_occupation", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.shape", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.to_dict", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.to_linear_site_index", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.within", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingFormationEnergy", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingFormationEnergy.occ_delta_per_supercell", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingFormationEnergy.per_supercell", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingFormationEnergy.per_unitcell", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingFormationEnergy.set_state", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingParamComposition", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingParamComposition.n_independent_compositions", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingParamComposition.occ_delta_per_supercell", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingParamComposition.per_supercell", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingParamComposition.per_unitcell", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingParamComposition.set_state", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingState", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingState.conditions", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingState.configuration", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingState.from_dict", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingState.properties", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingState.to_dict", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingSystem", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingSystem.formation_energy_calculator", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingSystem.param_composition_calculator", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.conditions", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.data", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.default_json_sampling_functions", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.default_sampling_functions", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.formation_energy_calculator", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.param_composition_calculator", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.potential", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.run", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.state", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.system", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.exchange_potential", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.from_dict", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.from_values", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.temperature", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.to_dict", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.to_values", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.acceptance_rate", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.completion_check", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.json_samplers", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.json_sampling_functions", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.n_accept", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.n_pass", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.n_reject", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.n_steps_per_pass", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.rejection_rate", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.reset", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.sample_weight", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.samplers", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.sampling_functions", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.to_dict", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalEventGenerator", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalEventGenerator.apply", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalEventGenerator.propose", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalEventGenerator.set_state", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential.occ_delta_per_supercell", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential.occ_event_delta_per_supercell", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential.per_supercell", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential.per_unitcell", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential.set_state", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.default_write_status", "reference/libcasm/_autosummary/libcasm.monte.ising_py", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.from_dict", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.from_linear_site_index", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.n_sites", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.n_unitcells", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.n_variable_sites", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.occ", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.occupation", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.set_occ", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.set_occupation", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.shape", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.to_dict", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.to_linear_site_index", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.within", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingFormationEnergy", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingFormationEnergy.J", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingFormationEnergy.lattice_type", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingFormationEnergy.occ_delta_per_supercell", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingFormationEnergy.per_supercell", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingFormationEnergy.per_unitcell", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingFormationEnergy.set_state", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingFormationEnergy.state", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingParamComposition", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingParamComposition.n_independent_compositions", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingParamComposition.occ_delta_per_supercell", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingParamComposition.per_supercell", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingParamComposition.per_unitcell", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingParamComposition.set_state", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingState", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingSystem", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.conditions", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.data", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.formation_energy_calculator", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.param_composition_calculator", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.potential", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.run", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.state", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.system", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.exchange_potential", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.from_dict", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.from_values", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.temperature", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.to_dict", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.to_values", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.acceptance_rate", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.completion_check", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.n_accept", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.n_pass", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.n_reject", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.n_steps_per_pass", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.rejection_rate", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.reset", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.sample_weight", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.samplers", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.sampling_functions", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.to_dict", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator.apply", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator.occ_event", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator.propose", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator.set_state", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator.state", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.conditions", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.formation_energy_calculator", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.occ_delta_per_supercell", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.param_composition_calculator", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.per_supercell", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.per_unitcell", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.set_state", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.state", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.system", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.default_write_status", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.make_formation_energy_f", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.make_param_composition_f", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.make_potential_energy_f", "reference/libcasm/_autosummary/libcasm.monte.methods", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.acceptance_rate", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.completion_check", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.json_samplers", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.json_sampling_functions", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.n_accept", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.n_pass", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.n_reject", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.n_steps_per_pass", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.rejection_rate", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.sample_weight", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.samplers", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.sampling_functions", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.to_dict", "reference/libcasm/_autosummary/libcasm.monte.methods.basic_occupation_metropolis", "reference/libcasm/_autosummary/libcasm.monte.methods.metropolis_acceptance", "reference/libcasm/_autosummary/libcasm.monte.sampling", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatistics", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatistics.calculated_precision", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatistics.mean", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatistics.relative_precision", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatistics.to_dict", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatisticsCalculator", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatisticsCalculator.calculate", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatisticsCalculator.confidence", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatisticsCalculator.from_dict", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatisticsCalculator.n_resamples", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatisticsCalculator.to_dict", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatisticsCalculator.weighted_observations_method", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheck", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheck.check", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheck.count_and_time_check", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheck.count_check", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheck.params", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheck.reset", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheck.results", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheck.time_check", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.calc_statistics_f", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.check_base", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.check_begin", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.check_period", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.check_period_max", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.check_shift", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.cutoff_params", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.equilibration_check_f", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.from_dict", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.log_spacing", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.requested_precision", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.clocktime", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.convergence_check_results", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.count", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.equilibration_check_results", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.full_reset", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.has_all_minimums_met", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.has_any_maximum_met", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.is_complete", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.n_samples", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.n_samples_at_convergence_check", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.params", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.partial_reset", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.time", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.to_dict", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceCheckResults", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceCheckResults.N_samples_for_statistics", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceCheckResults.all_converged", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceCheckResults.individual_results", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceCheckResults.to_dict", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceResultMap", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceResultMap.items", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceResultMap.keys", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceResultMap.values", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.from_dict", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.max_clocktime", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.max_count", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.max_sample", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.max_time", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.min_clocktime", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.min_count", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.min_sample", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.min_time", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.to_dict", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationCheckResults", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationCheckResults.N_samples_for_all_to_equilibrate", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationCheckResults.all_equilibrated", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationCheckResults.individual_results", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationCheckResults.to_dict", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationResultMap", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationResultMap.items", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationResultMap.keys", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationResultMap.values", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualConvergenceResult", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualConvergenceResult.is_converged", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualConvergenceResult.requested_precision", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualConvergenceResult.stats", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualConvergenceResult.to_dict", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualEquilibrationResult", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualEquilibrationResult.N_samples_for_equilibration", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualEquilibrationResult.is_equilibrated", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualEquilibrationResult.to_dict", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecision", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecision.abs_convergence_is_required", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecision.abs_precision", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecision.from_dict", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecision.rel_convergence_is_required", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecision.rel_precision", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecision.to_dict", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecisionConstructor", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecisionConstructor.set_precision", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecisionMap", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecisionMap.items", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecisionMap.keys", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecisionMap.values", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_METHOD", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_METHOD.CUSTOM", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_METHOD.LINEAR", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_METHOD.LOG", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_METHOD.name", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_METHOD.value", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_MODE", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_MODE.BY_PASS", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_MODE.BY_STEP", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_MODE.BY_TIME", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_MODE.name", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_MODE.value", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.append", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.clear", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.component", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.component_names", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.n_components", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.n_samples", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.sample", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.sample_capacity", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.set_capacity_increment", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.set_sample_capacity", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.set_values", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.shape", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.values", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplerComponent", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplerComponent.component_index", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplerComponent.component_name", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplerComponent.sampler_name", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplerMap", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplerMap.items", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplerMap.keys", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplerMap.values", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.base", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.begin", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.do_sample_time", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.do_sample_trajectory", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.period", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.sample_method", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.sample_mode", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.sampler_names", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.shift", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.stochastic_sample_period", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunction", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunction.component_names", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunction.description", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunction.function", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunction.name", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunction.shape", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunctionMap", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunctionMap.items", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunctionMap.keys", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunctionMap.values", "reference/libcasm/_autosummary/libcasm.monte.sampling.all_minimums_met", "reference/libcasm/_autosummary/libcasm.monte.sampling.any_maximum_met", "reference/libcasm/_autosummary/libcasm.monte.sampling.colmajor_component_names", "reference/libcasm/_autosummary/libcasm.monte.sampling.component_convergence_check", "reference/libcasm/_autosummary/libcasm.monte.sampling.converge", "reference/libcasm/_autosummary/libcasm.monte.sampling.convergence_check", "reference/libcasm/_autosummary/libcasm.monte.sampling.default_component_names", "reference/libcasm/_autosummary/libcasm.monte.sampling.default_equilibration_check", "reference/libcasm/_autosummary/libcasm.monte.sampling.get_n_samples", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonStateSamplingFunction", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonStateSamplingFunction.description", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonStateSamplingFunction.function", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonStateSamplingFunction.name", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonStateSamplingFunctionMap", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonStateSamplingFunctionMap.items", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonStateSamplingFunctionMap.keys", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonStateSamplingFunctionMap.values", "reference/libcasm/_autosummary/libcasm.monte.sampling.matrix_as_vector", "reference/libcasm/_autosummary/libcasm.monte.sampling.scalar_as_vector", "reference/libcasm/index", "usage", "usage/completion_check", "usage/overview"], "filenames": ["bibliography.rst", "index.rst", "installation.rst", "reference/libcasm/_autosummary/libcasm.monte.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.begin_lap.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.begin_section_print_always.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.begin_section_print_if_debug.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.begin_section_print_if_quiet.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.begin_section_print_if_standard.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.begin_section_print_if_verbose.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.decrease_indent.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.end_section.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.hide_clock.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.increase_indent.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.indent_str.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.lap_time.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.log_frequency.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.logfile_path.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.paragraph.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.paragraph_justification.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.paragraph_width.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.print.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.reset.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.restart_clock.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.section.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.set_debug.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.set_indent_space.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.set_initial_indent_space.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.set_paragraph_justification.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.set_paragraph_width.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.set_quiet.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.set_standard.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.set_verbose.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.show_clock.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.time_s.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.verbatim.rst", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberEngine.rst", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberEngine.dump.rst", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberEngine.load.rst", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberEngine.seed.rst", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberEngine.seed_seq.rst", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberGenerator.rst", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberGenerator.engine.rst", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberGenerator.random_int.rst", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberGenerator.random_real.rst", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.rst", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.boolean_values.rst", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.from_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.is_mismatched.rst", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.make_incremented_values.rst", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.matrix_values.rst", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.scalar_values.rst", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.vector_values.rst", "reference/libcasm/_autosummary/libcasm.monte.events.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Atom.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Atom.n_jumps.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Atom.translation.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomLocation.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomLocation.linear_site_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomLocation.mol_comp.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomLocation.mol_id.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTraj.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTraj.delta_ijk.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTraj.from.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTraj.to.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTrajVector.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTrajVector.append.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTrajVector.clear.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTrajVector.extend.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTrajVector.insert.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTrajVector.pop.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomVector.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomVector.append.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomVector.clear.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomVector.extend.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomVector.insert.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomVector.pop.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.asym_size.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.asym_to_b.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.asym_to_unitl.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.bijk_to_asym.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.bijk_to_l.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.bijk_to_unitl.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_size.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_asym.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_b.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_basis_cart.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_basis_frac.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_bijk.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_cart.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_frac.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_ijk.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_unitl.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.lat_column_mat.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.make_with_custom_asym.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.make_with_custom_unitcell.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.occ_size.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.occ_to_species_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.site_index_converter.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.species_allowed.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.species_index_to_atoms_size.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.species_index_to_name.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.species_index_to_occupant.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.species_name_to_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.species_size.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.species_to_occ_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.transformation_matrix_to_super.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.unit_site_index_converter.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.unit_transformation_matrix_to_super.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.unitcell_index_converter.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.unitl_size.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.unitl_to_asym.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.unitl_to_b.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.unitl_to_bijk.rst", "reference/libcasm/_autosummary/libcasm.monte.events.IntVector.rst", "reference/libcasm/_autosummary/libcasm.monte.events.IntVector.append.rst", "reference/libcasm/_autosummary/libcasm.monte.events.IntVector.clear.rst", "reference/libcasm/_autosummary/libcasm.monte.events.IntVector.count.rst", "reference/libcasm/_autosummary/libcasm.monte.events.IntVector.extend.rst", "reference/libcasm/_autosummary/libcasm.monte.events.IntVector.insert.rst", "reference/libcasm/_autosummary/libcasm.monte.events.IntVector.pop.rst", "reference/libcasm/_autosummary/libcasm.monte.events.IntVector.remove.rst", "reference/libcasm/_autosummary/libcasm.monte.events.LongVector.rst", "reference/libcasm/_autosummary/libcasm.monte.events.LongVector.append.rst", "reference/libcasm/_autosummary/libcasm.monte.events.LongVector.clear.rst", "reference/libcasm/_autosummary/libcasm.monte.events.LongVector.count.rst", "reference/libcasm/_autosummary/libcasm.monte.events.LongVector.extend.rst", "reference/libcasm/_autosummary/libcasm.monte.events.LongVector.insert.rst", "reference/libcasm/_autosummary/libcasm.monte.events.LongVector.pop.rst", "reference/libcasm/_autosummary/libcasm.monte.events.LongVector.remove.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Mol.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Mol.asymmetric_unit_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Mol.component_id.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Mol.id.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Mol.linear_site_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Mol.mol_location_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.MolVector.rst", "reference/libcasm/_autosummary/libcasm.monte.events.MolVector.append.rst", "reference/libcasm/_autosummary/libcasm.monte.events.MolVector.clear.rst", "reference/libcasm/_autosummary/libcasm.monte.events.MolVector.extend.rst", "reference/libcasm/_autosummary/libcasm.monte.events.MolVector.insert.rst", "reference/libcasm/_autosummary/libcasm.monte.events.MolVector.pop.rst", "reference/libcasm/_autosummary/libcasm.monte.events.MultiOccSwap.rst", "reference/libcasm/_autosummary/libcasm.monte.events.MultiOccSwap.from_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.events.MultiOccSwap.reverse.rst", "reference/libcasm/_autosummary/libcasm.monte.events.MultiOccSwap.sort.rst", "reference/libcasm/_autosummary/libcasm.monte.events.MultiOccSwap.sorted.rst", "reference/libcasm/_autosummary/libcasm.monte.events.MultiOccSwap.swaps.rst", "reference/libcasm/_autosummary/libcasm.monte.events.MultiOccSwap.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.events.MultiOccSwap.total_count.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidate.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidate.asymmetric_unit_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidate.from_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidate.is_valid.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidate.species_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidate.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidateList.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidateList.from_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidateList.index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidateList.matching_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidateList.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccEvent.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccEvent.atom_traj.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccEvent.linear_site_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccEvent.new_occ.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccEvent.occ_transform.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.apply.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.atom.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.atom_positions_cart.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.atom_positions_cart_within.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.atom_size.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.cand_size.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.cand_size_by_candidate_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.candidate_list.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.choose_mol.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.choose_mol_by_candidate_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.convert.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.current_atom_n_jumps.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.current_atom_names.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.current_atom_position_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.current_atom_species_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.initial_atom_position_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.initial_atom_species_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.initialize.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.linear_site_index_to_mol_id.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.mol.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.mol_id.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.mol_id_by_candidate_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.mol_size.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.first.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.from_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.is_valid.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.reverse.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.second.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.sort.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.sorted.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwapCountMap.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwapCountMap.items.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwapCountMap.keys.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwapCountMap.values.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransform.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransform.asym.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransform.from_species.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransform.linear_site_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransform.mol_id.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransform.to_species.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransformVector.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransformVector.append.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransformVector.clear.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransformVector.extend.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransformVector.insert.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransformVector.pop.rst", "reference/libcasm/_autosummary/libcasm.monte.events.choose_canonical_swap.rst", "reference/libcasm/_autosummary/libcasm.monte.events.choose_semigrand_canonical_multiswap.rst", "reference/libcasm/_autosummary/libcasm.monte.events.choose_semigrand_canonical_swap.rst", "reference/libcasm/_autosummary/libcasm.monte.events.is_allowed_canonical_swap.rst", "reference/libcasm/_autosummary/libcasm.monte.events.make_canonical_swaps.rst", "reference/libcasm/_autosummary/libcasm.monte.events.make_multiswaps.rst", "reference/libcasm/_autosummary/libcasm.monte.events.make_semigrand_canonical_swaps.rst", "reference/libcasm/_autosummary/libcasm.monte.events.propose_canonical_event.rst", "reference/libcasm/_autosummary/libcasm.monte.events.propose_canonical_event_from_swap.rst", "reference/libcasm/_autosummary/libcasm.monte.events.propose_semigrand_canonical_event.rst", "reference/libcasm/_autosummary/libcasm.monte.events.propose_semigrand_canonical_event_from_multiswap.rst", "reference/libcasm/_autosummary/libcasm.monte.events.propose_semigrand_canonical_event_from_swap.rst", "reference/libcasm/_autosummary/libcasm.monte.events.propose_semigrand_canonical_multiswap_event.rst", "reference/libcasm/_autosummary/libcasm.monte.events.swaps_allowed_per_unitcell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.from_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.from_linear_site_index.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.n_sites.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.n_unitcells.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.n_variable_sites.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.occ.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.occupation.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.set_occ.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.set_occupation.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.shape.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.to_linear_site_index.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.within.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingFormationEnergy.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingFormationEnergy.occ_delta_per_supercell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingFormationEnergy.per_supercell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingFormationEnergy.per_unitcell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingFormationEnergy.set_state.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingParamComposition.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingParamComposition.n_independent_compositions.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingParamComposition.occ_delta_per_supercell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingParamComposition.per_supercell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingParamComposition.per_unitcell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingParamComposition.set_state.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingState.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingState.conditions.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingState.configuration.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingState.from_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingState.properties.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingState.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingSystem.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingSystem.formation_energy_calculator.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingSystem.param_composition_calculator.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.conditions.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.data.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.default_json_sampling_functions.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.default_sampling_functions.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.formation_energy_calculator.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.param_composition_calculator.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.potential.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.run.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.state.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.system.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.exchange_potential.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.from_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.from_values.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.temperature.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.to_values.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.acceptance_rate.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.completion_check.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.json_samplers.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.json_sampling_functions.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.n_accept.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.n_pass.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.n_reject.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.n_steps_per_pass.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.rejection_rate.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.reset.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.sample_weight.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.samplers.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.sampling_functions.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalEventGenerator.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalEventGenerator.apply.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalEventGenerator.propose.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalEventGenerator.set_state.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential.occ_delta_per_supercell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential.occ_event_delta_per_supercell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential.per_supercell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential.per_unitcell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential.set_state.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.default_write_status.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.from_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.from_linear_site_index.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.n_sites.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.n_unitcells.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.n_variable_sites.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.occ.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.occupation.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.set_occ.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.set_occupation.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.shape.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.to_linear_site_index.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.within.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingFormationEnergy.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingFormationEnergy.J.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingFormationEnergy.lattice_type.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingFormationEnergy.occ_delta_per_supercell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingFormationEnergy.per_supercell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingFormationEnergy.per_unitcell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingFormationEnergy.set_state.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingFormationEnergy.state.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingParamComposition.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingParamComposition.n_independent_compositions.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingParamComposition.occ_delta_per_supercell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingParamComposition.per_supercell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingParamComposition.per_unitcell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingParamComposition.set_state.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingState.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingSystem.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.conditions.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.data.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.formation_energy_calculator.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.param_composition_calculator.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.potential.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.run.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.state.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.system.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.exchange_potential.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.from_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.from_values.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.temperature.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.to_values.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.acceptance_rate.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.completion_check.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.n_accept.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.n_pass.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.n_reject.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.n_steps_per_pass.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.rejection_rate.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.reset.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.sample_weight.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.samplers.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.sampling_functions.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator.apply.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator.occ_event.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator.propose.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator.set_state.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator.state.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.conditions.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.formation_energy_calculator.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.occ_delta_per_supercell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.param_composition_calculator.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.per_supercell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.per_unitcell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.set_state.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.state.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.system.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.default_write_status.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.make_formation_energy_f.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.make_param_composition_f.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.make_potential_energy_f.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.acceptance_rate.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.completion_check.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.json_samplers.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.json_sampling_functions.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.n_accept.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.n_pass.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.n_reject.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.n_steps_per_pass.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.rejection_rate.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.sample_weight.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.samplers.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.sampling_functions.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.basic_occupation_metropolis.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.metropolis_acceptance.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatistics.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatistics.calculated_precision.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatistics.mean.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatistics.relative_precision.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatistics.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatisticsCalculator.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatisticsCalculator.calculate.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatisticsCalculator.confidence.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatisticsCalculator.from_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatisticsCalculator.n_resamples.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatisticsCalculator.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatisticsCalculator.weighted_observations_method.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheck.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheck.check.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheck.count_and_time_check.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheck.count_check.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheck.params.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheck.reset.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheck.results.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheck.time_check.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.calc_statistics_f.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.check_base.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.check_begin.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.check_period.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.check_period_max.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.check_shift.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.cutoff_params.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.equilibration_check_f.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.from_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.log_spacing.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.requested_precision.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.clocktime.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.convergence_check_results.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.count.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.equilibration_check_results.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.full_reset.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.has_all_minimums_met.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.has_any_maximum_met.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.is_complete.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.n_samples.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.n_samples_at_convergence_check.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.params.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.partial_reset.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.time.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceCheckResults.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceCheckResults.N_samples_for_statistics.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceCheckResults.all_converged.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceCheckResults.individual_results.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceCheckResults.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceResultMap.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceResultMap.items.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceResultMap.keys.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceResultMap.values.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.from_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.max_clocktime.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.max_count.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.max_sample.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.max_time.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.min_clocktime.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.min_count.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.min_sample.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.min_time.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationCheckResults.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationCheckResults.N_samples_for_all_to_equilibrate.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationCheckResults.all_equilibrated.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationCheckResults.individual_results.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationCheckResults.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationResultMap.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationResultMap.items.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationResultMap.keys.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationResultMap.values.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualConvergenceResult.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualConvergenceResult.is_converged.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualConvergenceResult.requested_precision.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualConvergenceResult.stats.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualConvergenceResult.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualEquilibrationResult.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualEquilibrationResult.N_samples_for_equilibration.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualEquilibrationResult.is_equilibrated.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualEquilibrationResult.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecision.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecision.abs_convergence_is_required.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecision.abs_precision.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecision.from_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecision.rel_convergence_is_required.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecision.rel_precision.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecision.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecisionConstructor.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecisionConstructor.set_precision.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecisionMap.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecisionMap.items.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecisionMap.keys.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecisionMap.values.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_METHOD.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_METHOD.CUSTOM.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_METHOD.LINEAR.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_METHOD.LOG.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_METHOD.name.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_METHOD.value.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_MODE.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_MODE.BY_PASS.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_MODE.BY_STEP.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_MODE.BY_TIME.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_MODE.name.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_MODE.value.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.append.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.clear.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.component.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.component_names.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.n_components.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.n_samples.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.sample.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.sample_capacity.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.set_capacity_increment.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.set_sample_capacity.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.set_values.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.shape.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.values.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplerComponent.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplerComponent.component_index.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplerComponent.component_name.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplerComponent.sampler_name.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplerMap.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplerMap.items.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplerMap.keys.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplerMap.values.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.base.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.begin.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.do_sample_time.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.do_sample_trajectory.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.period.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.sample_method.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.sample_mode.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.sampler_names.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.shift.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.stochastic_sample_period.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunction.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunction.component_names.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunction.description.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunction.function.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunction.name.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunction.shape.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunctionMap.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunctionMap.items.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunctionMap.keys.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunctionMap.values.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.all_minimums_met.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.any_maximum_met.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.colmajor_component_names.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.component_convergence_check.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.converge.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.convergence_check.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.default_component_names.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.default_equilibration_check.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.get_n_samples.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonStateSamplingFunction.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonStateSamplingFunction.description.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonStateSamplingFunction.function.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonStateSamplingFunction.name.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonStateSamplingFunctionMap.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonStateSamplingFunctionMap.items.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonStateSamplingFunctionMap.keys.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonStateSamplingFunctionMap.values.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.matrix_as_vector.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.scalar_as_vector.rst", "reference/libcasm/index.rst", "usage.rst", "usage/completion_check.rst", "usage/overview.rst"], "titles": ["Bibliography", "libcasm-monte", "Installation", "libcasm.monte", "MethodLog", "begin_lap", "begin_section_print_always", "begin_section_print_if_debug", "begin_section_print_if_quiet", "begin_section_print_if_standard", "begin_section_print_if_verbose", "decrease_indent", "end_section", "hide_clock", "increase_indent", "indent_str", "lap_time", "log_frequency", "logfile_path", "paragraph", "paragraph_justification", "paragraph_width", "print", "reset", "restart_clock", "section", "set_debug", "set_indent_space", "set_initial_indent_space", "set_paragraph_justification", "set_paragraph_width", "set_quiet", "set_standard", "set_verbose", "show_clock", "time_s", "verbatim", "RandomNumberEngine", "dump", "load", "seed", "seed_seq", "RandomNumberGenerator", "engine", "random_int", "random_real", "ValueMap", "boolean_values", "from_dict", "is_mismatched", "make_incremented_values", "matrix_values", "scalar_values", "to_dict", "vector_values", "libcasm.monte.events", "Atom", "n_jumps", "translation", "AtomLocation", "linear_site_index", "mol_comp", "mol_id", "AtomTraj", "delta_ijk", "from", "to", "AtomTrajVector", "append", "clear", "extend", "insert", "pop", "AtomVector", "append", "clear", "extend", "insert", "pop", "Conversions", "asym_size", "asym_to_b", "asym_to_unitl", "bijk_to_asym", "bijk_to_l", "bijk_to_unitl", "l_size", "l_to_asym", "l_to_b", "l_to_basis_cart", "l_to_basis_frac", "l_to_bijk", "l_to_cart", "l_to_frac", "l_to_ijk", "l_to_unitl", "lat_column_mat", "make_with_custom_asym", "make_with_custom_unitcell", "occ_size", "occ_to_species_index", "site_index_converter", "species_allowed", "species_index_to_atoms_size", "species_index_to_name", "species_index_to_occupant", "species_name_to_index", "species_size", "species_to_occ_index", "transformation_matrix_to_super", "unit_site_index_converter", "unit_transformation_matrix_to_super", "unitcell_index_converter", "unitl_size", "unitl_to_asym", "unitl_to_b", "unitl_to_bijk", "IntVector", "append", "clear", "count", "extend", "insert", "pop", "remove", "LongVector", "append", "clear", "count", "extend", "insert", "pop", "remove", "Mol", "asymmetric_unit_index", "component_id", "id", "linear_site_index", "mol_location_index", "MolVector", "append", "clear", "extend", "insert", "pop", "MultiOccSwap", "from_dict", "reverse", "sort", "sorted", "swaps", "to_dict", "total_count", "OccCandidate", "asymmetric_unit_index", "from_dict", "is_valid", "species_index", "to_dict", "OccCandidateList", "from_dict", "index", "matching_index", "to_dict", "OccEvent", "atom_traj", "linear_site_index", "new_occ", "occ_transform", "OccLocation", "apply", "atom", "atom_positions_cart", "atom_positions_cart_within", "atom_size", "cand_size", "cand_size_by_candidate_index", "candidate_list", "choose_mol", "choose_mol_by_candidate_index", "convert", "current_atom_n_jumps", "current_atom_names", "current_atom_position_index", "current_atom_species_index", "initial_atom_position_index", "initial_atom_species_index", "initialize", "linear_site_index_to_mol_id", "mol", "mol_id", "mol_id_by_candidate_index", "mol_size", "OccSwap", "first", "from_dict", "is_valid", "reverse", "second", "sort", "sorted", "to_dict", "OccSwapCountMap", "items", "keys", "values", "OccTransform", "asym", "from_species", "linear_site_index", "mol_id", "to_species", "OccTransformVector", "append", "clear", "extend", "insert", "pop", "choose_canonical_swap", "choose_semigrand_canonical_multiswap", "choose_semigrand_canonical_swap", "is_allowed_canonical_swap", "make_canonical_swaps", "make_multiswaps", "make_semigrand_canonical_swaps", "propose_canonical_event", "propose_canonical_event_from_swap", "propose_semigrand_canonical_event", "propose_semigrand_canonical_event_from_multiswap", "propose_semigrand_canonical_event_from_swap", "propose_semigrand_canonical_multiswap_event", "swaps_allowed_per_unitcell", "libcasm.monte.ising_cpp", "IsingConfiguration", "from_dict", "from_linear_site_index", "n_sites", "n_unitcells", "n_variable_sites", "occ", "occupation", "set_occ", "set_occupation", "shape", "to_dict", "to_linear_site_index", "within", "IsingFormationEnergy", "occ_delta_per_supercell", "per_supercell", "per_unitcell", "set_state", "IsingParamComposition", "n_independent_compositions", "occ_delta_per_supercell", "per_supercell", "per_unitcell", "set_state", "IsingState", "conditions", "configuration", "from_dict", "properties", "to_dict", "IsingSystem", "formation_energy_calculator", "param_composition_calculator", "libcasm.monte.ising_cpp.semigrand_canonical", "SemiGrandCanonicalCalculator", "conditions", "data", "default_json_sampling_functions", "default_sampling_functions", "formation_energy_calculator", "param_composition_calculator", "potential", "run", "state", "system", "SemiGrandCanonicalConditions", "exchange_potential", "from_dict", "from_values", "temperature", "to_dict", "to_values", "SemiGrandCanonicalData", "acceptance_rate", "completion_check", "json_samplers", "json_sampling_functions", "n_accept", "n_pass", "n_reject", "n_steps_per_pass", "rejection_rate", "reset", "sample_weight", "samplers", "sampling_functions", "to_dict", "SemiGrandCanonicalEventGenerator", "apply", "propose", "set_state", "SemiGrandCanonicalPotential", "occ_delta_per_supercell", "occ_event_delta_per_supercell", "per_supercell", "per_unitcell", "set_state", "default_write_status", "libcasm.monte.ising_py", "IsingConfiguration", "from_dict", "from_linear_site_index", "n_sites", "n_unitcells", "n_variable_sites", "occ", "occupation", "set_occ", "set_occupation", "shape", "to_dict", "to_linear_site_index", "within", "IsingFormationEnergy", "J", "lattice_type", "occ_delta_per_supercell", "per_supercell", "per_unitcell", "set_state", "state", "IsingParamComposition", "n_independent_compositions", "occ_delta_per_supercell", "per_supercell", "per_unitcell", "set_state", "IsingState", "IsingSystem", "libcasm.monte.ising_py.semigrand_canonical", "SemiGrandCanonicalCalculator", "conditions", "data", "formation_energy_calculator", "param_composition_calculator", "potential", "run", "state", "system", "SemiGrandCanonicalConditions", "exchange_potential", "from_dict", "from_values", "temperature", "to_dict", "to_values", "SemiGrandCanonicalData", "acceptance_rate", "completion_check", "n_accept", "n_pass", "n_reject", "n_steps_per_pass", "rejection_rate", "reset", "sample_weight", "samplers", "sampling_functions", "to_dict", "SemiGrandCanonicalEventGenerator", "apply", "occ_event", "propose", "set_state", "state", "SemiGrandCanonicalPotential", "conditions", "formation_energy_calculator", "occ_delta_per_supercell", "param_composition_calculator", "per_supercell", "per_unitcell", "set_state", "state", "system", "default_write_status", "make_formation_energy_f", "make_param_composition_f", "make_potential_energy_f", "libcasm.monte.methods", "BasicOccupationMetropolisData", "acceptance_rate", "completion_check", "json_samplers", "json_sampling_functions", "n_accept", "n_pass", "n_reject", "n_steps_per_pass", "rejection_rate", "sample_weight", "samplers", "sampling_functions", "to_dict", "basic_occupation_metropolis", "metropolis_acceptance", "libcasm.monte.sampling", "BasicStatistics", "calculated_precision", "mean", "relative_precision", "to_dict", "BasicStatisticsCalculator", "calculate", "confidence", "from_dict", "n_resamples", "to_dict", "weighted_observations_method", "CompletionCheck", "check", "count_and_time_check", "count_check", "params", "reset", "results", "time_check", "CompletionCheckParams", "calc_statistics_f", "check_base", "check_begin", "check_period", "check_period_max", "check_shift", "cutoff_params", "equilibration_check_f", "from_dict", "log_spacing", "requested_precision", "CompletionCheckResults", "clocktime", "convergence_check_results", "count", "equilibration_check_results", "full_reset", "has_all_minimums_met", "has_any_maximum_met", "is_complete", "n_samples", "n_samples_at_convergence_check", "params", "partial_reset", "time", "to_dict", "ConvergenceCheckResults", "N_samples_for_statistics", "all_converged", "individual_results", "to_dict", "ConvergenceResultMap", "items", "keys", "values", "CutoffCheckParams", "from_dict", "max_clocktime", "max_count", "max_sample", "max_time", "min_clocktime", "min_count", "min_sample", "min_time", "to_dict", "EquilibrationCheckResults", "N_samples_for_all_to_equilibrate", "all_equilibrated", "individual_results", "to_dict", "EquilibrationResultMap", "items", "keys", "values", "IndividualConvergenceResult", "is_converged", "requested_precision", "stats", "to_dict", "IndividualEquilibrationResult", "N_samples_for_equilibration", "is_equilibrated", "to_dict", "RequestedPrecision", "abs_convergence_is_required", "abs_precision", "from_dict", "rel_convergence_is_required", "rel_precision", "to_dict", "RequestedPrecisionConstructor", "set_precision", "RequestedPrecisionMap", "items", "keys", "values", "SAMPLE_METHOD", "CUSTOM", "LINEAR", "LOG", "name", "value", "SAMPLE_MODE", "BY_PASS", "BY_STEP", "BY_TIME", "name", "value", "Sampler", "append", "clear", "component", "component_names", "n_components", "n_samples", "sample", "sample_capacity", "set_capacity_increment", "set_sample_capacity", "set_values", "shape", "values", "SamplerComponent", "component_index", "component_name", "sampler_name", "SamplerMap", "items", "keys", "values", "SamplingParams", "base", "begin", "do_sample_time", "do_sample_trajectory", "period", "sample_method", "sample_mode", "sampler_names", "shift", "stochastic_sample_period", "StateSamplingFunction", "component_names", "description", "function", "name", "shape", "StateSamplingFunctionMap", "items", "keys", "values", "all_minimums_met", "any_maximum_met", "colmajor_component_names", "component_convergence_check", "converge", "convergence_check", "default_component_names", "default_equilibration_check", "get_n_samples", "jsonStateSamplingFunction", "description", "function", "name", "jsonStateSamplingFunctionMap", "items", "keys", "values", "matrix_as_vector", "scalar_as_vector", "Reference (libcasm)", "Usage", "Completion Checks", "Overview"], "terms": {"ptdv23": [0, 1, 252, 335], "brian": 0, "puchala": [0, 1, 252, 335], "john": 0, "c": [0, 232, 267, 585, 586], "thoma": 0, "anton": 0, "van": [0, 1, 571, 585], "der": [0, 1], "ven": [0, 1], "casm": [0, 2, 3, 151, 158, 163, 201, 410, 464, 465, 466, 484, 485, 486, 506, 507, 508, 540, 542, 561, 563, 578, 580, 585, 586], "mont": [0, 2, 4, 37, 42, 46, 56, 59, 63, 67, 70, 72, 73, 76, 78, 79, 117, 121, 123, 125, 129, 131, 133, 139, 142, 144, 145, 153, 159, 164, 165, 169, 193, 202, 203, 204, 205, 206, 212, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 247, 248, 252, 254, 258, 260, 262, 264, 268, 270, 272, 276, 277, 279, 286, 287, 288, 291, 292, 293, 295, 301, 302, 303, 304, 305, 311, 313, 327, 334, 335, 341, 342, 344, 346, 350, 353, 360, 364, 372, 373, 376, 379, 384, 386, 389, 390, 391, 392, 394, 395, 396, 397, 399, 400, 401, 402, 403, 408, 409, 411, 416, 423, 431, 443, 458, 463, 464, 465, 466, 467, 478, 483, 484, 485, 486, 487, 492, 496, 503, 505, 506, 507, 508, 509, 515, 521, 535, 539, 540, 541, 542, 543, 554, 557, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 577, 578, 579, 580, 581, 582, 584, 585], "carlo": [0, 1, 3, 4, 46, 55, 145, 153, 159, 164, 165, 169, 193, 218, 219, 220, 221, 222, 224, 225, 227, 230, 231, 247, 252, 258, 260, 262, 264, 267, 268, 270, 272, 276, 277, 286, 287, 288, 291, 292, 293, 295, 302, 303, 304, 311, 327, 334, 341, 343, 344, 346, 350, 360, 364, 372, 376, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 401, 402, 403, 408, 409, 410, 431, 467, 515, 543, 554, 557, 573, 575, 584, 585], "calcul": [0, 1, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 264, 265, 266, 268, 272, 273, 274, 275, 276, 278, 279, 297, 305, 306, 307, 308, 309, 310, 311, 327, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 347, 348, 349, 350, 351, 352, 353, 354, 369, 379, 381, 383, 387, 388, 389, 390, 391, 392, 408, 411, 412, 414, 416, 418, 422, 431, 432, 490, 497, 500, 543, 554, 557, 567, 569, 571, 573, 575, 584], "thermodynam": [0, 258, 259, 269, 276, 279, 341, 353, 586], "kinet": [0, 165, 543, 586], "properti": [0, 47, 49, 50, 51, 52, 54, 57, 58, 60, 61, 62, 64, 65, 66, 134, 135, 136, 137, 138, 150, 152, 154, 157, 165, 166, 167, 168, 194, 198, 207, 208, 209, 210, 211, 236, 237, 238, 243, 258, 259, 260, 264, 265, 266, 269, 270, 273, 274, 275, 277, 278, 280, 283, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 341, 342, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 412, 413, 418, 420, 422, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 456, 459, 460, 461, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 488, 489, 490, 493, 494, 497, 498, 500, 501, 513, 514, 519, 520, 536, 537, 538, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 571, 574, 575, 576, 585, 586], "complex": 0, "multicompon": 0, "crystal": 0, "2023": 0, "arxiv": 0, "2309": 0, "11761": 0, "The": [1, 2, 15, 31, 32, 48, 79, 97, 98, 107, 145, 146, 150, 151, 152, 155, 156, 158, 159, 160, 163, 169, 193, 194, 195, 196, 198, 201, 221, 222, 223, 224, 233, 243, 247, 248, 251, 252, 254, 269, 275, 276, 279, 280, 283, 286, 287, 288, 290, 295, 299, 302, 303, 306, 307, 310, 311, 327, 328, 329, 330, 333, 334, 335, 340, 345, 347, 348, 349, 350, 351, 353, 354, 357, 360, 362, 363, 365, 371, 373, 374, 375, 376, 377, 378, 380, 381, 383, 387, 389, 390, 391, 392, 394, 396, 398, 406, 408, 409, 416, 417, 424, 425, 426, 430, 431, 433, 435, 436, 437, 441, 504, 521, 543, 549, 550, 551, 554, 557, 567, 569, 570, 571, 575, 585, 586], "packag": [1, 586], "provid": [1, 41, 42, 146, 151, 155, 156, 158, 159, 160, 163, 169, 195, 196, 201, 221, 222, 224, 231, 348, 350, 383, 496, 543, 586], "us": [1, 37, 40, 41, 42, 79, 165, 168, 206, 231, 233, 247, 272, 275, 276, 286, 303, 304, 313, 327, 329, 335, 340, 347, 348, 349, 350, 360, 362, 371, 376, 381, 383, 394, 396, 398, 406, 408, 416, 417, 418, 422, 431, 441, 459, 509, 521, 530, 535, 543, 554, 567, 569, 571, 573, 585, 586], "build": [1, 586], "block": [1, 586], "simul": [1, 393, 408, 425, 430, 431, 448, 455, 456, 467, 472, 476, 543, 554, 557, 564, 565, 571, 573, 575, 585, 586], "thi": [1, 97, 98, 112, 145, 170, 218, 219, 220, 222, 223, 224, 225, 227, 230, 231, 252, 272, 306, 307, 327, 335, 348, 350, 351, 352, 376, 383, 387, 388, 416, 493, 521, 535, 554, 557, 571, 573, 575, 585, 586], "includ": [1, 98, 107, 145, 150, 153, 163, 218, 219, 220, 222, 223, 224, 225, 227, 230, 231, 258, 271, 272, 276, 297, 341, 350, 369, 372, 407, 417, 460, 480, 567, 571, 586], "sampl": [1, 271, 272, 276, 286, 289, 290, 297, 298, 299, 350, 360, 369, 370, 371, 390, 391, 392, 394, 397, 398, 404, 405, 406, 407, 408, 411, 416, 417, 422, 423, 424, 425, 426, 430, 431, 434, 441, 443, 448, 452, 453, 455, 458, 459, 463, 464, 465, 466, 467, 471, 475, 478, 479, 483, 484, 485, 486, 487, 492, 493, 496, 503, 504, 505, 506, 507, 508, 509, 515, 521, 522, 524, 525, 526, 527, 529, 531, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 546, 547, 549, 550, 551, 553, 554, 555, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 585, 586], "class": [1, 3, 4, 37, 42, 46, 55, 56, 59, 63, 67, 73, 79, 117, 125, 133, 139, 145, 153, 159, 164, 169, 193, 202, 206, 212, 232, 233, 247, 252, 258, 264, 267, 268, 279, 286, 301, 302, 303, 305, 312, 313, 327, 335, 341, 342, 343, 344, 353, 360, 373, 379, 393, 394, 410, 411, 416, 423, 431, 443, 458, 463, 467, 478, 483, 487, 492, 496, 503, 505, 509, 515, 521, 535, 539, 543, 554, 560, 573, 577, 585, 586], "function": [1, 55, 67, 70, 72, 73, 76, 78, 79, 117, 121, 123, 125, 129, 131, 139, 142, 144, 212, 215, 217, 267, 271, 272, 276, 286, 290, 299, 343, 350, 360, 371, 390, 391, 392, 393, 394, 398, 406, 408, 410, 431, 432, 439, 503, 504, 509, 521, 543, 551, 554, 556, 567, 568, 569, 573, 574, 585], "equilibr": [1, 417, 431, 439, 447, 478, 479, 480, 481, 492, 493, 494, 503, 504, 571, 584], "converg": [1, 410, 431, 442, 445, 458, 459, 460, 461, 462, 479, 480, 487, 488, 491, 493, 496, 497, 500, 503, 504, 521, 535, 567, 569, 571, 585, 586], "check": [1, 48, 156, 196, 221, 276, 286, 350, 408, 410, 423, 425, 426, 429, 430, 431, 433, 434, 435, 436, 438, 439, 441, 443, 445, 447, 449, 450, 451, 453, 454, 458, 459, 460, 461, 462, 467, 478, 479, 480, 481, 487, 491, 492, 494, 503, 521, 564, 565, 567, 568, 569, 571, 584, 586], "statist": [1, 297, 369, 411, 416, 417, 422, 431, 432, 459, 490, 493, 543, 567, 569, 585], "gener": [1, 42, 163, 218, 219, 220, 225, 226, 227, 228, 229, 230, 276, 303, 350, 376, 408, 409, 543, 585, 586], "result": [1, 48, 156, 196, 231, 276, 286, 346, 350, 360, 394, 408, 443, 445, 447, 458, 461, 462, 478, 481, 487, 491, 492, 535, 554, 555, 564, 565, 571, 585, 586], "io": 1, "supercel": [1, 79, 86, 98, 101, 112, 233, 236, 237, 238, 243, 248, 249, 254, 255, 308, 313, 316, 317, 318, 322, 323, 330, 331, 337, 515, 543], "index": [1, 72, 78, 79, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 105, 108, 114, 115, 116, 123, 131, 134, 144, 146, 151, 153, 154, 155, 157, 158, 160, 162, 163, 167, 176, 183, 184, 185, 186, 188, 191, 195, 201, 207, 208, 211, 217, 221, 222, 224, 231, 246, 315, 325, 326, 535, 536, 543, 554, 573], "convers": [1, 46, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 146, 151, 155, 156, 158, 159, 160, 163, 169, 180, 195, 196, 201, 208, 211, 221, 222, 224, 231], "event": [1, 56, 59, 63, 67, 70, 72, 73, 76, 78, 79, 117, 121, 123, 125, 129, 131, 133, 139, 142, 144, 145, 153, 159, 163, 164, 169, 170, 193, 202, 203, 204, 205, 206, 212, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 276, 301, 302, 303, 304, 307, 350, 373, 374, 375, 376, 377, 378, 408, 409, 515, 543, 586], "definit": [1, 252, 335, 586], "construct": [1, 35, 37, 42, 48, 79, 97, 98, 146, 155, 159, 160, 195, 223, 234, 261, 270, 276, 281, 282, 314, 324, 350, 355, 356, 358, 359, 408, 419, 440, 468, 499, 566, 570, 585], "select": 1, "method": [1, 4, 17, 37, 42, 46, 56, 59, 63, 67, 73, 79, 117, 125, 133, 139, 145, 153, 159, 164, 169, 193, 202, 206, 212, 233, 247, 252, 258, 264, 268, 269, 270, 275, 276, 279, 286, 301, 305, 311, 313, 327, 335, 341, 342, 344, 350, 353, 360, 373, 379, 389, 394, 408, 409, 410, 411, 416, 417, 422, 423, 424, 425, 426, 430, 431, 443, 458, 463, 467, 478, 483, 487, 492, 496, 503, 505, 509, 515, 521, 535, 539, 543, 554, 560, 573, 577, 585, 586], "ar": [1, 46, 48, 53, 79, 97, 98, 147, 156, 159, 196, 197, 221, 233, 244, 248, 252, 254, 263, 284, 285, 300, 306, 330, 335, 373, 377, 378, 416, 417, 420, 422, 424, 425, 426, 430, 431, 441, 460, 467, 480, 493, 504, 521, 543, 554, 555, 568, 569, 570, 571, 585, 586], "describ": [1, 164], "et": [1, 252, 335], "al": [1, 252, 335], "i": [1, 2, 48, 67, 71, 72, 73, 77, 78, 79, 83, 84, 85, 91, 94, 98, 100, 102, 108, 116, 122, 123, 124, 130, 131, 132, 139, 143, 144, 202, 212, 216, 217, 233, 235, 237, 243, 245, 251, 257, 276, 292, 310, 317, 323, 333, 335, 340, 348, 350, 351, 352, 364, 374, 376, 383, 387, 388, 391, 394, 400, 402, 408, 416, 417, 431, 441, 463, 467, 483, 488, 494, 497, 500, 504, 505, 515, 521, 535, 539, 543, 547, 549, 550, 551, 553, 554, 555, 557, 560, 569, 571, 573, 575, 577, 585, 586], "part": [1, 13, 34, 586], "open": 1, "sourc": [1, 313, 314, 315, 319, 320, 321, 322, 324, 325, 326, 327, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 344, 350, 353, 355, 356, 358, 359, 360, 361, 367, 368, 372, 373, 374, 376, 377, 379, 382, 384, 385, 386, 389, 390, 391, 392, 409, 503, 504, 568], "softwar": 1, "which": [1, 6, 7, 8, 9, 10, 42, 79, 98, 166, 237, 251, 276, 317, 333, 335, 350, 373, 374, 377, 378, 408, 416, 417, 424, 425, 426, 430, 503, 543, 571, 585, 586], "design": 1, "perform": [1, 145, 202, 417, 424, 425, 426, 430, 431, 439, 453, 494, 543, 571, 584], "first": [1, 124, 132, 193, 196, 197, 199, 221, 276, 350, 571, 585], "principl": 1, "mechan": 1, "studi": 1, "multi": [1, 145, 149, 150, 219, 223, 228, 230], "compon": [1, 61, 103, 135, 313, 391, 431, 442, 493, 504, 521, 525, 526, 535, 537, 554, 555, 567, 568, 569, 570], "crystallin": 1, "solid": 1, "develop": 1, "group": [1, 97], "origin": [1, 585], "univers": 1, "michigan": 1, "current": [1, 12, 15, 25, 38, 57, 58, 134, 172, 173, 182, 183, 184, 187, 218, 219, 220, 225, 226, 227, 228, 229, 230, 233, 239, 240, 241, 242, 247, 269, 271, 272, 275, 276, 277, 302, 304, 319, 320, 321, 322, 341, 345, 347, 348, 350, 351, 373, 374, 375, 376, 378, 380, 381, 383, 384, 386, 387, 408, 527, 529, 543, 546, 554, 557, 573, 575, 585, 586], "california": 1, "santa": 1, "barbara": 1, "For": [1, 231, 252, 335, 431, 441, 521, 543, 554, 567, 569, 585, 586], "more": [1, 145, 248, 254, 306, 330, 337, 530, 531], "inform": [1, 165, 168, 206], "see": [1, 2, 109, 111, 252, 335, 544, 545, 548, 552], "homepag": 1, "gnu": 1, "lesser": 1, "public": 1, "lgpl": 1, "pleas": 1, "file": [1, 4, 18, 23, 276, 311, 389, 585], "avail": 1, "github": 1, "instal": 1, "from": [1, 46, 48, 53, 63, 81, 82, 83, 84, 85, 87, 88, 91, 92, 93, 94, 95, 100, 104, 105, 106, 108, 109, 114, 115, 116, 124, 132, 146, 155, 160, 163, 188, 195, 218, 219, 220, 223, 225, 227, 230, 234, 244, 245, 261, 263, 276, 281, 282, 284, 285, 300, 306, 307, 314, 350, 351, 355, 356, 387, 390, 391, 392, 411, 416, 419, 422, 431, 440, 461, 468, 481, 499, 509, 515, 554, 567, 569, 573, 585], "pypi": 1, "contributor": 1, "usag": [1, 554, 568, 573, 585], "overview": [1, 584], "complet": [1, 276, 286, 288, 350, 362, 364, 396, 408, 423, 424, 425, 426, 430, 431, 433, 434, 435, 441, 443, 451, 454, 467, 480, 503, 568, 584], "refer": [1, 240, 273, 274, 277, 554, 557, 573, 575], "bibliographi": 1, "built": [2, 586], "maco": 2, "x86_64": 2, "intel": 2, "arm64": 2, "appl": 2, "silicon": 2, "linux": 2, "aarch64": 2, "latest": 2, "releas": 2, "libcasm": [2, 4, 37, 42, 46, 56, 59, 63, 67, 70, 72, 73, 76, 78, 79, 117, 121, 123, 125, 129, 131, 133, 139, 142, 144, 145, 153, 159, 164, 169, 193, 202, 203, 204, 205, 206, 212, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 247, 248, 252, 254, 258, 264, 268, 279, 286, 301, 302, 303, 305, 311, 313, 327, 335, 341, 342, 344, 353, 360, 373, 379, 389, 390, 391, 392, 394, 397, 408, 409, 411, 416, 423, 431, 443, 458, 463, 464, 465, 466, 467, 478, 483, 484, 485, 486, 487, 492, 496, 503, 505, 506, 507, 508, 509, 515, 521, 535, 539, 540, 541, 542, 543, 554, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 577, 578, 579, 580, 581, 582, 585, 586], "can": [2, 163, 276, 350, 521, 543, 554, 555, 557, 573, 575, 585, 586], "pip": 2, "contribut": 2, "guid": 2, "tool": 3, "modul": [3, 232, 312], "self": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 53, 56, 59, 63, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 151, 153, 156, 158, 159, 161, 162, 163, 164, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 212, 213, 214, 215, 216, 217, 233, 235, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 263, 264, 268, 271, 272, 276, 279, 284, 285, 286, 287, 295, 296, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 350, 358, 376, 394, 395, 403, 407, 411, 414, 415, 416, 417, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 443, 448, 455, 457, 458, 462, 463, 464, 465, 466, 467, 477, 478, 482, 483, 484, 485, 486, 487, 491, 492, 495, 496, 502, 504, 505, 506, 507, 508, 509, 515, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 539, 540, 541, 542, 543, 554, 560, 561, 562, 563, 573, 577, 578, 579, 580], "logfile_path": [4, 276, 350, 408], "str": [4, 18, 19, 20, 22, 25, 29, 36, 38, 39, 47, 48, 51, 52, 54, 103, 104, 106, 182, 394, 504, 521, 525, 535, 537, 538, 539, 540, 541, 543, 551, 554, 555, 556, 558, 560, 561, 562, 566, 570, 573, 574, 576, 577, 578, 579], "log_frequ": [4, 276, 350, 408], "float": [4, 16, 17, 35, 45, 48, 50, 52, 247, 248, 249, 250, 254, 279, 283, 287, 295, 306, 307, 308, 309, 327, 328, 330, 331, 332, 353, 357, 361, 367, 372, 384, 385, 395, 403, 407, 408, 409, 414, 416, 418, 425, 430, 431, 433, 436, 437, 444, 448, 455, 467, 469, 472, 473, 476, 496, 498, 501, 504, 543, 544, 545, 548, 552, 564, 565, 582], "none": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 39, 40, 41, 42, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 117, 118, 119, 121, 122, 124, 125, 126, 127, 129, 130, 132, 139, 140, 141, 142, 143, 147, 159, 170, 187, 197, 212, 213, 214, 215, 216, 241, 242, 247, 251, 252, 257, 258, 276, 296, 302, 304, 310, 311, 321, 322, 327, 334, 335, 342, 350, 373, 378, 380, 387, 389, 408, 428, 431, 448, 455, 467, 496, 504, 521, 522, 523, 530, 531, 532, 543, 554, 564, 565], "base": [4, 37, 42, 46, 56, 59, 63, 67, 73, 79, 117, 125, 133, 139, 145, 153, 159, 164, 169, 193, 202, 206, 212, 225, 226, 227, 228, 229, 230, 233, 247, 252, 258, 264, 268, 279, 286, 301, 305, 313, 327, 335, 341, 342, 344, 353, 360, 373, 379, 394, 408, 411, 416, 423, 424, 425, 426, 430, 431, 433, 443, 458, 463, 467, 478, 483, 487, 492, 496, 503, 505, 509, 515, 521, 535, 539, 543, 553, 554, 560, 570, 571, 573, 577], "pybind11_object": [4, 37, 42, 46, 56, 59, 63, 67, 73, 79, 117, 125, 133, 139, 145, 153, 159, 164, 169, 193, 202, 206, 212, 233, 247, 252, 258, 264, 268, 279, 286, 301, 305, 394, 411, 416, 423, 431, 443, 458, 463, 467, 478, 483, 487, 492, 496, 505, 509, 515, 521, 535, 539, 543, 554, 560, 573, 577], "logger": 4, "statu": [4, 17, 276, 311, 350, 389, 408, 424, 425, 426, 430, 585], "constructor": [4, 37, 42, 46, 56, 59, 63, 67, 73, 79, 117, 125, 133, 139, 145, 153, 159, 164, 169, 193, 206, 212, 233, 247, 252, 258, 264, 268, 279, 286, 301, 305, 327, 335, 344, 350, 360, 373, 379, 394, 411, 416, 423, 431, 443, 458, 467, 478, 487, 492, 496, 521, 535, 543, 554, 573], "paramet": [4, 42, 79, 97, 98, 145, 146, 151, 153, 155, 156, 158, 159, 160, 163, 169, 193, 195, 196, 201, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 247, 248, 251, 252, 254, 258, 264, 268, 276, 279, 286, 302, 303, 305, 306, 307, 310, 311, 327, 330, 333, 335, 340, 344, 350, 351, 353, 360, 373, 374, 376, 377, 379, 387, 389, 390, 391, 392, 394, 408, 409, 416, 417, 423, 424, 425, 426, 430, 431, 438, 448, 454, 455, 467, 496, 503, 504, 521, 535, 543, 554, 564, 565, 566, 567, 568, 569, 570, 571, 573, 585, 586], "locat": [4, 18, 59, 60, 61, 62, 135, 136, 137, 138, 165, 169, 171, 189, 209, 210, 218, 219, 220, 225, 226, 227, 228, 229, 230], "log": [4, 17, 18, 23, 276, 311, 350, 389, 408, 424, 425, 426, 430, 431, 441, 509, 543, 585, 586], "output": [4, 18, 46, 586], "option": [4, 25, 42, 97, 98, 159, 247, 252, 258, 276, 327, 335, 350, 373, 408, 416, 422, 431, 446, 448, 453, 455, 456, 467, 469, 470, 471, 472, 473, 474, 475, 476, 496, 504, 521, 543, 554, 564, 565, 567, 569, 585], "how": [4, 17, 145, 150, 459, 479, 521, 586], "often": [4, 17], "second": [4, 16, 17, 35, 193, 196, 197, 199, 221, 571, 585], "methodlog": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 276, 311, 350, 389, 408, 424, 425, 426, 430, 585], "begin": [5, 6, 7, 8, 9, 10, 431, 434, 543], "new": [5, 42, 167, 248, 254, 276, 306, 330, 350, 408, 522], "lap": 5, "section": [6, 7, 8, 9, 10, 12, 13, 26, 31, 32, 33, 34], "alwai": 6, "print": [6, 7, 8, 9, 10, 19, 25, 26, 31, 32, 33, 36, 276, 350, 408], "everi": [6, 276, 350, 408, 431, 441, 543, 585], "verbosity_level": [6, 7, 8, 9, 10], "onli": [7, 8, 9, 10, 33, 37, 46, 56, 59, 63, 133, 164, 206, 233, 301, 306, 307, 320, 411, 416, 417, 422, 443, 458, 478, 487, 492, 493, 504, 568, 585], "debug": [7, 26, 31, 32, 33], "quiet": [8, 31], "standard": [9, 31, 32, 521, 554, 586], "verbos": [10, 31, 32, 33], "decreas": [11, 543], "indent": [11, 14, 15, 19, 22, 27, 28, 36], "level": [11, 14, 27, 28, 416, 418, 496, 503, 504, 567, 568, 569, 571, 585], "end": [12, 68, 74, 118, 126, 140, 213], "do": [13, 49, 585], "show": [13, 34], "time": [13, 16, 35, 120, 128, 247, 424, 425, 426, 430, 431, 444, 448, 455, 467, 472, 476, 515, 543, 546, 550, 564, 565, 585], "head": [13, 34], "increas": [14, 531], "string": [15, 554, 555], "sinc": [16, 35], "begin_lap": 16, "text": [19, 22, 36], "line": [19, 36], "wrap": [19, 36], "justif": [19, 20, 29, 36], "return": [20, 21, 43, 44, 45, 49, 50, 72, 78, 102, 120, 123, 128, 131, 144, 146, 149, 151, 155, 156, 158, 160, 161, 162, 163, 172, 173, 181, 182, 183, 184, 195, 196, 200, 201, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 235, 245, 248, 249, 250, 253, 254, 255, 256, 302, 303, 306, 307, 330, 331, 332, 336, 337, 338, 339, 372, 376, 390, 391, 392, 409, 417, 424, 425, 426, 430, 431, 504, 525, 533, 543, 554, 557, 564, 565, 566, 568, 570, 571, 572, 573, 575, 581, 582], "paragraph": [20, 21, 29, 30], "type": [20, 29, 46, 47, 48, 51, 52, 54, 57, 58, 60, 61, 62, 64, 65, 66, 134, 135, 136, 137, 138, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 165, 166, 167, 168, 169, 175, 176, 178, 179, 190, 191, 194, 195, 196, 198, 201, 207, 208, 209, 210, 211, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 236, 237, 238, 243, 247, 248, 254, 259, 260, 262, 265, 266, 280, 283, 292, 302, 303, 306, 307, 323, 327, 329, 330, 341, 350, 351, 372, 376, 390, 391, 392, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 408, 409, 417, 418, 420, 422, 424, 425, 426, 430, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 456, 469, 470, 471, 472, 473, 474, 475, 476, 497, 498, 500, 501, 504, 536, 537, 538, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 564, 565, 566, 568, 570, 571, 574, 575, 576, 585], "One": [20, 29, 247, 276, 292, 327, 329, 350, 364, 394, 400, 402, 408], "left": [20, 29, 417, 543, 585], "right": [20, 29, 417, 543, 585], "center": [20, 29], "full": [20, 29], "width": [21, 30], "creat": [23, 247, 554, 573], "parent": 23, "directori": [23, 276], "necessari": [23, 586], "restart": 24, "intern": [24, 43, 424, 425, 426, 430, 585], "timer": [24, 25], "what": 25, "show_clock": 25, "bool": [25, 36, 47, 49, 102, 156, 169, 196, 221, 247, 409, 424, 425, 426, 430, 431, 441, 449, 450, 451, 497, 500, 543, 546, 547, 553, 564, 565], "fals": [25, 169, 409, 424, 425, 426, 430, 431, 441, 460, 480, 488, 494, 543, 546, 547, 564, 565, 571, 585], "nice": 25, "format": [25, 247, 248, 249, 250, 251, 252, 264, 265, 268, 272, 273, 278, 305, 327, 330, 331, 332, 333, 334, 344, 347, 351, 379, 381, 387, 390], "header": 25, "valu": [25, 40, 41, 42, 45, 46, 48, 50, 79, 124, 132, 233, 240, 242, 248, 252, 254, 282, 306, 330, 335, 356, 414, 431, 441, 448, 455, 467, 479, 493, 494, 498, 501, 509, 515, 521, 523, 524, 528, 532, 543, 549, 550, 554, 571, 572, 573, 585], "set": [26, 27, 28, 29, 30, 31, 32, 33, 81, 82, 241, 242, 251, 257, 269, 275, 296, 304, 310, 321, 322, 333, 335, 340, 345, 347, 348, 349, 351, 368, 377, 380, 381, 383, 384, 386, 387, 431, 459, 479, 503, 504, 523, 530, 532, 543, 568, 585, 586], "mode": [26, 31, 32, 33, 515, 543], "all": [26, 53, 70, 76, 79, 98, 121, 129, 142, 147, 159, 215, 222, 224, 244, 252, 263, 284, 285, 300, 335, 416, 422, 431, 448, 449, 460, 467, 479, 480, 493, 504, 524, 532, 564, 568, 569, 571, 572, 585], "indent_spac": 27, "int": [27, 28, 30, 40, 41, 44, 57, 60, 61, 62, 71, 72, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 113, 114, 115, 116, 118, 120, 122, 123, 124, 126, 128, 130, 131, 132, 134, 136, 137, 138, 143, 144, 152, 153, 154, 157, 161, 162, 171, 174, 175, 176, 179, 188, 189, 190, 191, 192, 202, 203, 205, 207, 208, 209, 210, 211, 216, 217, 223, 231, 233, 235, 236, 237, 238, 239, 240, 241, 243, 245, 246, 247, 248, 253, 254, 276, 286, 292, 306, 313, 315, 316, 317, 318, 319, 321, 326, 327, 329, 350, 360, 363, 364, 365, 366, 372, 394, 399, 400, 401, 402, 407, 408, 416, 420, 422, 425, 426, 430, 431, 434, 435, 446, 448, 452, 453, 455, 456, 467, 470, 471, 474, 475, 504, 509, 515, 521, 524, 526, 527, 528, 529, 530, 531, 533, 535, 536, 543, 554, 559, 564, 565, 566, 567, 569, 570, 572, 573], "number": [27, 28, 37, 38, 39, 40, 41, 42, 57, 80, 86, 99, 103, 107, 113, 120, 128, 152, 156, 159, 169, 174, 175, 176, 181, 192, 196, 202, 218, 219, 220, 223, 225, 226, 227, 228, 229, 230, 231, 236, 237, 238, 253, 276, 286, 291, 292, 293, 294, 303, 316, 317, 318, 336, 350, 360, 363, 364, 365, 366, 376, 391, 394, 399, 400, 401, 402, 408, 409, 416, 420, 424, 425, 426, 430, 431, 434, 446, 448, 452, 453, 455, 459, 467, 470, 471, 474, 475, 493, 526, 527, 543, 564, 565, 566, 567, 569, 571, 572, 585, 586], "space": [27, 28, 431, 436, 437, 441, 509, 521, 543, 549], "per": [27, 231, 248, 249, 250, 254, 255, 256, 272, 276, 286, 292, 294, 308, 309, 330, 331, 332, 337, 350, 360, 364, 366, 390, 392, 394, 400, 402, 408, 515, 543, 554], "initial_indent_spac": 28, "an": [28, 48, 68, 71, 74, 77, 98, 100, 103, 108, 118, 122, 124, 126, 130, 132, 140, 143, 155, 160, 178, 179, 195, 213, 216, 221, 252, 276, 302, 307, 327, 335, 350, 376, 408, 432, 521, 554, 555, 557, 567, 569, 575, 585, 586], "initi": [28, 41, 65, 185, 186, 276, 350, 569, 585, 586], "befor": [28, 208, 467, 533, 585], "appli": [28, 276, 301, 304, 350, 373, 377, 378, 408, 431, 571, 585, 586], "justification_typ": 29, "arg0": [30, 39, 40, 41, 67, 73, 117, 125, 139, 146, 151, 155, 158, 160, 163, 171, 189, 195, 201, 212, 257, 310, 417, 423, 468, 571], "time_": 34, "restart_clock": 35, "indent_first_lin": 36, "true": [36, 49, 102, 156, 196, 221, 247, 409, 424, 425, 426, 430, 431, 441, 449, 450, 460, 480, 488, 494, 497, 500, 543, 546, 547, 553, 564, 565, 571, 585], "without": [36, 268, 278, 305, 313, 322, 344, 352, 379, 388, 424], "A": [37, 42, 47, 51, 52, 54, 79, 97, 98, 153, 159, 169, 218, 219, 220, 222, 223, 224, 225, 227, 230, 231, 268, 273, 274, 277, 344, 390, 391, 392, 408, 417, 431, 432, 439, 442, 467, 543, 554, 555, 557, 566, 568, 571, 573, 575, 585, 586], "pseudo": [37, 40, 41, 42], "random": [37, 38, 39, 40, 41, 42, 218, 219, 220, 225, 226, 227, 228, 229, 230, 276, 303, 350, 376, 408, 409, 543, 585, 586], "engin": [37, 38, 39, 40, 41, 42, 276, 350, 408, 585], "std": [37, 41, 42, 248, 254, 540, 542, 571], "mt19937_64": 37, "default": [37, 46, 56, 59, 63, 133, 164, 206, 233, 271, 276, 301, 350, 408, 411, 413, 431, 433, 434, 435, 436, 437, 441, 443, 458, 478, 487, 488, 492, 493, 494, 504, 521, 544, 545, 546, 547, 548, 549, 550, 551, 552, 568, 570, 585], "random_devic": [37, 42], "seed": [37, 41, 42], "randomnumberengin": [38, 39, 40, 41, 42, 43, 276, 350, 408, 585], "state": [38, 39, 247, 251, 252, 257, 258, 268, 275, 276, 278, 302, 304, 305, 310, 327, 333, 335, 340, 341, 344, 345, 347, 348, 350, 352, 373, 374, 377, 379, 380, 381, 383, 384, 386, 388, 408, 503, 504, 554, 557, 568, 573, 575, 586], "psueudo": [38, 39], "save": [39, 543, 546, 547], "singl": [40, 46, 53, 223, 244, 263, 276, 284, 285, 300, 313, 487, 492], "list": [41, 60, 61, 62, 67, 68, 70, 73, 74, 76, 79, 97, 98, 118, 120, 121, 124, 126, 128, 129, 132, 135, 136, 138, 139, 140, 142, 159, 161, 162, 169, 171, 182, 189, 209, 210, 212, 213, 215, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 247, 306, 504, 521, 525, 533, 543, 551, 554, 555, 559, 566, 570, 586], "share": [42, 43, 352, 388], "uniformli": [42, 44, 45], "distribut": [42, 44, 45, 585], "integ": [42, 44, 48, 79, 98], "real": 42, "If": [42, 79, 159, 276, 350, 408, 409, 431, 441, 496, 497, 500, 504, 521, 543, 546, 547, 553, 554, 555, 564, 565, 568, 571, 585], "randomnumbergener": [43, 44, 45, 178, 179, 218, 219, 220, 225, 226, 227, 228, 229, 230, 303, 376, 408, 409], "maximum_valu": [44, 45], "uint64": 44, "0": [44, 45, 97, 98, 247, 252, 327, 335, 409, 413, 416, 417, 424, 425, 426, 430, 431, 448, 455, 479, 493, 511, 517, 521, 523, 543, 544, 545, 548, 552, 554, 555, 557, 566, 568, 570, 571, 573, 575, 585], "doubl": 45, "point": [45, 48], "data": [46, 48, 79, 146, 151, 155, 158, 160, 163, 195, 201, 234, 261, 264, 276, 281, 286, 289, 298, 314, 342, 350, 355, 360, 370, 372, 394, 397, 405, 408, 419, 423, 424, 425, 426, 430, 431, 440, 499, 521, 535, 554, 567, 569, 573, 585, 586], "structur": [46, 79, 423, 535, 585, 586], "hold": [46, 185, 186, 264, 268, 278, 286, 289, 298, 305, 342, 344, 346, 352, 360, 370, 379, 388, 394, 397, 405, 408, 423, 521, 554, 573, 585], "note": [46, 50, 79, 202, 252, 276, 306, 307, 327, 335, 350, 431, 459, 460, 463, 467, 480, 483, 496, 505, 521, 535, 539, 554, 560, 571, 573, 577], "should": [46, 79, 218, 219, 220, 223, 225, 227, 230, 233, 417, 535, 538, 543, 571, 585], "have": [46, 49, 417, 424, 425, 426, 430, 449, 450, 543, 564, 571, 585], "same": [46, 49, 79, 97, 98, 417, 504, 568, 571, 572, 585], "kei": [46, 505, 535, 538, 567, 585], "even": 46, "differ": [46, 221, 306, 307], "input": [46, 351, 387, 585, 586], "made": [46, 181, 223, 424, 425, 426, 430, 431, 571], "combin": [46, 53, 244, 263, 284, 285, 300], "dict": [46, 47, 48, 51, 52, 53, 54, 146, 151, 155, 158, 160, 163, 195, 201, 202, 234, 244, 261, 263, 281, 284, 285, 300, 314, 324, 355, 358, 372, 394, 407, 415, 419, 421, 440, 442, 457, 462, 463, 468, 477, 482, 483, 491, 495, 499, 502, 505, 539, 560, 577, 585], "attribut": [46, 48, 53, 56, 59, 63, 133, 145, 153, 164, 193, 206, 233, 244, 258, 263, 264, 268, 276, 279, 284, 285, 286, 296, 300, 313, 327, 344, 350, 351, 353, 360, 368, 373, 379, 387, 394, 411, 416, 431, 443, 458, 467, 478, 487, 492, 496, 509, 515, 535, 543, 554, 573, 585], "valuemap": [47, 48, 49, 50, 51, 52, 53, 54, 258, 259, 262, 282, 285, 341, 356, 359, 586], "like": [47, 51, 52, 54, 67, 73, 139, 202, 212, 442, 463, 483, 505, 539, 560, 577, 585], "object": [47, 51, 52, 54, 67, 73, 97, 98, 139, 180, 202, 212, 313, 327, 335, 341, 342, 344, 352, 353, 360, 373, 379, 388, 442, 463, 483, 503, 505, 539, 554, 557, 560, 573, 575, 577], "booleanvaluemap": 47, "static": [48, 97, 98, 146, 155, 160, 195, 234, 261, 281, 282, 314, 355, 356, 358, 419, 440, 468, 499], "json": [48, 53, 146, 155, 160, 195, 234, 244, 261, 263, 271, 276, 281, 284, 286, 289, 290, 300, 350, 394, 397, 398, 407, 408, 415, 419, 421, 440, 457, 462, 468, 477, 482, 491, 495, 499, 502, 573], "python": [48, 53, 146, 151, 155, 158, 160, 163, 195, 201, 232, 234, 244, 261, 263, 281, 284, 285, 300, 312, 343, 407, 415, 419, 421, 440, 457, 462, 468, 477, 482, 491, 495, 499, 502, 573, 585, 586], "automat": [48, 521, 585], "item": [48, 53, 68, 70, 71, 72, 74, 76, 77, 78, 118, 121, 122, 123, 124, 126, 129, 130, 131, 132, 140, 142, 143, 144, 213, 215, 216, 217, 244, 263, 284, 285, 300, 554, 573, 585], "ad": 48, "correspond": [48, 79, 97, 98, 235, 535], "convert": [48, 146, 151, 155, 156, 158, 159, 160, 163, 169, 188, 195, 196, 201, 221, 222, 224, 231, 350, 372, 387, 573], "presenc": 48, "other": [48, 49, 97, 98, 247, 327, 586], "e": [48, 98, 233, 235, 243, 245, 323, 408, 416, 417, 515, 551, 554, 555], "except": [48, 448], "increment": [50, 64, 530, 571, 585], "n_increment": 50, "each": [50, 97, 98, 153, 157, 181, 182, 185, 186, 231, 247, 248, 254, 306, 330, 424, 425, 426, 430, 521, 543, 554, 555, 567, 569, 585], "doe": [50, 98, 145, 222, 223, 224, 231, 407, 467, 586], "chang": [50, 248, 254, 305, 306, 307, 322, 330, 337, 379, 408, 409, 571, 585, 586], "boolean": 50, "numpi": [51, 54, 79, 89, 90, 92, 93, 94, 96, 97, 98, 109, 111, 170, 172, 173, 187, 233, 235, 240, 242, 245, 254, 255, 256, 279, 417, 431, 522, 524, 528, 532, 534, 554, 567, 569, 571, 581, 582], "ndarrai": [51, 54, 58, 64, 79, 89, 90, 92, 93, 94, 96, 97, 98, 109, 111, 170, 172, 173, 187, 233, 235, 240, 242, 243, 245, 254, 255, 256, 279, 280, 313, 315, 320, 322, 325, 337, 338, 339, 353, 354, 417, 431, 522, 524, 528, 532, 534, 554, 567, 569, 571, 581, 582], "float64": [51, 54, 89, 90, 92, 93, 96, 172, 173, 254, 255, 256, 279, 337, 338, 339, 417, 431, 522, 524, 528, 532, 534, 554, 567, 569, 571, 581, 582], "m": [51, 54, 170, 172, 173, 187, 233, 235, 240, 242, 245, 254, 255, 256, 279, 417, 431, 521, 522, 524, 532, 534, 554, 555, 559, 567, 569, 570, 571, 581, 582], "n": [51, 172, 173, 254, 255, 416, 417, 431, 441, 521, 528, 532, 534, 543, 554, 555, 559, 570, 571, 581, 585, 586], "matrixvaluemap": 51, "scalarvaluemap": 52, "repres": [53, 133, 145, 151, 158, 163, 193, 201, 244, 263, 284, 285, 300, 407, 415, 421, 457, 462, 477, 482, 491, 495, 502, 554, 555, 586], "1": [54, 58, 64, 89, 90, 92, 93, 94, 97, 98, 145, 170, 187, 233, 235, 240, 242, 245, 247, 248, 252, 254, 255, 256, 276, 279, 303, 306, 313, 327, 329, 330, 335, 337, 350, 408, 409, 416, 417, 422, 431, 441, 512, 515, 516, 521, 522, 524, 528, 543, 544, 545, 548, 554, 555, 566, 567, 568, 569, 570, 571, 581, 582, 585], "vectorvaluemap": 54, "applic": [55, 107, 153, 157, 258, 262, 467, 472, 476, 543, 546], "occup": [55, 60, 79, 98, 99, 100, 103, 105, 108, 133, 137, 145, 150, 153, 157, 159, 164, 165, 166, 167, 168, 169, 170, 178, 179, 187, 193, 194, 198, 209, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 233, 239, 241, 242, 252, 276, 319, 321, 322, 335, 374, 376, 394, 408, 586], "track": [55, 56, 165, 168, 424, 425, 426, 430, 585], "posit": [56, 71, 77, 122, 130, 143, 172, 173, 182, 183, 184, 185, 186, 216], "individu": [56, 147, 152, 407, 491, 567], "period": [56, 58, 97, 246, 326, 431, 435, 543, 553, 585], "boundari": [56, 58], "atom": [57, 58, 59, 64, 73, 74, 77, 78, 103, 135, 169, 172, 173, 174, 181, 182, 183, 184, 185, 186], "jump": [57, 181], "fraction": [58, 64, 79, 90, 93, 287, 295, 414], "coordin": [58, 64, 79, 83, 84, 85, 89, 90, 91, 92, 93, 116, 172, 173], "np": [58, 64, 235, 240, 243, 254, 279, 280, 313, 315, 325, 353, 431, 581, 582, 585], "shape": [58, 64, 79, 97, 98, 172, 173, 233, 313, 322, 521, 522, 534, 554, 570, 585], "3": [58, 64, 79, 89, 90, 92, 93, 94, 96, 97, 98, 109, 111, 172, 173, 568, 585], "dtype": [58, 64, 79, 97, 98, 233, 235, 240, 243, 254, 320, 322, 337, 338, 339], "int_": [58, 64], "specifi": [59, 63, 97, 98, 102, 169, 176, 191, 268, 278, 305, 344, 352, 379, 388, 424, 425, 426, 430, 442, 496, 497, 500, 503, 504, 509, 515, 535, 537, 567, 568, 585, 586], "specif": [59, 169, 585], "site": [59, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 108, 113, 116, 133, 134, 153, 156, 157, 159, 166, 167, 169, 175, 176, 188, 192, 196, 207, 221, 231, 236, 238, 239, 240, 241, 242, 247, 248, 252, 254, 276, 292, 303, 306, 313, 316, 318, 319, 321, 330, 335, 337, 350, 364, 394, 400, 402, 408, 515, 543], "molecul": [59, 79, 136, 169, 189], "atomloc": [60, 61, 62, 63, 65, 66], "configur": [60, 137, 188, 209, 233, 243, 252, 258, 262, 271, 276, 292, 313, 314, 324, 335, 341, 350, 351, 364, 387, 394, 400, 402, 543, 547, 573, 585, 586], "mol": [61, 62, 134, 135, 136, 137, 138, 139, 140, 143, 144, 171, 178, 179, 190, 191, 210, 554], "occloc": [62, 135, 136, 138, 165, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 206, 210, 218, 219, 220, 225, 226, 227, 228, 229, 230], "trajectori": [63, 165], "one": [63, 239, 241, 276, 292, 319, 321, 350, 364, 394, 400, 402, 408, 515, 585], "anoth": 63, "atomtraj": [64, 65, 66, 67, 68, 71, 72], "amount": [64, 431, 585], "translat": 64, "final": 66, "arg": [67, 70, 72, 73, 76, 78, 117, 121, 123, 125, 129, 131, 139, 142, 144, 212, 215, 217], "kwarg": [67, 70, 72, 73, 76, 78, 117, 121, 123, 125, 129, 131, 139, 142, 144, 212, 215, 217], "overload": [67, 70, 72, 73, 76, 78, 117, 121, 123, 125, 129, 131, 139, 142, 144, 212, 215, 217], "__init__": [67, 73, 117, 125, 139, 212], "_monte_ev": [67, 70, 72, 73, 76, 78, 117, 121, 123, 125, 129, 131, 139, 142, 144, 203, 204, 205, 212, 215, 217], "copi": [67, 73, 117, 125, 139, 212], "iter": [67, 70, 73, 76, 117, 121, 125, 129, 139, 142, 212, 215], "atomtrajvector": [68, 69, 70, 71, 72], "x": [68, 71, 74, 77, 118, 120, 122, 124, 126, 128, 130, 132, 140, 143, 213, 216, 252, 253, 254, 255, 256, 272, 335, 417, 585], "add": [68, 74, 118, 126, 140, 213, 247, 327, 522], "content": [69, 75, 119, 127, 141, 214], "l": [70, 76, 79, 82, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 114, 115, 116, 121, 129, 142, 215, 585], "append": [70, 76, 121, 129, 142, 215, 554, 573, 585], "given": [70, 71, 76, 77, 121, 122, 129, 130, 142, 143, 215, 216, 245, 246, 521, 554, 557, 573, 575, 585, 586], "remov": [72, 78, 123, 131, 144, 217], "last": [72, 78, 123, 131, 144, 217, 429], "atomvector": [74, 75, 76, 77, 78], "xtal_prim": [79, 97, 98], "prim": [79, 93, 96, 97, 98, 109, 585], "transformation_matrix_to_sup": [79, 97, 98], "int64": [79, 94, 97, 98, 109, 111], "follow": [79, 571, 585], "shorthand": 79, "member": [79, 509, 515], "name": [79, 104, 106, 182, 504, 521, 525, 535, 537, 538, 539, 551, 554, 555, 560, 566, 570, 573, 577, 585], "linear": [79, 84, 87, 88, 89, 90, 91, 92, 93, 94, 95, 166, 188, 240, 242, 248, 254, 306, 330, 431, 435, 441, 509, 543, 549], "particular": [79, 178, 179, 190, 191, 225, 226, 227, 228, 229, 230, 268, 278, 305, 344, 352, 379, 388, 521, 524, 586], "b": [79, 81, 83, 84, 85, 88, 91, 115, 116, 543], "sublattic": [79, 81, 82, 85, 88, 89, 90, 95, 97, 114, 115, 116], "unitl": [79, 114, 115, 116], "non": [79, 82, 85, 95, 110, 111, 114, 115, 116, 543], "primit": [79, 82, 85, 89, 90, 95, 98, 110, 111, 114, 115, 116], "unit": [79, 80, 81, 82, 83, 85, 87, 89, 90, 94, 95, 97, 98, 99, 100, 102, 108, 110, 111, 113, 114, 115, 116, 134, 153, 154, 156, 159, 169, 196, 207, 221, 231, 313, 317, 554], "cell": [79, 82, 85, 89, 90, 94, 95, 98, 110, 111, 113, 114, 115, 116, 231, 313, 317, 554], "when": [79, 276, 350, 360, 394, 408, 416, 417, 420, 422, 431, 441, 453, 467, 493, 530, 543, 546, 547, 585], "determin": [79, 97, 431, 585], "appropri": 79, "symmetri": [79, 97, 98], "problem": 79, "between": [79, 441, 585], "mai": [79, 153, 297, 335, 340, 417, 424, 425, 426, 430, 493, 496, 503, 571, 585], "ijk": 79, "j": [79, 83, 84, 85, 91, 94, 116, 247, 327, 585], "k": [79, 83, 84, 85, 91, 94, 116, 417, 585], "indic": [79, 94, 97, 98, 153, 156, 166, 167, 235, 248, 254, 306, 315, 325, 330, 431, 504, 543, 554, 555, 571, 585], "respect": [79, 585], "lattic": [79, 93, 96, 97, 98, 232, 247, 312, 327, 329], "vector": [79, 93, 96, 97, 98, 109, 137, 170, 248, 253, 254, 521, 522, 525, 526, 535, 536, 554, 555, 559, 566, 570, 573, 581, 582], "bijk": [79, 83, 84, 85], "integr": [79, 83, 84, 85, 91, 116], "asym": [79, 81, 82, 99, 100, 102, 108], "asymmetr": [79, 80, 81, 82, 83, 87, 97, 98, 99, 100, 102, 108, 114, 134, 153, 154, 156, 159, 169, 196, 207, 221, 231], "orbit": [79, 97, 98], "symmetr": 79, "equival": [79, 246, 326, 409, 416], "occ_index": [79, 100, 108], "": [79, 97, 98, 272, 345, 380, 543], "species_index": [79, 100, 102, 103, 104, 105, 106, 108, 153, 156, 162, 221], "orient": [79, 98, 107, 153, 157], "variant": [79, 107], "orientation_index": 79, "array_lik": [79, 97, 98, 233, 417, 432, 439, 571], "transform": [79, 97, 98, 109, 111, 147, 197, 207, 208, 209, 210, 211, 313], "matrix": [79, 96, 97, 98, 109, 111, 313, 521, 534, 554, 555, 559, 570, 573, 581], "t": [79, 97, 98, 279, 283, 353, 357, 409, 467], "relat": [79, 97, 98, 586], "superstructur": [79, 97, 98], "p": [79, 93, 96, 97, 98, 543, 585], "accord": [79, 97, 98, 276, 350, 408, 521, 585], "where": [79, 97, 98, 424, 425, 426, 430, 543, 571, 585], "matric": [79, 97, 98, 182, 183, 184, 185, 186, 521, 554], "column": [79, 96, 97, 98, 315, 325, 521, 524, 554, 555, 559, 566, 581], "get": [81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 111, 112, 114, 115, 116, 180, 231, 239, 240, 246, 265, 266, 271, 272, 319, 320, 326, 390, 391, 392, 427, 429, 459, 524, 528, 534], "integralsitecoordin": [83, 84, 85, 91], "cartesian": [89, 92, 172, 173], "r_": [89, 90, 92, 93], "cart": [89, 92], "belong": [89, 90], "frac": [90, 93, 417, 585], "rel": [93, 496, 500, 501, 504, 568, 585], "b_to_asym": 97, "longvector": [97, 98, 126, 127, 128, 129, 130, 131, 132, 135, 166, 181, 183, 184, 185, 186, 248, 254, 306, 330, 337, 382], "lower": 97, "than": [97, 148, 543, 585], "distinct": [97, 98, 153], "map": [97, 98], "onto": [97, 98], "via": [97, 98], "oper": [97, 98, 416, 554, 573], "allow": [97, 98, 99, 102, 145, 153, 157, 159, 161, 162, 218, 219, 220, 221, 222, 223, 224, 225, 227, 230, 231, 431, 504, 521, 568, 585, 586], "factor": [97, 416, 422], "species_list": 98, "unit_transformation_matrix_to_sup": 98, "unitl_to_asym": 98, "system": [98, 264, 268, 272, 279, 305, 342, 344, 350, 353, 354, 379, 391, 543, 554, 569, 585, 586], "fit": 98, "defin": [98, 208, 211, 252, 335, 543], "sub": 98, "u": 98, "t_": 98, "must": [98, 134, 350, 351, 387, 424, 425, 426, 430, 504, 543], "tile": 98, "tild": 98, "its": [99, 148], "occupi": [100, 108], "siteindexconvert": [101, 110], "speci": [102, 104, 105, 106, 107, 108, 153, 156, 157, 159, 165, 169, 184, 186, 196, 208, 211], "species_nam": 106, "superlattic": 109, "possibli": [110, 111], "make_with_custom_unitcel": 111, "unitcellindexconvert": 112, "intvector": [118, 119, 120, 121, 122, 123, 124, 167, 248, 254, 306, 330, 337, 382], "appear": [120, 128], "whose": [124, 132], "It": [124, 132, 145, 543, 585, 586], "error": [124, 132, 418, 585], "consist": 134, "linear_site_index": [134, 188, 235, 239, 241, 245, 248, 254, 306, 315, 319, 321, 330, 337, 382], "molvector": [140, 141, 142, 143, 144], "swap": [145, 147, 149, 152, 193, 195, 200, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231], "occswapcountmap": [145, 150, 203, 204, 205], "multipl": [145, 231, 493, 504], "occswap": [145, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 218, 220, 222, 223, 224, 225, 226, 227, 228, 229, 231], "cycl": 145, "occ": [145, 149, 150, 219, 223, 228, 230], "mani": [145, 150, 459, 479, 586], "multioccswap": [146, 147, 148, 149, 150, 151, 152, 219, 223, 228, 230], "arg1": [146, 155, 160, 195, 310, 417, 571], "represent": [146, 155, 160, 195], "multiswap": [146, 219, 223, 228], "so": [147, 148, 197, 199, 493, 554, 557, 573, 575], "mutat": [148, 175, 176, 192, 199, 350], "compar": 148, "less": [148, 543], "revers": [148, 218, 219, 220, 222, 223, 224, 225, 227, 230, 231], "jsonpars": [151, 158, 163, 201], "total": [152, 174, 175, 176, 192, 231, 236, 316, 364, 459, 571], "asymmetric_unit_index": [153, 156, 162], "pair": 153, "chosen": [153, 218, 219, 220, 225, 226, 227, 228, 229, 230, 543, 553], "distinguish": [153, 157], "molecular": [153, 157], "occcandid": [154, 155, 156, 157, 158, 159, 161, 175, 176, 178, 179, 190, 191, 193, 194, 198, 221], "candid": [155, 159, 161, 162, 163, 169, 175, 178, 190, 193, 194, 198, 221, 222, 224], "valid": [156, 196, 221], "instanc": [156, 159, 169, 196, 387, 432, 543, 567, 569, 585], "includingdistinct": 157, "store": [159, 165, 168, 202, 376, 458, 463, 478, 483, 505, 521, 539, 554, 560, 573, 577, 585, 586], "custom": [159, 431, 509, 543, 549, 585], "possibl": [159, 163, 231, 543], "occcandidatelist": [160, 161, 162, 163, 169, 177, 222, 224], "candidate_list": 160, "len": [161, 162, 554, 585], "match": [162, 424, 425, 426, 430, 504, 535, 538], "canon": [163, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 264, 267, 268, 272, 275, 276, 279, 280, 286, 301, 303, 305, 306, 307, 308, 309, 343, 344, 346, 349, 350, 353, 354, 360, 373, 379, 586], "semi": [163, 219, 220, 224, 227, 228, 229, 230, 231, 264, 267, 268, 272, 275, 276, 279, 280, 286, 301, 303, 305, 306, 307, 308, 309, 343, 344, 346, 349, 350, 353, 354, 360, 373, 379, 586], "grand": [163, 219, 220, 224, 227, 228, 229, 230, 231, 264, 267, 268, 272, 275, 276, 279, 280, 286, 301, 303, 305, 306, 307, 308, 309, 343, 344, 346, 349, 350, 353, 354, 360, 373, 379, 586], "modifi": [164, 166, 167, 276], "occev": [165, 166, 167, 168, 170, 225, 226, 227, 228, 229, 230, 302, 303, 307, 374, 375, 376, 408], "updat": [165, 168, 170, 206, 225, 226, 227, 228, 229, 230, 276, 311, 350, 374, 389, 408, 424, 425, 426, 430, 455, 586], "occtransformvector": [165, 168, 213, 214, 215, 216, 217], "being": [167, 207, 209, 210, 417, 424, 425, 426, 430, 567, 571], "occ_candidate_list": [169, 222, 224, 231], "update_speci": 169, "int32": [170, 187, 233, 235, 240, 242, 245, 319, 320, 322], "reflect": 170, "occur": 170, "access": [171, 177, 189, 521, 554, 557, 573, 575, 585], "id": [171, 189, 190, 191], "atom_s": [172, 173], "candidate_index": [176, 179, 191], "random_number_gener": [178, 179, 218, 219, 220, 225, 226, 227, 228, 229, 230, 303, 376, 409], "stochast": [178, 179, 543, 553], "choos": [178, 179, 218, 219, 220], "fill": 187, "tabl": 187, "info": 187, "variabl": [188, 238, 276, 292, 318, 336, 364, 394, 400, 402, 408, 586], "mol_id": 188, "location_index": [190, 191], "occswapcountmapp": 202, "itemsview": [203, 464, 484, 506, 540, 561, 578], "keysview": [204, 465, 485, 507, 541, 562, 579], "valuesview": [205, 466, 486, 508, 542, 563, 580], "occtransform": [207, 208, 209, 210, 211, 212, 213, 216, 217], "after": [211, 276, 350, 408, 417, 431, 441, 585], "occ_loc": [218, 219, 220, 225, 226, 227, 228, 229, 230], "canonical_swap": [218, 222, 225], "both": [218, 219, 220, 221, 222, 223, 224, 225, 227, 230, 231, 496], "forward": [218, 219, 220, 222, 223, 224, 225, 227, 230, 231], "semigrand_canonical_multiswap": [219, 230], "semigrand_canonical_swap": [220, 224, 227, 231], "form": [221, 586], "is_allow": 221, "make": [222, 223, 224, 416, 420, 585, 586], "single_swap": 223, "max_total_count": 223, "uniqu": 223, "maximum": [223, 431, 436, 450, 467, 469, 470, 471, 472, 565, 585], "up": 223, "propos": [225, 226, 227, 228, 229, 230, 276, 301, 302, 304, 307, 350, 373, 375, 377, 378, 408, 409, 515, 586], "interfac": [232, 586], "2d": [232, 233, 312, 323], "squar": [232, 247, 312, 327, 329], "Ising": [232, 233, 247, 248, 249, 250, 258, 264, 267, 301, 312, 313, 327, 328, 329, 330, 331, 332, 341, 342, 343, 373, 586], "model": [232, 233, 247, 248, 249, 250, 258, 264, 267, 301, 312, 313, 327, 328, 329, 330, 331, 332, 341, 343, 373, 571, 584], "ising_cpp": [233, 247, 248, 252, 254, 258, 264, 268, 279, 286, 301, 305, 311, 586], "fill_valu": [233, 313], "eigen": 233, "vectorxi": 233, "row": [233, 235, 243, 245, 528, 566], "col": [233, 235, 243, 245, 566], "support": [233, 313, 350], "isingconfigur": [234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 258, 260, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 341], "multi_index": [235, 245, 325], "unrol": [235, 245, 315, 325, 521, 522, 533, 535, 536, 554, 555, 559, 573], "unitcel": [237, 250, 256, 272, 309, 332, 390, 392], "equal": [237, 292, 317, 364, 394, 400, 402, 417, 424, 425, 426, 430, 543, 571, 585], "n_site": 237, "arrai": [240, 242, 246, 326, 417, 554, 557, 571, 575, 585], "const": 240, "new_occ": [241, 248, 254, 306, 321, 330, 337, 382], "2": [243, 247, 327, 329, 417, 431, 437, 510, 518, 543, 554, 555, 568, 571, 585], "dim": [246, 326], "multi_indexvalu": 246, "along": [246, 585], "dimens": [246, 323, 521, 554], "lattice_typ": [247, 327], "use_nlist": 247, "isingst": [247, 251, 252, 257, 259, 260, 261, 262, 263, 276, 304, 310, 327, 333, 334, 335, 340, 350, 351, 373, 377, 378, 386, 387], "energi": [247, 248, 249, 250, 251, 252, 264, 265, 268, 272, 273, 275, 278, 305, 306, 307, 308, 309, 327, 328, 330, 331, 332, 333, 334, 344, 347, 349, 351, 379, 381, 387, 390, 392, 409, 586], "implement": [247, 267, 327, 343, 379, 423, 585, 586], "could": [247, 327], "anisotrop": [247, 327], "bond": [247, 327], "interact": [247, 327, 328], "dimension": [247, 327, 329], "neighbor": [247, 586], "ahead": 247, "isingformationenergi": [248, 249, 250, 251, 264, 265, 266, 272, 328, 329, 330, 331, 332, 333, 334, 342, 347, 381], "_monte_ising_cpp": [248, 254], "__1": [248, 254, 540, 542], "long": [248, 254, 431, 479], "alloc": [248, 254], "due": [248, 254, 276, 306, 307, 330, 337, 350, 408, 409, 586], "flip": [248, 254, 303, 306, 330], "de": [248, 306, 307, 330, 571, 585], "per_supercel": [248, 306, 307, 330, 379, 409], "parametr": [252, 253, 254, 255, 256, 257, 264, 266, 268, 272, 274, 278, 279, 305, 335, 337, 338, 339, 340, 344, 348, 351, 353, 354, 379, 383, 387, 391, 586], "composit": [252, 253, 254, 255, 256, 257, 264, 266, 268, 272, 274, 278, 279, 305, 335, 336, 337, 338, 339, 340, 344, 348, 351, 353, 354, 379, 383, 387, 391, 554, 585, 586], "assum": [252, 335, 572], "ha": [252, 276, 335, 350, 408, 417, 554, 557, 565, 571, 573, 575, 585], "detail": [252, 335, 429, 585], "isingparamcomposit": [253, 254, 255, 256, 257, 264, 272, 336, 337, 338, 339, 340, 342, 348, 383], "independ": [253, 336], "size": [253, 322, 417, 521, 526, 554, 557, 571, 575, 582], "vec": [253, 254, 255, 256], "cdot": 254, "d": 254, "ndx": 254, "condit": [258, 276, 279, 310, 341, 348, 350, 353, 355, 356, 358, 359, 383, 386, 387, 571, 585, 586], "formation_energy_calcul": [264, 342, 349, 390], "param_composition_calcul": [264, 279, 342, 349, 353, 354, 391], "isingsystem": [265, 266, 268, 305, 344, 352, 379, 388], "parameter": [265, 266, 268, 278, 305, 344, 352, 379, 388], "semigrand_canon": [268, 279, 286, 301, 305, 311, 344, 353, 360, 373, 379, 389, 390, 391, 392, 586], "semigrandcanonicalcalcul": [269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 311, 345, 346, 347, 348, 349, 350, 351, 352, 586], "run": [269, 270, 275, 286, 288, 296, 345, 346, 347, 348, 349, 351, 360, 362, 363, 365, 368, 380, 381, 383, 387, 394, 396, 408, 428, 431, 448, 521, 585, 586], "sampler": [270, 369, 372, 404, 424, 425, 426, 430, 431, 442, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 537, 539, 540, 542, 554, 567, 569, 572, 573, 585], "completion_check": [270, 585], "n_pass": [270, 372, 407], "etc": [270, 431, 441, 521, 554, 555, 559, 573, 585], "jsonstatesamplingfunctionmap": [271, 276, 286, 394, 398, 573, 578, 579, 580], "statesamplingfunctionmap": [272, 276, 286, 350, 360, 371, 394, 406, 440, 503, 554, 561, 562, 563, 568, 573, 585], "param_composit": [272, 379, 391], "formation_energi": [272, 390, 568, 585], "potential_energi": [272, 392, 585], "semigrandcanonicalpotenti": [272, 306, 307, 308, 309, 310, 349, 380, 381, 382, 383, 384, 385, 386, 387, 388, 586], "sampling_funct": [276, 286, 350, 360, 394, 440, 503, 554, 568, 573, 585], "json_sampling_funct": [276, 286, 394, 573], "completion_check_param": [276, 286, 350, 360, 394, 503, 568], "completioncheckparam": [276, 286, 350, 360, 394, 423, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 454, 503, 568, 585], "event_gener": [276, 350], "semigrandcanonicaleventgener": [276, 302, 303, 304, 350, 374, 375, 376, 377, 378, 586], "sample_period": [276, 350, 408, 585], "method_log": [276, 311, 350, 389, 408, 424, 425, 426, 430, 585], "random_engin": [276, 350, 408], "write_status_f": [276, 350, 408], "callabl": [276, 350, 408, 416, 431, 543, 554, 567, 569, 573], "On": [276, 350], "obtain": [276, 350, 391], "control": [276, 350, 360, 394, 431, 543, 585, 586], "finish": [276, 350, 360, 394, 408], "accept": [276, 287, 291, 350, 363, 395, 399, 408, 409], "pass": [276, 286, 292, 294, 350, 360, 364, 366, 394, 400, 402, 408, 425, 426, 431, 446, 448, 455, 467, 470, 474, 515, 543, 550, 564, 565, 585], "step": [276, 286, 287, 291, 292, 293, 294, 295, 350, 360, 364, 366, 394, 395, 399, 400, 401, 402, 403, 408, 425, 426, 431, 446, 448, 455, 467, 470, 474, 515, 543, 550, 564, 565, 585], "write": [276, 311, 350, 389, 408, 424, 425, 426, 430, 585], "work": [276, 586], "10": [276, 313, 323, 350, 408, 431, 433, 543, 544, 552, 571], "minut": [276, 350, 408], "signatur": [276, 350, 408, 431, 432, 439, 543], "def": [276, 350, 408, 431, 543, 554, 573], "f": [276, 350, 408, 432, 439, 543, 554, 573, 585], "mc_calcul": [276, 311, 350, 389, 390, 391, 392, 554, 585], "argument": [276, 306, 307, 350, 554, 557, 573, 575], "been": [276, 350, 408, 449, 450, 554, 557, 564, 565, 573, 575], "taken": [276, 350, 408, 431, 441, 452, 493, 527, 543, 547, 564, 565, 572], "default_write_statu": [276, 350], "summari": [276, 350, 407, 408], "stdout": [276, 350, 408], "temperatur": [279, 353, 408, 409], "exchange_potenti": [279, 348, 353, 379, 383], "ensembl": [279, 353, 585, 586], "exchang": [279, 280, 348, 353, 354, 383], "potenti": [279, 280, 310, 348, 351, 353, 354, 383, 387, 392, 408, 409, 586], "conjug": [279, 348, 353, 354, 383], "under": [279, 353, 354, 586], "consider": [279, 353, 354], "semigrandcanonicalcondit": [280, 281, 282, 283, 284, 285, 300, 310, 345, 350, 354, 355, 356, 357, 358, 359, 380, 386, 387, 586], "n_steps_per_pass": [286, 360, 372, 394, 407], "metropoli": [286, 346, 360, 394, 408, 409, 515, 585, 586], "semigrandcanonicaldata": [287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 346, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372], "checker": [288, 362, 396], "reject": [293, 295, 365, 401, 403, 409], "dure": [296, 345, 347, 348, 349, 350, 351, 362, 363, 365, 368, 380, 381, 383, 387, 396], "weight": [297, 369, 404, 407, 416, 417, 420, 422, 424, 425, 426, 430, 567, 569, 571, 585], "remain": [297, 369, 404, 585], "empti": [297, 369, 404], "unweight": [297, 369, 404, 585], "compat": [297, 369], "occ_ev": [302, 303, 307, 374, 376], "sign": 303, "occ_event_delta_per_supercel": 306, "occ_delta_per_supercel": 307, "screen": [311, 389], "ani": [311, 320, 322, 337, 338, 339, 389, 390, 391, 392, 450, 467, 521, 522, 554, 565, 586], "pure": 312, "ising_pi": [313, 327, 335, 341, 342, 344, 353, 360, 373, 379, 389, 390, 391, 392, 586], "tupl": [313, 315, 323, 325], "simpl": 313, "off": 313, "diagon": 313, "major": [315, 325, 521, 554, 555, 559, 581], "n_variable_sit": 317, "read": [320, 585], "view": 320, "10x10": 323, "isotrop": 327, "extend": 327, "also": [335, 340, 376, 543, 585, 586], "set_stat": 335, "expect": [348, 383, 521, 554, 586], "vector_valu": [348, 383], "usabl": [351, 387], "completioncheck": [362, 396, 424, 425, 426, 427, 428, 429, 430, 585], "samplermap": [370, 405, 424, 425, 426, 430, 535, 538, 540, 541, 542, 554, 569, 572, 573, 585], "exclud": [372, 569], "completion_check_result": [372, 407], "completioncheckresult": [372, 407, 429, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457], "n_accept": [372, 407], "n_reject": [372, 407], "acceptance_r": [372, 407], "rejection_r": [372, 407], "mcevent": [374, 376], "e_sgc": 379, "e_form": 379, "n_unitcel": 379, "per_unitcel": [390, 391, 392], "formation_energy_f": 390, "statesamplingfunct": [390, 391, 392, 555, 556, 557, 558, 559, 560, 561, 563, 573], "n_independent_composit": 391, "param_composition_f": 391, "potential_energy_f": 392, "jsonstatesamplingfunct": [394, 574, 575, 576, 577, 578, 580], "basic": [394, 408, 411, 416], "basicoccupationmetropolisdata": [395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408], "rate": [395, 403, 543, 553], "jsonsamplermap": [397, 573], "potential_occ_delta_per_supercell_f": 408, "propose_event_f": 408, "apply_event_f": 408, "algorithm": [408, 571, 585, 586], "rng": 408, "delta_potential_energi": 409, "beta": 409, "criteria": [409, 442, 461, 481, 535], "els": [409, 431, 441, 564, 565], "random_r": 409, "math": [409, 543, 544], "exp": 409, "reciproc": 409, "eta": 409, "k_b": 409, "basicstatist": [412, 413, 414, 415, 416, 417, 421, 431, 432, 464, 466, 567, 569], "absolut": [412, 414, 496, 497, 498, 500, 504, 568, 585], "precis": [412, 414, 416, 417, 422, 431, 442, 460, 480, 488, 489, 496, 497, 498, 500, 501, 503, 504, 567, 568, 569, 571, 584], "mean": [412, 414, 416, 417, 422, 488, 489, 497, 498, 500, 543, 553, 571, 585], "confid": [416, 585], "95": 416, "weighted_observations_method": [416, 417], "n_resampl": 416, "10000": [416, 431, 436, 441], "seri": [416, 543, 585], "observ": [416, 417, 420, 422, 424, 425, 426, 430, 431, 432, 439, 521, 567, 569, 571, 585], "special": [416, 586], "call": [416, 504, 543, 554, 573, 585], "estim": [416, 417, 420, 422, 585], "fold": [416, 417, 585, 586], "wai": [416, 417, 585, 586], "varianc": [416, 422, 585], "directli": [416, 422, 532, 585], "autocorrel": [416, 422], "rho": [416, 417, 422, 585], "resampl": [416, 417, 420, 422, 571, 585], "autocovari": [416, 420, 585], "basicstatisticscalcul": [417, 418, 419, 420, 421, 422, 431, 432, 567, 585], "rang": [417, 571, 585], "depend": [417, 467, 585], "case": [417, 424, 425, 426, 430, 571], "No": 417, "hat": [417, 585], "gamma": [417, 585], "_k": [417, 585], "sum": [417, 585], "_i": 417, "x_i": 417, "bar": [417, 585], "x_": [417, 585], "gamma_k": [417, 585], "gamma_0": [417, 585], "sigma": [417, 585], "1d": [417, 571], "sample_weight": [417, 424, 425, 426, 430, 431, 432, 439, 567, 569, 571, 585], "associ": [417, 424, 425, 426, 430, 571, 585], "treat": [417, 424, 425, 426, 430, 571], "stat": 417, "interv": [418, 543, 585], "param": [423, 448, 455, 585], "count": [424, 425, 426, 448, 455, 543, 564, 565, 585], "cutoff": [424, 425, 430, 431, 438, 449, 450, 564, 565, 585], "contain": [424, 425, 426, 430, 567, 569, 571, 585], "obsserv": [424, 425, 426], "otherwis": [424, 425, 426, 430, 460, 480], "elaps": [424, 425, 426, 430, 431, 444, 448, 455, 467, 469, 473, 564, 565, 585], "clock": [424, 425, 426, 430, 444, 564, 565, 585], "is_complet": [424, 425, 426, 430], "next": [428, 448, 543], "requested_precis": [431, 439, 503, 567, 568, 569, 571], "requestedprecisionmap": [431, 442, 506, 507, 508, 567, 569], "cutoff_param": [431, 564, 565, 585], "cutoffcheckparam": [431, 438, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 564, 565], "calc_statistics_f": [431, 567, 569, 585], "equilibration_check_f": [431, 585], "requestedprecis": [431, 439, 442, 497, 498, 499, 500, 501, 502, 505, 506, 508, 567, 571], "individualequilibrationresult": [431, 439, 483, 493, 494, 495, 571, 585], "log_spac": 431, "check_begin": [431, 441], "check_period": [431, 441], "check_bas": [431, 441], "check_shift": [431, 441], "check_period_max": [431, 441], "request": [431, 442, 459, 460, 479, 480, 488, 489, 493, 496, 497, 500, 503, 504, 543, 567, 568, 569, 571, 585], "forc": [431, 585], "keep": [431, 585], "meet": 431, "certain": 431, "minimum": [431, 449, 467, 473, 474, 475, 476, 564, 585], "clocktim": [431, 448, 455, 467, 469, 473, 564, 565, 585], "stop": [431, 467, 585], "met": [431, 449, 450, 467, 564, 565, 571, 585], "reach": [431, 585], "limit": [431, 585], "prevent": 431, "too": 431, "soon": 431, "default_equilibration_check": [431, 439, 585], "logarithm": [431, 433, 436, 437, 509, 543, 549], "th": [431, 441, 543, 585], "round": [431, 441, 543], "howev": [431, 441], "subsequ": [431, 441], "100": [431, 434, 435, 441, 585], "200": [431, 441], "300": [431, 441], "1000": [431, 441, 521, 585], "20000": [431, 441], "30000": [431, 441], "effect": 431, "earliest": [431, 434], "shift": [431, 437, 543], "expon": [431, 437], "logirithm": 441, "completiong": 441, "samplercompon": [442, 463, 464, 465, 483, 484, 485, 487, 492, 505, 506, 507, 536, 537, 538, 567, 569], "convergencecheckresult": [445, 459, 460, 461, 462, 569], "equilibrationcheckresult": [447, 479, 480, 481, 482], "n_sampl": [448, 455, 523, 534, 564, 565], "reset": [448, 455], "outcom": 451, "conver": 453, "wa": 453, "most": [455, 586], "n_samples_at_convergence_check": 455, "equilibration_check_result": 455, "convergence_check_result": 455, "were": [459, 460, 479, 480], "requir": [460, 480, 497, 498, 500, 530, 585, 586], "find": [460, 480], "individualconvergenceresult": [463, 488, 489, 490, 491, 567], "convergenceresultmap": [464, 465, 466], "_monte_sampl": [464, 465, 466, 484, 485, 486, 506, 507, 508, 540, 541, 542, 543, 561, 562, 563, 578, 579, 580], "individualconvergencecheckresult": [464, 466], "min_count": 467, "max_count": [467, 585], "min_tim": 467, "max_tim": 467, "min_sampl": 467, "max_sampl": 467, "min_clocktim": 467, "max_clocktim": 467, "don": 467, "took": 479, "equilibrationresultmap": [484, 485, 486], "individualequilibrationcheckresult": [484, 486], "involv": 493, "quantiti": [493, 503, 504, 521, 533, 535, 536, 538, 539, 551, 554, 555, 558, 559, 560, 568, 570, 573, 576, 577, 585], "ab": [496, 497, 498, 500, 504, 568, 571, 585], "p_": [496, 497, 498, 500, 501], "calc": [497, 500], "requst": 501, "_sampl": [503, 568], "dictionari": [503, 568], "requestedprecisionconstructor": [504, 568], "component_nam": [504, 521, 535, 554, 566, 568, 570, 585], "component_index": [504, 524, 535, 537, 554, 568, 573], "By": [504, 568], "To": 504, "chain": 504, "enum": [509, 515], "linearli": 509, "import": [509, 515, 554, 573, 585], "sample_method": [510, 511, 512, 513, 514, 543, 544, 545, 548, 552], "by_pass": [515, 543, 550], "degre": [515, 543], "freedom": [515, 543], "by_step": 515, "kmc": 515, "by_tim": 515, "sample_mod": [516, 517, 518, 519, 520, 543], "capacity_incr": [521, 530], "help": [521, 586], "re": [521, 585, 586], "underli": 521, "scalar": [521, 554, 559, 570, 573, 582], "approach": [521, 554, 585, 586], "order": [521, 554, 555, 586], "done": [521, 554], "scalar_as_vector": [521, 554], "matrix_as_vector": [521, 554], "length": 521, "give": [521, 567, 569, 585], "element": [521, 571, 585], "much": [521, 571, 585], "resiz": [521, 531], "whenev": 521, "out": [521, 569], "preserv": 523, "n_compon": [523, 534], "sample_index": 528, "capac": [529, 530, 531], "push_back": 530, "sample_capac": 531, "conserv": 531, "flag": 534, "f_contigu": 534, "sampler_nam": [535, 543], "shared_ptr": [540, 542], "2589254117941673": 543, "custom_sample_at": 543, "stochastic_sample_period": 543, "do_sample_trajectori": 543, "do_sample_tim": 543, "fixtur": 543, "three": [543, 571, 585], "either": [543, 571, 585], "understand": 543, "dynam": 543, "especi": 543, "occasion": 543, "take": [543, 546, 585], "instead": 543, "determinist": 543, "highli": 543, "correl": 543, "probabilist": 543, "ln": 543, "greater": 543, "probabl": 543, "until": [543, 585], "poisson": 543, "process": 543, "r": 543, "pow": [543, 544], "samplingparam": [544, 545, 546, 547, 548, 549, 550, 551, 552, 553], "descript": [554, 555, 573], "exampl": [554, 567, 568, 569, 573, 584, 586], "clexmont": [554, 573, 586], "semigrandcanon": [554, 573], "setup": [554, 573], "composition_calcul": 554, "get_composition_calcul": 554, "mol_composition_f": 554, "mean_num_each_compon": 554, "get_occup": 554, "mol_composit": 554, "typic": [554, 555, 557, 573, 575], "lambda": [554, 557, 573, 575], "pointer": [554, 557, 573, 575], "exist": [554, 573], "__call__": [554, 573], "held": [554, 573], "proper": [554, 557, 575], "mg": [554, 555], "va": [554, 555], "o": [554, 555], "evalu": [557, 575, 585], "n_row": 566, "n_col": 566, "n_samples_for_statist": 567, "tail": 567, "fucntion": [567, 569], "helper": 568, "set_precis": 568, "001": 568, "parametric_composit": [568, 585], "corr": 568, "rpc": 568, "n_samples_for_equilibr": [569, 571, 585], "becaus": [569, 585], "equilibrium": 569, "arg2": 571, "wall": [571, 585], "asta": [571, 585], "mater": 571, "sci": 571, "eng": 571, "2002": 571, "521": 571, "538": 571, "partit": [571, 585], "equilibri": [571, 585], "stage": [571, 585], "start1": [571, 585], "start2": [571, 585], "start": 571, "within": [571, 585], "consid": [571, 585], "approxim": [571, 585], "desir": [571, 585], "precsion": [571, 585], "mean1": [571, 585], "mean2": [571, 585], "prec": [571, 585], "addition": [571, 585], "need": [571, 585, 586], "ensur": [571, 585], "side": [571, 585], "is_equilibr": [571, 585], "undefin": [571, 585], "weighted_observ": [571, 585], "w": [571, 585], "sum_i": 571, "weight_factor": [571, 585], "configuration_f": 573, "to_dict": 573, "configuration_json_f": 573, "json_sampl": 573, "easili": 573, "minimium": 585, "pars": 585, "random_number_engin": 585, "user": 585, "cluster": [585, 586], "expans": [585, 586], "ax": [585, 586], "composition_ax": 585, "formation_energy_clexul": 585, "formation_energy_coeff": 585, "systemtyp": 585, "formation_energy_clex_clexul": 585, "formation_energy_clex_coeff": 585, "would": 585, "montecarlocalculatortyp": 585, "abl": 585, "_function": 585, "make_formation_energy_f": 585, "make_potential_energy_f": 585, "make_parametric_composition_f": 585, "_f": 585, "quantity_nam": 585, "messag": 585, "path_to_logfil": 585, "n_step": 585, "i_sample_period": 585, "while": 585, "count_check": 585, "slow": 585, "down": 585, "excess": 585, "actual": 585, "longer": 585, "6e2": 585, "least": 585, "hr": 585, "averag": 585, "langl": 585, "rangl": 585, "approx": 585, "sum_l": 585, "x_l": 585, "normal": 585, "zero": 585, "larg": 585, "central": 585, "theorem": 585, "mathcal": 585, "stationari": 585, "lag": 585, "x_j": 585, "infty_": 585, "mathrm": 585, "cov": 585, "drawn": 585, "therefor": 585, "decai": 585, "infinit": 585, "introduc": 585, "discard": 585, "These": 585, "altern": 585, "through": 585, "overal": 585, "two": [585, 586], "search": 585, "smallest": 585, "_0": 585, "le": 585, "Then": 585, "regular": 585, "w_l": 585, "var": 585, "pm": 585, "sqrt": 585, "erf": 585, "analysi": 586, "test": 586, "effici": 586, "extens": 586, "written": 586, "frequent": 586, "primarili": 586, "namespac": 586, "throughout": 586, "discret": 586, "roughli": 586, "divid": 586, "microst": 586, "tutori": 586, "purpos": 586, "handl": 586, "basi": 586, "coeffici": 586, "manag": 586, "clusterexpans": 586, "compositioncalcul": 586, "compositionconvert": 586, "orderparamet": 586, "samplingfixtur": 586, "runmanag": 586, "semigrand": 586, "nfold": 586, "flex": 586, "flexibl": 586, "addit": 586, "term": 586, "enabl": 586, "umbrella": 586, "quasi": 586, "sq": 586}, "objects": {"libcasm": [[3, 0, 0, "-", "monte"]], "libcasm.monte": [[4, 1, 1, "", "MethodLog"], [37, 1, 1, "", "RandomNumberEngine"], [42, 1, 1, "", "RandomNumberGenerator"], [46, 1, 1, "", "ValueMap"], [55, 0, 0, "-", "events"], [232, 0, 0, "-", "ising_cpp"], [312, 0, 0, "-", "ising_py"], [393, 0, 0, "-", "methods"], [410, 0, 0, "-", "sampling"]], "libcasm.monte.MethodLog": [[5, 2, 1, "", "begin_lap"], [6, 2, 1, "", "begin_section_print_always"], [7, 2, 1, "", "begin_section_print_if_debug"], [8, 2, 1, "", "begin_section_print_if_quiet"], [9, 2, 1, "", "begin_section_print_if_standard"], [10, 2, 1, "", "begin_section_print_if_verbose"], [11, 2, 1, "", "decrease_indent"], [12, 2, 1, "", "end_section"], [13, 2, 1, "", "hide_clock"], [14, 2, 1, "", "increase_indent"], [15, 2, 1, "", "indent_str"], [16, 2, 1, "", "lap_time"], [17, 2, 1, "", "log_frequency"], [18, 2, 1, "", "logfile_path"], [19, 2, 1, "", "paragraph"], [20, 2, 1, "", "paragraph_justification"], [21, 2, 1, "", "paragraph_width"], [22, 2, 1, "", "print"], [23, 2, 1, "", "reset"], [24, 2, 1, "", "restart_clock"], [25, 2, 1, "", "section"], [26, 2, 1, "", "set_debug"], [27, 2, 1, "", "set_indent_space"], [28, 2, 1, "", "set_initial_indent_space"], [29, 2, 1, "", "set_paragraph_justification"], [30, 2, 1, "", "set_paragraph_width"], [31, 2, 1, "", "set_quiet"], [32, 2, 1, "", "set_standard"], [33, 2, 1, "", "set_verbose"], [34, 2, 1, "", "show_clock"], [35, 2, 1, "", "time_s"], [36, 2, 1, "", "verbatim"]], "libcasm.monte.RandomNumberEngine": [[38, 2, 1, "", "dump"], [39, 2, 1, "", "load"], [40, 2, 1, "", "seed"], [41, 2, 1, "", "seed_seq"]], "libcasm.monte.RandomNumberGenerator": [[43, 2, 1, "", "engine"], [44, 2, 1, "", "random_int"], [45, 2, 1, "", "random_real"]], "libcasm.monte.ValueMap": [[47, 3, 1, "", "boolean_values"], [48, 2, 1, "", "from_dict"], [49, 2, 1, "", "is_mismatched"], [50, 2, 1, "", "make_incremented_values"], [51, 3, 1, "", "matrix_values"], [52, 3, 1, "", "scalar_values"], [53, 2, 1, "", "to_dict"], [54, 3, 1, "", "vector_values"]], "libcasm.monte.events": [[56, 1, 1, "", "Atom"], [59, 1, 1, "", "AtomLocation"], [63, 1, 1, "", "AtomTraj"], [67, 1, 1, "", "AtomTrajVector"], [73, 1, 1, "", "AtomVector"], [79, 1, 1, "", "Conversions"], [117, 1, 1, "", "IntVector"], [125, 1, 1, "", "LongVector"], [133, 1, 1, "", "Mol"], [139, 1, 1, "", "MolVector"], [145, 1, 1, "", "MultiOccSwap"], [153, 1, 1, "", "OccCandidate"], [159, 1, 1, "", "OccCandidateList"], [164, 1, 1, "", "OccEvent"], [169, 1, 1, "", "OccLocation"], [193, 1, 1, "", "OccSwap"], [202, 1, 1, "", "OccSwapCountMap"], [206, 1, 1, "", "OccTransform"], [212, 1, 1, "", "OccTransformVector"], [218, 4, 1, "", "choose_canonical_swap"], [219, 4, 1, "", "choose_semigrand_canonical_multiswap"], [220, 4, 1, "", "choose_semigrand_canonical_swap"], [221, 4, 1, "", "is_allowed_canonical_swap"], [222, 4, 1, "", "make_canonical_swaps"], [223, 4, 1, "", "make_multiswaps"], [224, 4, 1, "", "make_semigrand_canonical_swaps"], [225, 4, 1, "", "propose_canonical_event"], [226, 4, 1, "", "propose_canonical_event_from_swap"], [227, 4, 1, "", "propose_semigrand_canonical_event"], [228, 4, 1, "", "propose_semigrand_canonical_event_from_multiswap"], [229, 4, 1, "", "propose_semigrand_canonical_event_from_swap"], [230, 4, 1, "", "propose_semigrand_canonical_multiswap_event"], [231, 4, 1, "", "swaps_allowed_per_unitcell"]], "libcasm.monte.events.Atom": [[57, 3, 1, "", "n_jumps"], [58, 3, 1, "", "translation"]], "libcasm.monte.events.AtomLocation": [[60, 3, 1, "", "linear_site_index"], [61, 3, 1, "", "mol_comp"], [62, 3, 1, "", "mol_id"]], "libcasm.monte.events.AtomTraj": [[64, 3, 1, "", "delta_ijk"], [65, 3, 1, "", "from"], [66, 3, 1, "", "to"]], "libcasm.monte.events.AtomTrajVector": [[68, 2, 1, "", "append"], [69, 2, 1, "", "clear"], [70, 2, 1, "", "extend"], [71, 2, 1, "", "insert"], [72, 2, 1, "", "pop"]], "libcasm.monte.events.AtomVector": [[74, 2, 1, "", "append"], [75, 2, 1, "", "clear"], [76, 2, 1, "", "extend"], [77, 2, 1, "", "insert"], [78, 2, 1, "", "pop"]], "libcasm.monte.events.Conversions": [[80, 2, 1, "", "asym_size"], [81, 2, 1, "", "asym_to_b"], [82, 2, 1, "", "asym_to_unitl"], [83, 2, 1, "", "bijk_to_asym"], [84, 2, 1, "", "bijk_to_l"], [85, 2, 1, "", "bijk_to_unitl"], [86, 2, 1, "", "l_size"], [87, 2, 1, "", "l_to_asym"], [88, 2, 1, "", "l_to_b"], [89, 2, 1, "", "l_to_basis_cart"], [90, 2, 1, "", "l_to_basis_frac"], [91, 2, 1, "", "l_to_bijk"], [92, 2, 1, "", "l_to_cart"], [93, 2, 1, "", "l_to_frac"], [94, 2, 1, "", "l_to_ijk"], [95, 2, 1, "", "l_to_unitl"], [96, 2, 1, "", "lat_column_mat"], [97, 2, 1, "", "make_with_custom_asym"], [98, 2, 1, "", "make_with_custom_unitcell"], [99, 2, 1, "", "occ_size"], [100, 2, 1, "", "occ_to_species_index"], [101, 2, 1, "", "site_index_converter"], [102, 2, 1, "", "species_allowed"], [103, 2, 1, "", "species_index_to_atoms_size"], [104, 2, 1, "", "species_index_to_name"], [105, 2, 1, "", "species_index_to_occupant"], [106, 2, 1, "", "species_name_to_index"], [107, 2, 1, "", "species_size"], [108, 2, 1, "", "species_to_occ_index"], [109, 2, 1, "", "transformation_matrix_to_super"], [110, 2, 1, "", "unit_site_index_converter"], [111, 2, 1, "", "unit_transformation_matrix_to_super"], [112, 2, 1, "", "unitcell_index_converter"], [113, 2, 1, "", "unitl_size"], [114, 2, 1, "", "unitl_to_asym"], [115, 2, 1, "", "unitl_to_b"], [116, 2, 1, "", "unitl_to_bijk"]], "libcasm.monte.events.IntVector": [[118, 2, 1, "", "append"], [119, 2, 1, "", "clear"], [120, 2, 1, "", "count"], [121, 2, 1, "", "extend"], [122, 2, 1, "", "insert"], [123, 2, 1, "", "pop"], [124, 2, 1, "", "remove"]], "libcasm.monte.events.LongVector": [[126, 2, 1, "", "append"], [127, 2, 1, "", "clear"], [128, 2, 1, "", "count"], [129, 2, 1, "", "extend"], [130, 2, 1, "", "insert"], [131, 2, 1, "", "pop"], [132, 2, 1, "", "remove"]], "libcasm.monte.events.Mol": [[134, 3, 1, "", "asymmetric_unit_index"], [135, 3, 1, "", "component_id"], [136, 3, 1, "", "id"], [137, 3, 1, "", "linear_site_index"], [138, 3, 1, "", "mol_location_index"]], "libcasm.monte.events.MolVector": [[140, 2, 1, "", "append"], [141, 2, 1, "", "clear"], [142, 2, 1, "", "extend"], [143, 2, 1, "", "insert"], [144, 2, 1, "", "pop"]], "libcasm.monte.events.MultiOccSwap": [[146, 2, 1, "", "from_dict"], [147, 2, 1, "", "reverse"], [148, 2, 1, "", "sort"], [149, 2, 1, "", "sorted"], [150, 3, 1, "", "swaps"], [151, 2, 1, "", "to_dict"], [152, 3, 1, "", "total_count"]], "libcasm.monte.events.OccCandidate": [[154, 3, 1, "", "asymmetric_unit_index"], [155, 2, 1, "", "from_dict"], [156, 2, 1, "", "is_valid"], [157, 3, 1, "", "species_index"], [158, 2, 1, "", "to_dict"]], "libcasm.monte.events.OccCandidateList": [[160, 2, 1, "", "from_dict"], [161, 2, 1, "", "index"], [162, 2, 1, "", "matching_index"], [163, 2, 1, "", "to_dict"]], "libcasm.monte.events.OccEvent": [[165, 3, 1, "", "atom_traj"], [166, 3, 1, "", "linear_site_index"], [167, 3, 1, "", "new_occ"], [168, 3, 1, "", "occ_transform"]], "libcasm.monte.events.OccLocation": [[170, 2, 1, "", "apply"], [171, 2, 1, "", "atom"], [172, 2, 1, "", "atom_positions_cart"], [173, 2, 1, "", "atom_positions_cart_within"], [174, 2, 1, "", "atom_size"], [175, 2, 1, "", "cand_size"], [176, 2, 1, "", "cand_size_by_candidate_index"], [177, 2, 1, "", "candidate_list"], [178, 2, 1, "", "choose_mol"], [179, 2, 1, "", "choose_mol_by_candidate_index"], [180, 2, 1, "", "convert"], [181, 2, 1, "", "current_atom_n_jumps"], [182, 2, 1, "", "current_atom_names"], [183, 2, 1, "", "current_atom_position_index"], [184, 2, 1, "", "current_atom_species_index"], [185, 2, 1, "", "initial_atom_position_index"], [186, 2, 1, "", "initial_atom_species_index"], [187, 2, 1, "", "initialize"], [188, 2, 1, "", "linear_site_index_to_mol_id"], [189, 2, 1, "", "mol"], [190, 2, 1, "", "mol_id"], [191, 2, 1, "", "mol_id_by_candidate_index"], [192, 2, 1, "", "mol_size"]], "libcasm.monte.events.OccSwap": [[194, 3, 1, "", "first"], [195, 2, 1, "", "from_dict"], [196, 2, 1, "", "is_valid"], [197, 2, 1, "", "reverse"], [198, 3, 1, "", "second"], [199, 2, 1, "", "sort"], [200, 2, 1, "", "sorted"], [201, 2, 1, "", "to_dict"]], "libcasm.monte.events.OccSwapCountMap": [[203, 2, 1, "", "items"], [204, 2, 1, "", "keys"], [205, 2, 1, "", "values"]], "libcasm.monte.events.OccTransform": [[207, 3, 1, "", "asym"], [208, 3, 1, "", "from_species"], [209, 3, 1, "", "linear_site_index"], [210, 3, 1, "", "mol_id"], [211, 3, 1, "", "to_species"]], "libcasm.monte.events.OccTransformVector": [[213, 2, 1, "", "append"], [214, 2, 1, "", "clear"], [215, 2, 1, "", "extend"], [216, 2, 1, "", "insert"], [217, 2, 1, "", "pop"]], "libcasm.monte.ising_cpp": [[233, 1, 1, "", "IsingConfiguration"], [247, 1, 1, "", "IsingFormationEnergy"], [252, 1, 1, "", "IsingParamComposition"], [258, 1, 1, "", "IsingState"], [264, 1, 1, "", "IsingSystem"], [267, 0, 0, "-", "semigrand_canonical"]], "libcasm.monte.ising_cpp.IsingConfiguration": [[234, 2, 1, "", "from_dict"], [235, 2, 1, "", "from_linear_site_index"], [236, 3, 1, "", "n_sites"], [237, 3, 1, "", "n_unitcells"], [238, 3, 1, "", "n_variable_sites"], [239, 2, 1, "", "occ"], [240, 2, 1, "", "occupation"], [241, 2, 1, "", "set_occ"], [242, 2, 1, "", "set_occupation"], [243, 3, 1, "", "shape"], [244, 2, 1, "", "to_dict"], [245, 2, 1, "", "to_linear_site_index"], [246, 2, 1, "", "within"]], "libcasm.monte.ising_cpp.IsingFormationEnergy": [[248, 2, 1, "", "occ_delta_per_supercell"], [249, 2, 1, "", "per_supercell"], [250, 2, 1, "", "per_unitcell"], [251, 2, 1, "", "set_state"]], "libcasm.monte.ising_cpp.IsingParamComposition": [[253, 2, 1, "", "n_independent_compositions"], [254, 2, 1, "", "occ_delta_per_supercell"], [255, 2, 1, "", "per_supercell"], [256, 2, 1, "", "per_unitcell"], [257, 2, 1, "", "set_state"]], "libcasm.monte.ising_cpp.IsingState": [[259, 3, 1, "", "conditions"], [260, 3, 1, "", "configuration"], [261, 2, 1, "", "from_dict"], [262, 3, 1, "", "properties"], [263, 2, 1, "", "to_dict"]], "libcasm.monte.ising_cpp.IsingSystem": [[265, 3, 1, "", "formation_energy_calculator"], [266, 3, 1, "", "param_composition_calculator"]], "libcasm.monte.ising_cpp.semigrand_canonical": [[268, 1, 1, "", "SemiGrandCanonicalCalculator"], [279, 1, 1, "", "SemiGrandCanonicalConditions"], [286, 1, 1, "", "SemiGrandCanonicalData"], [301, 1, 1, "", "SemiGrandCanonicalEventGenerator"], [305, 1, 1, "", "SemiGrandCanonicalPotential"], [311, 4, 1, "", "default_write_status"]], "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator": [[269, 3, 1, "", "conditions"], [270, 3, 1, "", "data"], [271, 2, 1, "", "default_json_sampling_functions"], [272, 2, 1, "", "default_sampling_functions"], [273, 3, 1, "", "formation_energy_calculator"], [274, 3, 1, "", "param_composition_calculator"], [275, 3, 1, "", "potential"], [276, 2, 1, "", "run"], [277, 3, 1, "", "state"], [278, 3, 1, "", "system"]], "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions": [[280, 3, 1, "", "exchange_potential"], [281, 2, 1, "", "from_dict"], [282, 2, 1, "", "from_values"], [283, 3, 1, "", "temperature"], [284, 2, 1, "", "to_dict"], [285, 2, 1, "", "to_values"]], "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData": [[287, 2, 1, "", "acceptance_rate"], [288, 3, 1, "", "completion_check"], [289, 3, 1, "", "json_samplers"], [290, 3, 1, "", "json_sampling_functions"], [291, 3, 1, "", "n_accept"], [292, 3, 1, "", "n_pass"], [293, 3, 1, "", "n_reject"], [294, 3, 1, "", "n_steps_per_pass"], [295, 2, 1, "", "rejection_rate"], [296, 2, 1, "", "reset"], [297, 3, 1, "", "sample_weight"], [298, 3, 1, "", "samplers"], [299, 3, 1, "", "sampling_functions"], [300, 2, 1, "", "to_dict"]], "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalEventGenerator": [[302, 2, 1, "", "apply"], [303, 2, 1, "", "propose"], [304, 2, 1, "", "set_state"]], "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential": [[306, 2, 1, "", "occ_delta_per_supercell"], [307, 2, 1, "", "occ_event_delta_per_supercell"], [308, 2, 1, "", "per_supercell"], [309, 2, 1, "", "per_unitcell"], [310, 2, 1, "", "set_state"]], "libcasm.monte.ising_py": [[313, 1, 1, "", "IsingConfiguration"], [327, 1, 1, "", "IsingFormationEnergy"], [335, 1, 1, "", "IsingParamComposition"], [341, 1, 1, "", "IsingState"], [342, 1, 1, "", "IsingSystem"], [343, 0, 0, "-", "semigrand_canonical"]], "libcasm.monte.ising_py.IsingConfiguration": [[314, 2, 1, "", "from_dict"], [315, 2, 1, "", "from_linear_site_index"], [316, 5, 1, "", "n_sites"], [317, 5, 1, "", "n_unitcells"], [318, 5, 1, "", "n_variable_sites"], [319, 2, 1, "", "occ"], [320, 2, 1, "", "occupation"], [321, 2, 1, "", "set_occ"], [322, 2, 1, "", "set_occupation"], [323, 5, 1, "", "shape"], [324, 2, 1, "", "to_dict"], [325, 2, 1, "", "to_linear_site_index"], [326, 2, 1, "", "within"]], "libcasm.monte.ising_py.IsingFormationEnergy": [[328, 5, 1, "", "J"], [329, 5, 1, "", "lattice_type"], [330, 2, 1, "", "occ_delta_per_supercell"], [331, 2, 1, "", "per_supercell"], [332, 2, 1, "", "per_unitcell"], [333, 2, 1, "", "set_state"], [334, 5, 1, "", "state"]], "libcasm.monte.ising_py.IsingParamComposition": [[336, 2, 1, "", "n_independent_compositions"], [337, 2, 1, "", "occ_delta_per_supercell"], [338, 2, 1, "", "per_supercell"], [339, 2, 1, "", "per_unitcell"], [340, 2, 1, "", "set_state"]], "libcasm.monte.ising_py.IsingState": [[341, 5, 1, "", "conditions"], [341, 5, 1, "", "configuration"], [341, 5, 1, "", "properties"]], "libcasm.monte.ising_py.semigrand_canonical": [[344, 1, 1, "", "SemiGrandCanonicalCalculator"], [353, 1, 1, "", "SemiGrandCanonicalConditions"], [360, 1, 1, "", "SemiGrandCanonicalData"], [373, 1, 1, "", "SemiGrandCanonicalEventGenerator"], [379, 1, 1, "", "SemiGrandCanonicalPotential"], [389, 4, 1, "", "default_write_status"], [390, 4, 1, "", "make_formation_energy_f"], [391, 4, 1, "", "make_param_composition_f"], [392, 4, 1, "", "make_potential_energy_f"]], "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator": [[345, 5, 1, "", "conditions"], [346, 5, 1, "", "data"], [347, 5, 1, "", "formation_energy_calculator"], [348, 5, 1, "", "param_composition_calculator"], [349, 5, 1, "", "potential"], [350, 2, 1, "", "run"], [351, 5, 1, "", "state"], [352, 5, 1, "", "system"]], "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions": [[354, 5, 1, "", "exchange_potential"], [355, 2, 1, "", "from_dict"], [356, 2, 1, "", "from_values"], [357, 5, 1, "", "temperature"], [358, 2, 1, "", "to_dict"], [359, 2, 1, "", "to_values"]], "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData": [[361, 2, 1, "", "acceptance_rate"], [362, 5, 1, "", "completion_check"], [363, 5, 1, "", "n_accept"], [364, 5, 1, "", "n_pass"], [365, 5, 1, "", "n_reject"], [366, 5, 1, "", "n_steps_per_pass"], [367, 2, 1, "", "rejection_rate"], [368, 2, 1, "", "reset"], [369, 5, 1, "", "sample_weight"], [370, 5, 1, "", "samplers"], [371, 5, 1, "", "sampling_functions"], [372, 2, 1, "", "to_dict"]], "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator": [[374, 2, 1, "", "apply"], [375, 5, 1, "", "occ_event"], [376, 2, 1, "", "propose"], [377, 2, 1, "", "set_state"], [378, 5, 1, "", "state"]], "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential": [[380, 5, 1, "", "conditions"], [381, 5, 1, "", "formation_energy_calculator"], [382, 2, 1, "", "occ_delta_per_supercell"], [383, 5, 1, "", "param_composition_calculator"], [384, 2, 1, "", "per_supercell"], [385, 2, 1, "", "per_unitcell"], [386, 2, 1, "", "set_state"], [387, 5, 1, "", "state"], [388, 5, 1, "", "system"]], "libcasm.monte.methods": [[394, 1, 1, "", "BasicOccupationMetropolisData"], [408, 4, 1, "", "basic_occupation_metropolis"], [409, 4, 1, "", "metropolis_acceptance"]], "libcasm.monte.methods.BasicOccupationMetropolisData": [[395, 2, 1, "", "acceptance_rate"], [396, 3, 1, "", "completion_check"], [397, 3, 1, "", "json_samplers"], [398, 3, 1, "", "json_sampling_functions"], [399, 3, 1, "", "n_accept"], [400, 3, 1, "", "n_pass"], [401, 3, 1, "", "n_reject"], [402, 3, 1, "", "n_steps_per_pass"], [403, 2, 1, "", "rejection_rate"], [404, 3, 1, "", "sample_weight"], [405, 3, 1, "", "samplers"], [406, 3, 1, "", "sampling_functions"], [407, 2, 1, "", "to_dict"]], "libcasm.monte.sampling": [[411, 1, 1, "", "BasicStatistics"], [416, 1, 1, "", "BasicStatisticsCalculator"], [423, 1, 1, "", "CompletionCheck"], [431, 1, 1, "", "CompletionCheckParams"], [443, 1, 1, "", "CompletionCheckResults"], [458, 1, 1, "", "ConvergenceCheckResults"], [463, 1, 1, "", "ConvergenceResultMap"], [467, 1, 1, "", "CutoffCheckParams"], [478, 1, 1, "", "EquilibrationCheckResults"], [483, 1, 1, "", "EquilibrationResultMap"], [487, 1, 1, "", "IndividualConvergenceResult"], [492, 1, 1, "", "IndividualEquilibrationResult"], [496, 1, 1, "", "RequestedPrecision"], [503, 1, 1, "", "RequestedPrecisionConstructor"], [505, 1, 1, "", "RequestedPrecisionMap"], [509, 1, 1, "", "SAMPLE_METHOD"], [515, 1, 1, "", "SAMPLE_MODE"], [521, 1, 1, "", "Sampler"], [535, 1, 1, "", "SamplerComponent"], [539, 1, 1, "", "SamplerMap"], [543, 1, 1, "", "SamplingParams"], [554, 1, 1, "", "StateSamplingFunction"], [560, 1, 1, "", "StateSamplingFunctionMap"], [564, 4, 1, "", "all_minimums_met"], [565, 4, 1, "", "any_maximum_met"], [566, 4, 1, "", "colmajor_component_names"], [567, 4, 1, "", "component_convergence_check"], [568, 4, 1, "", "converge"], [569, 4, 1, "", "convergence_check"], [570, 4, 1, "", "default_component_names"], [571, 4, 1, "", "default_equilibration_check"], [572, 4, 1, "", "get_n_samples"], [573, 1, 1, "", "jsonStateSamplingFunction"], [577, 1, 1, "", "jsonStateSamplingFunctionMap"], [581, 4, 1, "", "matrix_as_vector"], [582, 4, 1, "", "scalar_as_vector"]], "libcasm.monte.sampling.BasicStatistics": [[412, 3, 1, "", "calculated_precision"], [413, 3, 1, "", "mean"], [414, 2, 1, "", "relative_precision"], [415, 2, 1, "", "to_dict"]], "libcasm.monte.sampling.BasicStatisticsCalculator": [[417, 2, 1, "", "calculate"], [418, 3, 1, "", "confidence"], [419, 2, 1, "", "from_dict"], [420, 3, 1, "", "n_resamples"], [421, 2, 1, "", "to_dict"], [422, 3, 1, "", "weighted_observations_method"]], "libcasm.monte.sampling.CompletionCheck": [[424, 2, 1, "", "check"], [425, 2, 1, "", "count_and_time_check"], [426, 2, 1, "", "count_check"], [427, 2, 1, "", "params"], [428, 2, 1, "", "reset"], [429, 2, 1, "", "results"], [430, 2, 1, "", "time_check"]], "libcasm.monte.sampling.CompletionCheckParams": [[432, 3, 1, "", "calc_statistics_f"], [433, 3, 1, "", "check_base"], [434, 3, 1, "", "check_begin"], [435, 3, 1, "", "check_period"], [436, 3, 1, "", "check_period_max"], [437, 3, 1, "", "check_shift"], [438, 3, 1, "", "cutoff_params"], [439, 3, 1, "", "equilibration_check_f"], [440, 2, 1, "", "from_dict"], [441, 3, 1, "", "log_spacing"], [442, 3, 1, "", "requested_precision"]], "libcasm.monte.sampling.CompletionCheckResults": [[444, 3, 1, "", "clocktime"], [445, 3, 1, "", "convergence_check_results"], [446, 3, 1, "", "count"], [447, 3, 1, "", "equilibration_check_results"], [448, 2, 1, "", "full_reset"], [449, 3, 1, "", "has_all_minimums_met"], [450, 3, 1, "", "has_any_maximum_met"], [451, 3, 1, "", "is_complete"], [452, 3, 1, "", "n_samples"], [453, 3, 1, "", "n_samples_at_convergence_check"], [454, 3, 1, "", "params"], [455, 2, 1, "", "partial_reset"], [456, 3, 1, "", "time"], [457, 2, 1, "", "to_dict"]], "libcasm.monte.sampling.ConvergenceCheckResults": [[459, 3, 1, "", "N_samples_for_statistics"], [460, 3, 1, "", "all_converged"], [461, 3, 1, "", "individual_results"], [462, 2, 1, "", "to_dict"]], "libcasm.monte.sampling.ConvergenceResultMap": [[464, 2, 1, "", "items"], [465, 2, 1, "", "keys"], [466, 2, 1, "", "values"]], "libcasm.monte.sampling.CutoffCheckParams": [[468, 2, 1, "", "from_dict"], [469, 3, 1, "", "max_clocktime"], [470, 3, 1, "", "max_count"], [471, 3, 1, "", "max_sample"], [472, 3, 1, "", "max_time"], [473, 3, 1, "", "min_clocktime"], [474, 3, 1, "", "min_count"], [475, 3, 1, "", "min_sample"], [476, 3, 1, "", "min_time"], [477, 2, 1, "", "to_dict"]], "libcasm.monte.sampling.EquilibrationCheckResults": [[479, 3, 1, "", "N_samples_for_all_to_equilibrate"], [480, 3, 1, "", "all_equilibrated"], [481, 3, 1, "", "individual_results"], [482, 2, 1, "", "to_dict"]], "libcasm.monte.sampling.EquilibrationResultMap": [[484, 2, 1, "", "items"], [485, 2, 1, "", "keys"], [486, 2, 1, "", "values"]], "libcasm.monte.sampling.IndividualConvergenceResult": [[488, 3, 1, "", "is_converged"], [489, 3, 1, "", "requested_precision"], [490, 3, 1, "", "stats"], [491, 2, 1, "", "to_dict"]], "libcasm.monte.sampling.IndividualEquilibrationResult": [[493, 3, 1, "", "N_samples_for_equilibration"], [494, 3, 1, "", "is_equilibrated"], [495, 2, 1, "", "to_dict"]], "libcasm.monte.sampling.RequestedPrecision": [[497, 3, 1, "", "abs_convergence_is_required"], [498, 3, 1, "", "abs_precision"], [499, 2, 1, "", "from_dict"], [500, 3, 1, "", "rel_convergence_is_required"], [501, 3, 1, "", "rel_precision"], [502, 2, 1, "", "to_dict"]], "libcasm.monte.sampling.RequestedPrecisionConstructor": [[504, 2, 1, "", "set_precision"]], "libcasm.monte.sampling.RequestedPrecisionMap": [[506, 2, 1, "", "items"], [507, 2, 1, "", "keys"], [508, 2, 1, "", "values"]], "libcasm.monte.sampling.SAMPLE_METHOD": [[510, 5, 1, "", "CUSTOM"], [511, 5, 1, "", "LINEAR"], [512, 5, 1, "", "LOG"], [513, 3, 1, "", "name"], [514, 3, 1, "", "value"]], "libcasm.monte.sampling.SAMPLE_MODE": [[516, 5, 1, "", "BY_PASS"], [517, 5, 1, "", "BY_STEP"], [518, 5, 1, "", "BY_TIME"], [519, 3, 1, "", "name"], [520, 3, 1, "", "value"]], "libcasm.monte.sampling.Sampler": [[522, 2, 1, "", "append"], [523, 2, 1, "", "clear"], [524, 2, 1, "", "component"], [525, 2, 1, "", "component_names"], [526, 2, 1, "", "n_components"], [527, 2, 1, "", "n_samples"], [528, 2, 1, "", "sample"], [529, 2, 1, "", "sample_capacity"], [530, 2, 1, "", "set_capacity_increment"], [531, 2, 1, "", "set_sample_capacity"], [532, 2, 1, "", "set_values"], [533, 2, 1, "", "shape"], [534, 2, 1, "", "values"]], "libcasm.monte.sampling.SamplerComponent": [[536, 3, 1, "", "component_index"], [537, 3, 1, "", "component_name"], [538, 3, 1, "", "sampler_name"]], "libcasm.monte.sampling.SamplerMap": [[540, 2, 1, "", "items"], [541, 2, 1, "", "keys"], [542, 2, 1, "", "values"]], "libcasm.monte.sampling.SamplingParams": [[544, 3, 1, "", "base"], [545, 3, 1, "", "begin"], [546, 3, 1, "", "do_sample_time"], [547, 3, 1, "", "do_sample_trajectory"], [548, 3, 1, "", "period"], [549, 3, 1, "", "sample_method"], [550, 3, 1, "", "sample_mode"], [551, 3, 1, "", "sampler_names"], [552, 3, 1, "", "shift"], [553, 3, 1, "", "stochastic_sample_period"]], "libcasm.monte.sampling.StateSamplingFunction": [[555, 3, 1, "", "component_names"], [556, 3, 1, "", "description"], [557, 3, 1, "", "function"], [558, 3, 1, "", "name"], [559, 3, 1, "", "shape"]], "libcasm.monte.sampling.StateSamplingFunctionMap": [[561, 2, 1, "", "items"], [562, 2, 1, "", "keys"], [563, 2, 1, "", "values"]], "libcasm.monte.sampling.jsonStateSamplingFunction": [[574, 3, 1, "", "description"], [575, 3, 1, "", "function"], [576, 3, 1, "", "name"]], "libcasm.monte.sampling.jsonStateSamplingFunctionMap": [[578, 2, 1, "", "items"], [579, 2, 1, "", "keys"], [580, 2, 1, "", "values"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "attribute", "Python attribute"]}, "titleterms": {"bibliographi": 0, "libcasm": [1, 3, 55, 232, 267, 312, 343, 393, 410, 583], "mont": [1, 3, 55, 232, 267, 312, 343, 393, 410, 586], "about": 1, "casm": 1, "licens": 1, "document": 1, "instal": 2, "from": [2, 65], "pypi": 2, "sourc": 2, "For": 2, "contributor": 2, "methodlog": 4, "begin_lap": 5, "begin_section_print_alwai": 6, "begin_section_print_if_debug": 7, "begin_section_print_if_quiet": 8, "begin_section_print_if_standard": 9, "begin_section_print_if_verbos": 10, "decrease_ind": 11, "end_sect": 12, "hide_clock": 13, "increase_ind": 14, "indent_str": 15, "lap_tim": 16, "log_frequ": 17, "logfile_path": 18, "paragraph": 19, "paragraph_justif": 20, "paragraph_width": 21, "print": 22, "reset": [23, 296, 368, 428], "restart_clock": 24, "section": 25, "set_debug": 26, "set_indent_spac": 27, "set_initial_indent_spac": 28, "set_paragraph_justif": 29, "set_paragraph_width": 30, "set_quiet": 31, "set_standard": 32, "set_verbos": 33, "show_clock": 34, "time_": 35, "verbatim": 36, "randomnumberengin": 37, "dump": 38, "load": 39, "seed": 40, "seed_seq": 41, "randomnumbergener": 42, "engin": 43, "random_int": 44, "random_r": 45, "valuemap": 46, "boolean_valu": 47, "from_dict": [48, 146, 155, 160, 195, 234, 261, 281, 314, 355, 419, 440, 468, 499], "is_mismatch": 49, "make_incremented_valu": 50, "matrix_valu": 51, "scalar_valu": 52, "to_dict": [53, 151, 158, 163, 201, 244, 263, 284, 300, 324, 358, 372, 407, 415, 421, 457, 462, 477, 482, 491, 495, 502], "vector_valu": 54, "event": 55, "atom": [56, 171], "n_jump": 57, "translat": 58, "atomloc": 59, "linear_site_index": [60, 137, 166, 209], "mol_comp": 61, "mol_id": [62, 190, 210], "atomtraj": 63, "delta_ijk": 64, "atomtrajvector": 67, "append": [68, 74, 118, 126, 140, 213, 522], "clear": [69, 75, 119, 127, 141, 214, 523], "extend": [70, 76, 121, 129, 142, 215], "insert": [71, 77, 122, 130, 143, 216], "pop": [72, 78, 123, 131, 144, 217], "atomvector": 73, "convers": 79, "asym_s": 80, "asym_to_b": 81, "asym_to_unitl": 82, "bijk_to_asym": 83, "bijk_to_l": 84, "bijk_to_unitl": 85, "l_size": 86, "l_to_asym": 87, "l_to_b": 88, "l_to_basis_cart": 89, "l_to_basis_frac": 90, "l_to_bijk": 91, "l_to_cart": 92, "l_to_frac": 93, "l_to_ijk": 94, "l_to_unitl": 95, "lat_column_mat": 96, "make_with_custom_asym": 97, "make_with_custom_unitcel": 98, "occ_siz": 99, "occ_to_species_index": 100, "site_index_convert": 101, "species_allow": 102, "species_index_to_atoms_s": 103, "species_index_to_nam": 104, "species_index_to_occup": 105, "species_name_to_index": 106, "species_s": 107, "species_to_occ_index": 108, "transformation_matrix_to_sup": 109, "unit_site_index_convert": 110, "unit_transformation_matrix_to_sup": 111, "unitcell_index_convert": 112, "unitl_s": 113, "unitl_to_asym": 114, "unitl_to_b": 115, "unitl_to_bijk": 116, "intvector": 117, "count": [120, 128, 446], "remov": [124, 132], "longvector": 125, "mol": [133, 189], "asymmetric_unit_index": [134, 154], "component_id": 135, "id": 136, "mol_location_index": 138, "molvector": 139, "multioccswap": 145, "revers": [147, 197], "sort": [148, 149, 199, 200], "swap": 150, "total_count": 152, "occcandid": 153, "is_valid": [156, 196], "species_index": 157, "occcandidatelist": 159, "index": 161, "matching_index": 162, "occev": 164, "atom_traj": 165, "new_occ": 167, "occ_transform": 168, "occloc": 169, "appli": [170, 302, 374], "atom_positions_cart": 172, "atom_positions_cart_within": 173, "atom_s": 174, "cand_siz": 175, "cand_size_by_candidate_index": 176, "candidate_list": 177, "choose_mol": 178, "choose_mol_by_candidate_index": 179, "convert": 180, "current_atom_n_jump": 181, "current_atom_nam": 182, "current_atom_position_index": 183, "current_atom_species_index": 184, "initial_atom_position_index": 185, "initial_atom_species_index": 186, "initi": 187, "linear_site_index_to_mol_id": 188, "mol_id_by_candidate_index": 191, "mol_siz": 192, "occswap": 193, "first": 194, "second": 198, "occswapcountmap": 202, "item": [203, 464, 484, 506, 540, 561, 578], "kei": [204, 465, 485, 507, 541, 562, 579], "valu": [205, 466, 486, 508, 514, 520, 534, 542, 563, 580], "occtransform": 206, "asym": 207, "from_speci": 208, "to_speci": 211, "occtransformvector": 212, "choose_canonical_swap": 218, "choose_semigrand_canonical_multiswap": 219, "choose_semigrand_canonical_swap": 220, "is_allowed_canonical_swap": 221, "make_canonical_swap": 222, "make_multiswap": 223, "make_semigrand_canonical_swap": 224, "propose_canonical_ev": 225, "propose_canonical_event_from_swap": 226, "propose_semigrand_canonical_ev": 227, "propose_semigrand_canonical_event_from_multiswap": 228, "propose_semigrand_canonical_event_from_swap": 229, "propose_semigrand_canonical_multiswap_ev": 230, "swaps_allowed_per_unitcel": 231, "ising_cpp": [232, 267], "isingconfigur": [233, 313], "from_linear_site_index": [235, 315], "n_site": [236, 316], "n_unitcel": [237, 317], "n_variable_sit": [238, 318], "occ": [239, 319], "occup": [240, 320], "set_occ": [241, 321], "set_occup": [242, 322], "shape": [243, 323, 533, 559], "to_linear_site_index": [245, 325], "within": [246, 326], "isingformationenergi": [247, 327], "occ_delta_per_supercel": [248, 254, 306, 330, 337, 382], "per_supercel": [249, 255, 308, 331, 338, 384], "per_unitcel": [250, 256, 309, 332, 339, 385], "set_stat": [251, 257, 304, 310, 333, 340, 377, 386], "isingparamcomposit": [252, 335], "n_independent_composit": [253, 336], "isingst": [258, 341], "condit": [259, 269, 345, 380], "configur": 260, "properti": 262, "isingsystem": [264, 342], "formation_energy_calcul": [265, 273, 347, 381], "param_composition_calcul": [266, 274, 348, 383], "semigrand_canon": [267, 343], "semigrandcanonicalcalcul": [268, 344], "data": [270, 346], "default_json_sampling_funct": 271, "default_sampling_funct": 272, "potenti": [275, 349], "run": [276, 350], "state": [277, 334, 351, 378, 387], "system": [278, 352, 388], "semigrandcanonicalcondit": [279, 353], "exchange_potenti": [280, 354], "from_valu": [282, 356], "temperatur": [283, 357], "to_valu": [285, 359], "semigrandcanonicaldata": [286, 360], "acceptance_r": [287, 361, 395], "completion_check": [288, 362, 396], "json_sampl": [289, 397], "json_sampling_funct": [290, 398], "n_accept": [291, 363, 399], "n_pass": [292, 364, 400], "n_reject": [293, 365, 401], "n_steps_per_pass": [294, 366, 402], "rejection_r": [295, 367, 403], "sample_weight": [297, 369, 404], "sampler": [298, 370, 405, 521], "sampling_funct": [299, 371, 406], "semigrandcanonicaleventgener": [301, 373], "propos": [303, 376], "semigrandcanonicalpotenti": [305, 379], "occ_event_delta_per_supercel": 307, "default_write_statu": [311, 389], "ising_pi": [312, 343], "j": 328, "lattice_typ": 329, "occ_ev": 375, "make_formation_energy_f": 390, "make_param_composition_f": 391, "make_potential_energy_f": 392, "method": 393, "basicoccupationmetropolisdata": 394, "basic_occupation_metropoli": 408, "metropolis_accept": 409, "sampl": [410, 528], "basicstatist": 411, "calculated_precis": 412, "mean": 413, "relative_precis": 414, "basicstatisticscalcul": 416, "calcul": [417, 585, 586], "confid": 418, "n_resampl": 420, "weighted_observations_method": 422, "completioncheck": 423, "check": [424, 585], "count_and_time_check": 425, "count_check": 426, "param": [427, 454], "result": 429, "time_check": 430, "completioncheckparam": 431, "calc_statistics_f": 432, "check_bas": 433, "check_begin": 434, "check_period": 435, "check_period_max": 436, "check_shift": 437, "cutoff_param": 438, "equilibration_check_f": 439, "log_spac": 441, "requested_precis": [442, 489], "completioncheckresult": 443, "clocktim": 444, "convergence_check_result": 445, "equilibration_check_result": 447, "full_reset": 448, "has_all_minimums_met": 449, "has_any_maximum_met": 450, "is_complet": 451, "n_sampl": [452, 527], "n_samples_at_convergence_check": 453, "partial_reset": 455, "time": 456, "convergencecheckresult": 458, "n_samples_for_statist": 459, "all_converg": 460, "individual_result": [461, 481], "convergenceresultmap": 463, "cutoffcheckparam": 467, "max_clocktim": 469, "max_count": 470, "max_sampl": 471, "max_tim": 472, "min_clocktim": 473, "min_count": 474, "min_sampl": 475, "min_tim": 476, "equilibrationcheckresult": 478, "n_samples_for_all_to_equilibr": 479, "all_equilibr": 480, "equilibrationresultmap": 483, "individualconvergenceresult": 487, "is_converg": 488, "stat": 490, "individualequilibrationresult": 492, "n_samples_for_equilibr": 493, "is_equilibr": 494, "requestedprecis": 496, "abs_convergence_is_requir": 497, "abs_precis": 498, "rel_convergence_is_requir": 500, "rel_precis": 501, "requestedprecisionconstructor": 503, "set_precis": 504, "requestedprecisionmap": 505, "sample_method": [509, 549], "custom": 510, "linear": 511, "log": 512, "name": [513, 519, 558, 576], "sample_mod": [515, 550], "by_pass": 516, "by_step": 517, "by_tim": 518, "compon": 524, "component_nam": [525, 537, 555], "n_compon": 526, "sample_capac": 529, "set_capacity_incr": 530, "set_sample_capac": 531, "set_valu": 532, "samplercompon": 535, "component_index": 536, "sampler_nam": [538, 551], "samplermap": 539, "samplingparam": 543, "base": 544, "begin": 545, "do_sample_tim": 546, "do_sample_trajectori": 547, "period": 548, "shift": 552, "stochastic_sample_period": 553, "statesamplingfunct": 554, "descript": [556, 574], "function": [557, 575], "statesamplingfunctionmap": 560, "all_minimums_met": 564, "any_maximum_met": 565, "colmajor_component_nam": 566, "component_convergence_check": 567, "converg": 568, "convergence_check": 569, "default_component_nam": 570, "default_equilibration_check": 571, "get_n_sampl": 572, "jsonstatesamplingfunct": 573, "jsonstatesamplingfunctionmap": 577, "matrix_as_vector": 581, "scalar_as_vector": 582, "refer": 583, "usag": 584, "complet": 585, "perform": 585, "exampl": 585, "equilibr": 585, "precis": 585, "overview": 586, "carlo": 586, "model": 586}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinxcontrib.bibtex": 9, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"Bibliography": [[0, "bibliography"]], "libcasm-monte": [[1, "libcasm-monte"]], "About CASM": [[1, "about-casm"]], "License": [[1, "license"]], "Documentation": [[1, "documentation"]], "Installation": [[2, "installation"]], "Install from PyPI": [[2, "install-from-pypi"]], "Install from source": [[2, "install-from-source"]], "For contributors": [[2, "for-contributors"]], "libcasm.monte": [[3, "module-libcasm.monte"]], "MethodLog": [[4, "methodlog"]], "begin_lap": [[5, "begin-lap"]], "begin_section_print_always": [[6, "begin-section-print-always"]], "begin_section_print_if_debug": [[7, "begin-section-print-if-debug"]], "begin_section_print_if_quiet": [[8, "begin-section-print-if-quiet"]], "begin_section_print_if_standard": [[9, "begin-section-print-if-standard"]], "begin_section_print_if_verbose": [[10, "begin-section-print-if-verbose"]], "decrease_indent": [[11, "decrease-indent"]], "end_section": [[12, "end-section"]], "hide_clock": [[13, "hide-clock"]], "increase_indent": [[14, "increase-indent"]], "indent_str": [[15, "indent-str"]], "lap_time": [[16, "lap-time"]], "log_frequency": [[17, "log-frequency"]], "logfile_path": [[18, "logfile-path"]], "paragraph": [[19, "paragraph"]], "paragraph_justification": [[20, "paragraph-justification"]], "paragraph_width": [[21, "paragraph-width"]], "print": [[22, "print"]], "reset": [[23, "reset"], [296, "reset"], [368, "reset"], [428, "reset"]], "restart_clock": [[24, "restart-clock"]], "section": [[25, "section"]], "set_debug": [[26, "set-debug"]], "set_indent_space": [[27, "set-indent-space"]], "set_initial_indent_space": [[28, "set-initial-indent-space"]], "set_paragraph_justification": [[29, "set-paragraph-justification"]], "set_paragraph_width": [[30, "set-paragraph-width"]], "set_quiet": [[31, "set-quiet"]], "set_standard": [[32, "set-standard"]], "set_verbose": [[33, "set-verbose"]], "show_clock": [[34, "show-clock"]], "time_s": [[35, "time-s"]], "verbatim": [[36, "verbatim"]], "RandomNumberEngine": [[37, "randomnumberengine"]], "dump": [[38, "dump"]], "load": [[39, "load"]], "seed": [[40, "seed"]], "seed_seq": [[41, "seed-seq"]], "RandomNumberGenerator": [[42, "randomnumbergenerator"]], "engine": [[43, "engine"]], "random_int": [[44, "random-int"]], "random_real": [[45, "random-real"]], "ValueMap": [[46, "valuemap"]], "boolean_values": [[47, "boolean-values"]], "from_dict": [[48, "from-dict"], [146, "from-dict"], [155, "from-dict"], [160, "from-dict"], [195, "from-dict"], [234, "from-dict"], [261, "from-dict"], [281, "from-dict"], [314, "from-dict"], [355, "from-dict"], [419, "from-dict"], [440, "from-dict"], [468, "from-dict"], [499, "from-dict"]], "is_mismatched": [[49, "is-mismatched"]], "make_incremented_values": [[50, "make-incremented-values"]], "matrix_values": [[51, "matrix-values"]], "scalar_values": [[52, "scalar-values"]], "to_dict": [[53, "to-dict"], [151, "to-dict"], [158, "to-dict"], [163, "to-dict"], [201, "to-dict"], [244, "to-dict"], [263, "to-dict"], [284, "to-dict"], [300, "to-dict"], [324, "to-dict"], [358, "to-dict"], [372, "to-dict"], [407, "to-dict"], [415, "to-dict"], [421, "to-dict"], [457, "to-dict"], [462, "to-dict"], [477, "to-dict"], [482, "to-dict"], [491, "to-dict"], [495, "to-dict"], [502, "to-dict"]], "vector_values": [[54, "vector-values"]], "libcasm.monte.events": [[55, "module-libcasm.monte.events"]], "Atom": [[56, "atom"]], "n_jumps": [[57, "n-jumps"]], "translation": [[58, "translation"]], "AtomLocation": [[59, "atomlocation"]], "linear_site_index": [[60, "linear-site-index"], [137, "linear-site-index"], [166, "linear-site-index"], [209, "linear-site-index"]], "mol_comp": [[61, "mol-comp"]], "mol_id": [[62, "mol-id"], [190, "mol-id"], [210, "mol-id"]], "AtomTraj": [[63, "atomtraj"]], "delta_ijk": [[64, "delta-ijk"]], "from": [[65, "from"]], "to": [[66, "to"]], "AtomTrajVector": [[67, "atomtrajvector"]], "append": [[68, "append"], [74, "append"], [118, "append"], [126, "append"], [140, "append"], [213, "append"], [522, "append"]], "clear": [[69, "clear"], [75, "clear"], [119, "clear"], [127, "clear"], [141, "clear"], [214, "clear"], [523, "clear"]], "extend": [[70, "extend"], [76, "extend"], [121, "extend"], [129, "extend"], [142, "extend"], [215, "extend"]], "insert": [[71, "insert"], [77, "insert"], [122, "insert"], [130, "insert"], [143, "insert"], [216, "insert"]], "pop": [[72, "pop"], [78, "pop"], [123, "pop"], [131, "pop"], [144, "pop"], [217, "pop"]], "AtomVector": [[73, "atomvector"]], "Conversions": [[79, "conversions"]], "asym_size": [[80, "asym-size"]], "asym_to_b": [[81, "asym-to-b"]], "asym_to_unitl": [[82, "asym-to-unitl"]], "bijk_to_asym": [[83, "bijk-to-asym"]], "bijk_to_l": [[84, "bijk-to-l"]], "bijk_to_unitl": [[85, "bijk-to-unitl"]], "l_size": [[86, "l-size"]], "l_to_asym": [[87, "l-to-asym"]], "l_to_b": [[88, "l-to-b"]], "l_to_basis_cart": [[89, "l-to-basis-cart"]], "l_to_basis_frac": [[90, "l-to-basis-frac"]], "l_to_bijk": [[91, "l-to-bijk"]], "l_to_cart": [[92, "l-to-cart"]], "l_to_frac": [[93, "l-to-frac"]], "l_to_ijk": [[94, "l-to-ijk"]], "l_to_unitl": [[95, "l-to-unitl"]], "lat_column_mat": [[96, "lat-column-mat"]], "make_with_custom_asym": [[97, "make-with-custom-asym"]], "make_with_custom_unitcell": [[98, "make-with-custom-unitcell"]], "occ_size": [[99, "occ-size"]], "occ_to_species_index": [[100, "occ-to-species-index"]], "site_index_converter": [[101, "site-index-converter"]], "species_allowed": [[102, "species-allowed"]], "species_index_to_atoms_size": [[103, "species-index-to-atoms-size"]], "species_index_to_name": [[104, "species-index-to-name"]], "species_index_to_occupant": [[105, "species-index-to-occupant"]], "species_name_to_index": [[106, "species-name-to-index"]], "species_size": [[107, "species-size"]], "species_to_occ_index": [[108, "species-to-occ-index"]], "transformation_matrix_to_super": [[109, "transformation-matrix-to-super"]], "unit_site_index_converter": [[110, "unit-site-index-converter"]], "unit_transformation_matrix_to_super": [[111, "unit-transformation-matrix-to-super"]], "unitcell_index_converter": [[112, "unitcell-index-converter"]], "unitl_size": [[113, "unitl-size"]], "unitl_to_asym": [[114, "unitl-to-asym"]], "unitl_to_b": [[115, "unitl-to-b"]], "unitl_to_bijk": [[116, "unitl-to-bijk"]], "IntVector": [[117, "intvector"]], "count": [[120, "count"], [128, "count"], [446, "count"]], "remove": [[124, "remove"], [132, "remove"]], "LongVector": [[125, "longvector"]], "Mol": [[133, "mol"]], "asymmetric_unit_index": [[134, "asymmetric-unit-index"], [154, "asymmetric-unit-index"]], "component_id": [[135, "component-id"]], "id": [[136, "id"]], "mol_location_index": [[138, "mol-location-index"]], "MolVector": [[139, "molvector"]], "MultiOccSwap": [[145, "multioccswap"]], "reverse": [[147, "reverse"], [197, "reverse"]], "sort": [[148, "sort"], [199, "sort"]], "sorted": [[149, "sorted"], [200, "sorted"]], "swaps": [[150, "swaps"]], "total_count": [[152, "total-count"]], "OccCandidate": [[153, "occcandidate"]], "is_valid": [[156, "is-valid"], [196, "is-valid"]], "species_index": [[157, "species-index"]], "OccCandidateList": [[159, "occcandidatelist"]], "index": [[161, "index"]], "matching_index": [[162, "matching-index"]], "OccEvent": [[164, "occevent"]], "atom_traj": [[165, "atom-traj"]], "new_occ": [[167, "new-occ"]], "occ_transform": [[168, "occ-transform"]], "OccLocation": [[169, "occlocation"]], "apply": [[170, "apply"], [302, "apply"], [374, "apply"]], "atom": [[171, "atom"]], "atom_positions_cart": [[172, "atom-positions-cart"]], "atom_positions_cart_within": [[173, "atom-positions-cart-within"]], "atom_size": [[174, "atom-size"]], "cand_size": [[175, "cand-size"]], "cand_size_by_candidate_index": [[176, "cand-size-by-candidate-index"]], "candidate_list": [[177, "candidate-list"]], "choose_mol": [[178, "choose-mol"]], "choose_mol_by_candidate_index": [[179, "choose-mol-by-candidate-index"]], "convert": [[180, "convert"]], "current_atom_n_jumps": [[181, "current-atom-n-jumps"]], "current_atom_names": [[182, "current-atom-names"]], "current_atom_position_index": [[183, "current-atom-position-index"]], "current_atom_species_index": [[184, "current-atom-species-index"]], "initial_atom_position_index": [[185, "initial-atom-position-index"]], "initial_atom_species_index": [[186, "initial-atom-species-index"]], "initialize": [[187, "initialize"]], "linear_site_index_to_mol_id": [[188, "linear-site-index-to-mol-id"]], "mol": [[189, "mol"]], "mol_id_by_candidate_index": [[191, "mol-id-by-candidate-index"]], "mol_size": [[192, "mol-size"]], "OccSwap": [[193, "occswap"]], "first": [[194, "first"]], "second": [[198, "second"]], "OccSwapCountMap": [[202, "occswapcountmap"]], "items": [[203, "items"], [464, "items"], [484, "items"], [506, "items"], [540, "items"], [561, "items"], [578, "items"]], "keys": [[204, "keys"], [465, "keys"], [485, "keys"], [507, "keys"], [541, "keys"], [562, "keys"], [579, "keys"]], "values": [[205, "values"], [466, "values"], [486, "values"], [508, "values"], [534, "values"], [542, "values"], [563, "values"], [580, "values"]], "OccTransform": [[206, "occtransform"]], "asym": [[207, "asym"]], "from_species": [[208, "from-species"]], "to_species": [[211, "to-species"]], "OccTransformVector": [[212, "occtransformvector"]], "choose_canonical_swap": [[218, "choose-canonical-swap"]], "choose_semigrand_canonical_multiswap": [[219, "choose-semigrand-canonical-multiswap"]], "choose_semigrand_canonical_swap": [[220, "choose-semigrand-canonical-swap"]], "is_allowed_canonical_swap": [[221, "is-allowed-canonical-swap"]], "make_canonical_swaps": [[222, "make-canonical-swaps"]], "make_multiswaps": [[223, "make-multiswaps"]], "make_semigrand_canonical_swaps": [[224, "make-semigrand-canonical-swaps"]], "propose_canonical_event": [[225, "propose-canonical-event"]], "propose_canonical_event_from_swap": [[226, "propose-canonical-event-from-swap"]], "propose_semigrand_canonical_event": [[227, "propose-semigrand-canonical-event"]], "propose_semigrand_canonical_event_from_multiswap": [[228, "propose-semigrand-canonical-event-from-multiswap"]], "propose_semigrand_canonical_event_from_swap": [[229, "propose-semigrand-canonical-event-from-swap"]], "propose_semigrand_canonical_multiswap_event": [[230, "propose-semigrand-canonical-multiswap-event"]], "swaps_allowed_per_unitcell": [[231, "swaps-allowed-per-unitcell"]], "libcasm.monte.ising_cpp": [[232, "module-libcasm.monte.ising_cpp"]], "IsingConfiguration": [[233, "isingconfiguration"], [313, "isingconfiguration"]], "from_linear_site_index": [[235, "from-linear-site-index"], [315, "from-linear-site-index"]], "n_sites": [[236, "n-sites"], [316, "n-sites"]], "n_unitcells": [[237, "n-unitcells"], [317, "n-unitcells"]], "n_variable_sites": [[238, "n-variable-sites"], [318, "n-variable-sites"]], "occ": [[239, "occ"], [319, "occ"]], "occupation": [[240, "occupation"], [320, "occupation"]], "set_occ": [[241, "set-occ"], [321, "set-occ"]], "set_occupation": [[242, "set-occupation"], [322, "set-occupation"]], "shape": [[243, "shape"], [323, "shape"], [533, "shape"], [559, "shape"]], "to_linear_site_index": [[245, "to-linear-site-index"], [325, "to-linear-site-index"]], "within": [[246, "within"], [326, "within"]], "IsingFormationEnergy": [[247, "isingformationenergy"], [327, "isingformationenergy"]], "occ_delta_per_supercell": [[248, "occ-delta-per-supercell"], [254, "occ-delta-per-supercell"], [306, "occ-delta-per-supercell"], [330, "occ-delta-per-supercell"], [337, "occ-delta-per-supercell"], [382, "occ-delta-per-supercell"]], "per_supercell": [[249, "per-supercell"], [255, "per-supercell"], [308, "per-supercell"], [331, "per-supercell"], [338, "per-supercell"], [384, "per-supercell"]], "per_unitcell": [[250, "per-unitcell"], [256, "per-unitcell"], [309, "per-unitcell"], [332, "per-unitcell"], [339, "per-unitcell"], [385, "per-unitcell"]], "set_state": [[251, "set-state"], [257, "set-state"], [304, "set-state"], [310, "set-state"], [333, "set-state"], [340, "set-state"], [377, "set-state"], [386, "set-state"]], "IsingParamComposition": [[252, "isingparamcomposition"], [335, "isingparamcomposition"]], "n_independent_compositions": [[253, "n-independent-compositions"], [336, "n-independent-compositions"]], "IsingState": [[258, "isingstate"], [341, "isingstate"]], "conditions": [[259, "conditions"], [269, "conditions"], [345, "conditions"], [380, "conditions"]], "configuration": [[260, "configuration"]], "properties": [[262, "properties"]], "IsingSystem": [[264, "isingsystem"], [342, "isingsystem"]], "formation_energy_calculator": [[265, "formation-energy-calculator"], [273, "formation-energy-calculator"], [347, "formation-energy-calculator"], [381, "formation-energy-calculator"]], "param_composition_calculator": [[266, "param-composition-calculator"], [274, "param-composition-calculator"], [348, "param-composition-calculator"], [383, "param-composition-calculator"]], "libcasm.monte.ising_cpp.semigrand_canonical": [[267, "module-libcasm.monte.ising_cpp.semigrand_canonical"]], "SemiGrandCanonicalCalculator": [[268, "semigrandcanonicalcalculator"], [344, "semigrandcanonicalcalculator"]], "data": [[270, "data"], [346, "data"]], "default_json_sampling_functions": [[271, "default-json-sampling-functions"]], "default_sampling_functions": [[272, "default-sampling-functions"]], "potential": [[275, "potential"], [349, "potential"]], "run": [[276, "run"], [350, "run"]], "state": [[277, "state"], [334, "state"], [351, "state"], [378, "state"], [387, "state"]], "system": [[278, "system"], [352, "system"], [388, "system"]], "SemiGrandCanonicalConditions": [[279, "semigrandcanonicalconditions"], [353, "semigrandcanonicalconditions"]], "exchange_potential": [[280, "exchange-potential"], [354, "exchange-potential"]], "from_values": [[282, "from-values"], [356, "from-values"]], "temperature": [[283, "temperature"], [357, "temperature"]], "to_values": [[285, "to-values"], [359, "to-values"]], "SemiGrandCanonicalData": [[286, "semigrandcanonicaldata"], [360, "semigrandcanonicaldata"]], "acceptance_rate": [[287, "acceptance-rate"], [361, "acceptance-rate"], [395, "acceptance-rate"]], "completion_check": [[288, "completion-check"], [362, "completion-check"], [396, "completion-check"]], "json_samplers": [[289, "json-samplers"], [397, "json-samplers"]], "json_sampling_functions": [[290, "json-sampling-functions"], [398, "json-sampling-functions"]], "n_accept": [[291, "n-accept"], [363, "n-accept"], [399, "n-accept"]], "n_pass": [[292, "n-pass"], [364, "n-pass"], [400, "n-pass"]], "n_reject": [[293, "n-reject"], [365, "n-reject"], [401, "n-reject"]], "n_steps_per_pass": [[294, "n-steps-per-pass"], [366, "n-steps-per-pass"], [402, "n-steps-per-pass"]], "rejection_rate": [[295, "rejection-rate"], [367, "rejection-rate"], [403, "rejection-rate"]], "sample_weight": [[297, "sample-weight"], [369, "sample-weight"], [404, "sample-weight"]], "samplers": [[298, "samplers"], [370, "samplers"], [405, "samplers"]], "sampling_functions": [[299, "sampling-functions"], [371, "sampling-functions"], [406, "sampling-functions"]], "SemiGrandCanonicalEventGenerator": [[301, "semigrandcanonicaleventgenerator"], [373, "semigrandcanonicaleventgenerator"]], "propose": [[303, "propose"], [376, "propose"]], "SemiGrandCanonicalPotential": [[305, "semigrandcanonicalpotential"], [379, "semigrandcanonicalpotential"]], "occ_event_delta_per_supercell": [[307, "occ-event-delta-per-supercell"]], "default_write_status": [[311, "default-write-status"], [389, "default-write-status"]], "libcasm.monte.ising_py": [[312, "module-libcasm.monte.ising_py"]], "J": [[328, "j"]], "lattice_type": [[329, "lattice-type"]], "libcasm.monte.ising_py.semigrand_canonical": [[343, "module-libcasm.monte.ising_py.semigrand_canonical"]], "occ_event": [[375, "occ-event"]], "make_formation_energy_f": [[390, "make-formation-energy-f"]], "make_param_composition_f": [[391, "make-param-composition-f"]], "make_potential_energy_f": [[392, "make-potential-energy-f"]], "libcasm.monte.methods": [[393, "module-libcasm.monte.methods"]], "BasicOccupationMetropolisData": [[394, "basicoccupationmetropolisdata"]], "basic_occupation_metropolis": [[408, "basic-occupation-metropolis"]], "metropolis_acceptance": [[409, "metropolis-acceptance"]], "libcasm.monte.sampling": [[410, "module-libcasm.monte.sampling"]], "BasicStatistics": [[411, "basicstatistics"]], "calculated_precision": [[412, "calculated-precision"]], "mean": [[413, "mean"]], "relative_precision": [[414, "relative-precision"]], "BasicStatisticsCalculator": [[416, "basicstatisticscalculator"]], "calculate": [[417, "calculate"]], "confidence": [[418, "confidence"]], "n_resamples": [[420, "n-resamples"]], "weighted_observations_method": [[422, "weighted-observations-method"]], "CompletionCheck": [[423, "completioncheck"]], "check": [[424, "check"]], "count_and_time_check": [[425, "count-and-time-check"]], "count_check": [[426, "count-check"]], "params": [[427, "params"], [454, "params"]], "results": [[429, "results"]], "time_check": [[430, "time-check"]], "CompletionCheckParams": [[431, "completioncheckparams"]], "calc_statistics_f": [[432, "calc-statistics-f"]], "check_base": [[433, "check-base"]], "check_begin": [[434, "check-begin"]], "check_period": [[435, "check-period"]], "check_period_max": [[436, "check-period-max"]], "check_shift": [[437, "check-shift"]], "cutoff_params": [[438, "cutoff-params"]], "equilibration_check_f": [[439, "equilibration-check-f"]], "log_spacing": [[441, "log-spacing"]], "requested_precision": [[442, "requested-precision"], [489, "requested-precision"]], "CompletionCheckResults": [[443, "completioncheckresults"]], "clocktime": [[444, "clocktime"]], "convergence_check_results": [[445, "convergence-check-results"]], "equilibration_check_results": [[447, "equilibration-check-results"]], "full_reset": [[448, "full-reset"]], "has_all_minimums_met": [[449, "has-all-minimums-met"]], "has_any_maximum_met": [[450, "has-any-maximum-met"]], "is_complete": [[451, "is-complete"]], "n_samples": [[452, "n-samples"], [527, "n-samples"]], "n_samples_at_convergence_check": [[453, "n-samples-at-convergence-check"]], "partial_reset": [[455, "partial-reset"]], "time": [[456, "time"]], "ConvergenceCheckResults": [[458, "convergencecheckresults"]], "N_samples_for_statistics": [[459, "n-samples-for-statistics"]], "all_converged": [[460, "all-converged"]], "individual_results": [[461, "individual-results"], [481, "individual-results"]], "ConvergenceResultMap": [[463, "convergenceresultmap"]], "CutoffCheckParams": [[467, "cutoffcheckparams"]], "max_clocktime": [[469, "max-clocktime"]], "max_count": [[470, "max-count"]], "max_sample": [[471, "max-sample"]], "max_time": [[472, "max-time"]], "min_clocktime": [[473, "min-clocktime"]], "min_count": [[474, "min-count"]], "min_sample": [[475, "min-sample"]], "min_time": [[476, "min-time"]], "EquilibrationCheckResults": [[478, "equilibrationcheckresults"]], "N_samples_for_all_to_equilibrate": [[479, "n-samples-for-all-to-equilibrate"]], "all_equilibrated": [[480, "all-equilibrated"]], "EquilibrationResultMap": [[483, "equilibrationresultmap"]], "IndividualConvergenceResult": [[487, "individualconvergenceresult"]], "is_converged": [[488, "is-converged"]], "stats": [[490, "stats"]], "IndividualEquilibrationResult": [[492, "individualequilibrationresult"]], "N_samples_for_equilibration": [[493, "n-samples-for-equilibration"]], "is_equilibrated": [[494, "is-equilibrated"]], "RequestedPrecision": [[496, "requestedprecision"]], "abs_convergence_is_required": [[497, "abs-convergence-is-required"]], "abs_precision": [[498, "abs-precision"]], "rel_convergence_is_required": [[500, "rel-convergence-is-required"]], "rel_precision": [[501, "rel-precision"]], "RequestedPrecisionConstructor": [[503, "requestedprecisionconstructor"]], "set_precision": [[504, "set-precision"]], "RequestedPrecisionMap": [[505, "requestedprecisionmap"]], "SAMPLE_METHOD": [[509, "sample-method"]], "CUSTOM": [[510, "custom"]], "LINEAR": [[511, "linear"]], "LOG": [[512, "log"]], "name": [[513, "name"], [519, "name"], [558, "name"], [576, "name"]], "value": [[514, "value"], [520, "value"]], "SAMPLE_MODE": [[515, "sample-mode"]], "BY_PASS": [[516, "by-pass"]], "BY_STEP": [[517, "by-step"]], "BY_TIME": [[518, "by-time"]], "Sampler": [[521, "sampler"]], "component": [[524, "component"]], "component_names": [[525, "component-names"], [555, "component-names"]], "n_components": [[526, "n-components"]], "sample": [[528, "sample"]], "sample_capacity": [[529, "sample-capacity"]], "set_capacity_increment": [[530, "set-capacity-increment"]], "set_sample_capacity": [[531, "set-sample-capacity"]], "set_values": [[532, "set-values"]], "SamplerComponent": [[535, "samplercomponent"]], "component_index": [[536, "component-index"]], "component_name": [[537, "component-name"]], "sampler_name": [[538, "sampler-name"]], "SamplerMap": [[539, "samplermap"]], "SamplingParams": [[543, "samplingparams"]], "base": [[544, "base"]], "begin": [[545, "begin"]], "do_sample_time": [[546, "do-sample-time"]], "do_sample_trajectory": [[547, "do-sample-trajectory"]], "period": [[548, "period"]], "sample_method": [[549, "sample-method"]], "sample_mode": [[550, "sample-mode"]], "sampler_names": [[551, "sampler-names"]], "shift": [[552, "shift"]], "stochastic_sample_period": [[553, "stochastic-sample-period"]], "StateSamplingFunction": [[554, "statesamplingfunction"]], "description": [[556, "description"], [574, "description"]], "function": [[557, "function"], [575, "function"]], "StateSamplingFunctionMap": [[560, "statesamplingfunctionmap"]], "all_minimums_met": [[564, "all-minimums-met"]], "any_maximum_met": [[565, "any-maximum-met"]], "colmajor_component_names": [[566, "colmajor-component-names"]], "component_convergence_check": [[567, "component-convergence-check"]], "converge": [[568, "converge"]], "convergence_check": [[569, "convergence-check"]], "default_component_names": [[570, "default-component-names"]], "default_equilibration_check": [[571, "default-equilibration-check"]], "get_n_samples": [[572, "get-n-samples"]], "jsonStateSamplingFunction": [[573, "jsonstatesamplingfunction"]], "jsonStateSamplingFunctionMap": [[577, "jsonstatesamplingfunctionmap"]], "matrix_as_vector": [[581, "matrix-as-vector"]], "scalar_as_vector": [[582, "scalar-as-vector"]], "Reference (libcasm)": [[583, "reference-libcasm"]], "Usage": [[584, "usage"]], "Completion Checks": [[585, "completion-checks"]], "Performing completion checks": [[585, "performing-completion-checks"]], "Examples": [[585, "examples"]], "Equilibration check": [[585, "equilibration-check"]], "Calculated precision": [[585, "calculated-precision"]], "Overview": [[586, "overview"]], "Monte Carlo models": [[586, "monte-carlo-models"]], "Monte Carlo calculators": [[586, "monte-carlo-calculators"]]}, "indexentries": {"libcasm.monte": [[3, "module-libcasm.monte"]], "module": [[3, "module-libcasm.monte"], [55, "module-libcasm.monte.events"], [232, "module-libcasm.monte.ising_cpp"], [267, "module-libcasm.monte.ising_cpp.semigrand_canonical"], [312, "module-libcasm.monte.ising_py"], [343, "module-libcasm.monte.ising_py.semigrand_canonical"], [393, "module-libcasm.monte.methods"], [410, "module-libcasm.monte.sampling"]], "methodlog (class in libcasm.monte)": [[4, "libcasm.monte.MethodLog"]], "begin_lap() (libcasm.monte.methodlog method)": [[5, "libcasm.monte.MethodLog.begin_lap"]], "begin_section_print_always() (libcasm.monte.methodlog method)": [[6, "libcasm.monte.MethodLog.begin_section_print_always"]], "begin_section_print_if_debug() (libcasm.monte.methodlog method)": [[7, "libcasm.monte.MethodLog.begin_section_print_if_debug"]], "begin_section_print_if_quiet() (libcasm.monte.methodlog method)": [[8, "libcasm.monte.MethodLog.begin_section_print_if_quiet"]], "begin_section_print_if_standard() (libcasm.monte.methodlog method)": [[9, "libcasm.monte.MethodLog.begin_section_print_if_standard"]], "begin_section_print_if_verbose() (libcasm.monte.methodlog method)": [[10, "libcasm.monte.MethodLog.begin_section_print_if_verbose"]], "decrease_indent() (libcasm.monte.methodlog method)": [[11, "libcasm.monte.MethodLog.decrease_indent"]], "end_section() (libcasm.monte.methodlog method)": [[12, "libcasm.monte.MethodLog.end_section"]], "hide_clock() (libcasm.monte.methodlog method)": [[13, "libcasm.monte.MethodLog.hide_clock"]], "increase_indent() (libcasm.monte.methodlog method)": [[14, "libcasm.monte.MethodLog.increase_indent"]], "indent_str() (libcasm.monte.methodlog method)": [[15, "libcasm.monte.MethodLog.indent_str"]], "lap_time() (libcasm.monte.methodlog method)": [[16, "libcasm.monte.MethodLog.lap_time"]], "log_frequency() (libcasm.monte.methodlog method)": [[17, "libcasm.monte.MethodLog.log_frequency"]], "logfile_path() (libcasm.monte.methodlog method)": [[18, "libcasm.monte.MethodLog.logfile_path"]], "paragraph() (libcasm.monte.methodlog method)": [[19, "libcasm.monte.MethodLog.paragraph"]], "paragraph_justification() (libcasm.monte.methodlog method)": [[20, "libcasm.monte.MethodLog.paragraph_justification"]], "paragraph_width() (libcasm.monte.methodlog method)": [[21, "libcasm.monte.MethodLog.paragraph_width"]], "print() (libcasm.monte.methodlog method)": [[22, "libcasm.monte.MethodLog.print"]], "reset() (libcasm.monte.methodlog method)": [[23, "libcasm.monte.MethodLog.reset"]], "restart_clock() (libcasm.monte.methodlog method)": [[24, "libcasm.monte.MethodLog.restart_clock"]], "section() (libcasm.monte.methodlog method)": [[25, "libcasm.monte.MethodLog.section"]], "set_debug() (libcasm.monte.methodlog method)": [[26, "libcasm.monte.MethodLog.set_debug"]], "set_indent_space() (libcasm.monte.methodlog method)": [[27, "libcasm.monte.MethodLog.set_indent_space"]], "set_initial_indent_space() (libcasm.monte.methodlog method)": [[28, "libcasm.monte.MethodLog.set_initial_indent_space"]], "set_paragraph_justification() (libcasm.monte.methodlog method)": [[29, "libcasm.monte.MethodLog.set_paragraph_justification"]], "set_paragraph_width() (libcasm.monte.methodlog method)": [[30, "libcasm.monte.MethodLog.set_paragraph_width"]], "set_quiet() (libcasm.monte.methodlog method)": [[31, "libcasm.monte.MethodLog.set_quiet"]], "set_standard() (libcasm.monte.methodlog method)": [[32, "libcasm.monte.MethodLog.set_standard"]], "set_verbose() (libcasm.monte.methodlog method)": [[33, "libcasm.monte.MethodLog.set_verbose"]], "show_clock() (libcasm.monte.methodlog method)": [[34, "libcasm.monte.MethodLog.show_clock"]], "time_s() (libcasm.monte.methodlog method)": [[35, "libcasm.monte.MethodLog.time_s"]], "verbatim() (libcasm.monte.methodlog method)": [[36, "libcasm.monte.MethodLog.verbatim"]], "randomnumberengine (class in libcasm.monte)": [[37, "libcasm.monte.RandomNumberEngine"]], "dump() (libcasm.monte.randomnumberengine method)": [[38, "libcasm.monte.RandomNumberEngine.dump"]], "load() (libcasm.monte.randomnumberengine method)": [[39, "libcasm.monte.RandomNumberEngine.load"]], "seed() (libcasm.monte.randomnumberengine method)": [[40, "libcasm.monte.RandomNumberEngine.seed"]], "seed_seq() (libcasm.monte.randomnumberengine method)": [[41, "libcasm.monte.RandomNumberEngine.seed_seq"]], "randomnumbergenerator (class in libcasm.monte)": [[42, "libcasm.monte.RandomNumberGenerator"]], "engine() (libcasm.monte.randomnumbergenerator method)": [[43, "libcasm.monte.RandomNumberGenerator.engine"]], "random_int() (libcasm.monte.randomnumbergenerator method)": [[44, "libcasm.monte.RandomNumberGenerator.random_int"]], "random_real() (libcasm.monte.randomnumbergenerator method)": [[45, "libcasm.monte.RandomNumberGenerator.random_real"]], "valuemap (class in libcasm.monte)": [[46, "libcasm.monte.ValueMap"]], "boolean_values (libcasm.monte.valuemap property)": [[47, "libcasm.monte.ValueMap.boolean_values"]], "from_dict() (libcasm.monte.valuemap static method)": [[48, "libcasm.monte.ValueMap.from_dict"]], "is_mismatched() (libcasm.monte.valuemap method)": [[49, "libcasm.monte.ValueMap.is_mismatched"]], "make_incremented_values() (libcasm.monte.valuemap method)": [[50, "libcasm.monte.ValueMap.make_incremented_values"]], "matrix_values (libcasm.monte.valuemap property)": [[51, "libcasm.monte.ValueMap.matrix_values"]], "scalar_values (libcasm.monte.valuemap property)": [[52, "libcasm.monte.ValueMap.scalar_values"]], "to_dict() (libcasm.monte.valuemap method)": [[53, "libcasm.monte.ValueMap.to_dict"]], "vector_values (libcasm.monte.valuemap property)": [[54, "libcasm.monte.ValueMap.vector_values"]], "libcasm.monte.events": [[55, "module-libcasm.monte.events"]], "atom (class in libcasm.monte.events)": [[56, "libcasm.monte.events.Atom"]], "n_jumps (libcasm.monte.events.atom property)": [[57, "libcasm.monte.events.Atom.n_jumps"]], "translation (libcasm.monte.events.atom property)": [[58, "libcasm.monte.events.Atom.translation"]], "atomlocation (class in libcasm.monte.events)": [[59, "libcasm.monte.events.AtomLocation"]], "linear_site_index (libcasm.monte.events.atomlocation property)": [[60, "libcasm.monte.events.AtomLocation.linear_site_index"]], "mol_comp (libcasm.monte.events.atomlocation property)": [[61, "libcasm.monte.events.AtomLocation.mol_comp"]], "mol_id (libcasm.monte.events.atomlocation property)": [[62, "libcasm.monte.events.AtomLocation.mol_id"]], "atomtraj (class in libcasm.monte.events)": [[63, "libcasm.monte.events.AtomTraj"]], "delta_ijk (libcasm.monte.events.atomtraj property)": [[64, "libcasm.monte.events.AtomTraj.delta_ijk"]], "from (libcasm.monte.events.atomtraj property)": [[65, "libcasm.monte.events.AtomTraj.from"]], "to (libcasm.monte.events.atomtraj property)": [[66, "libcasm.monte.events.AtomTraj.to"]], "atomtrajvector (class in libcasm.monte.events)": [[67, "libcasm.monte.events.AtomTrajVector"]], "append() (libcasm.monte.events.atomtrajvector method)": [[68, "libcasm.monte.events.AtomTrajVector.append"]], "clear() (libcasm.monte.events.atomtrajvector method)": [[69, "libcasm.monte.events.AtomTrajVector.clear"]], "extend() (libcasm.monte.events.atomtrajvector method)": [[70, "libcasm.monte.events.AtomTrajVector.extend"]], "insert() (libcasm.monte.events.atomtrajvector method)": [[71, "libcasm.monte.events.AtomTrajVector.insert"]], "pop() (libcasm.monte.events.atomtrajvector method)": [[72, "libcasm.monte.events.AtomTrajVector.pop"]], "atomvector (class in libcasm.monte.events)": [[73, "libcasm.monte.events.AtomVector"]], "append() (libcasm.monte.events.atomvector method)": [[74, "libcasm.monte.events.AtomVector.append"]], "clear() (libcasm.monte.events.atomvector method)": [[75, "libcasm.monte.events.AtomVector.clear"]], "extend() (libcasm.monte.events.atomvector method)": [[76, "libcasm.monte.events.AtomVector.extend"]], "insert() (libcasm.monte.events.atomvector method)": [[77, "libcasm.monte.events.AtomVector.insert"]], "pop() (libcasm.monte.events.atomvector method)": [[78, "libcasm.monte.events.AtomVector.pop"]], "conversions (class in libcasm.monte.events)": [[79, "libcasm.monte.events.Conversions"]], "asym_size() (libcasm.monte.events.conversions method)": [[80, "libcasm.monte.events.Conversions.asym_size"]], "asym_to_b() (libcasm.monte.events.conversions method)": [[81, "libcasm.monte.events.Conversions.asym_to_b"]], "asym_to_unitl() (libcasm.monte.events.conversions method)": [[82, "libcasm.monte.events.Conversions.asym_to_unitl"]], "bijk_to_asym() (libcasm.monte.events.conversions method)": [[83, "libcasm.monte.events.Conversions.bijk_to_asym"]], "bijk_to_l() (libcasm.monte.events.conversions method)": [[84, "libcasm.monte.events.Conversions.bijk_to_l"]], "bijk_to_unitl() (libcasm.monte.events.conversions method)": [[85, "libcasm.monte.events.Conversions.bijk_to_unitl"]], "l_size() (libcasm.monte.events.conversions method)": [[86, "libcasm.monte.events.Conversions.l_size"]], "l_to_asym() (libcasm.monte.events.conversions method)": [[87, "libcasm.monte.events.Conversions.l_to_asym"]], "l_to_b() (libcasm.monte.events.conversions method)": [[88, "libcasm.monte.events.Conversions.l_to_b"]], "l_to_basis_cart() (libcasm.monte.events.conversions method)": [[89, "libcasm.monte.events.Conversions.l_to_basis_cart"]], "l_to_basis_frac() (libcasm.monte.events.conversions method)": [[90, "libcasm.monte.events.Conversions.l_to_basis_frac"]], "l_to_bijk() (libcasm.monte.events.conversions method)": [[91, "libcasm.monte.events.Conversions.l_to_bijk"]], "l_to_cart() (libcasm.monte.events.conversions method)": [[92, "libcasm.monte.events.Conversions.l_to_cart"]], "l_to_frac() (libcasm.monte.events.conversions method)": [[93, "libcasm.monte.events.Conversions.l_to_frac"]], "l_to_ijk() (libcasm.monte.events.conversions method)": [[94, "libcasm.monte.events.Conversions.l_to_ijk"]], "l_to_unitl() (libcasm.monte.events.conversions method)": [[95, "libcasm.monte.events.Conversions.l_to_unitl"]], "lat_column_mat() (libcasm.monte.events.conversions method)": [[96, "libcasm.monte.events.Conversions.lat_column_mat"]], "make_with_custom_asym() (libcasm.monte.events.conversions static method)": [[97, "libcasm.monte.events.Conversions.make_with_custom_asym"]], "make_with_custom_unitcell() (libcasm.monte.events.conversions static method)": [[98, "libcasm.monte.events.Conversions.make_with_custom_unitcell"]], "occ_size() (libcasm.monte.events.conversions method)": [[99, "libcasm.monte.events.Conversions.occ_size"]], "occ_to_species_index() (libcasm.monte.events.conversions method)": [[100, "libcasm.monte.events.Conversions.occ_to_species_index"]], "site_index_converter() (libcasm.monte.events.conversions method)": [[101, "libcasm.monte.events.Conversions.site_index_converter"]], "species_allowed() (libcasm.monte.events.conversions method)": [[102, "libcasm.monte.events.Conversions.species_allowed"]], "species_index_to_atoms_size() (libcasm.monte.events.conversions method)": [[103, "libcasm.monte.events.Conversions.species_index_to_atoms_size"]], "species_index_to_name() (libcasm.monte.events.conversions method)": [[104, "libcasm.monte.events.Conversions.species_index_to_name"]], "species_index_to_occupant() (libcasm.monte.events.conversions method)": [[105, "libcasm.monte.events.Conversions.species_index_to_occupant"]], "species_name_to_index() (libcasm.monte.events.conversions method)": [[106, "libcasm.monte.events.Conversions.species_name_to_index"]], "species_size() (libcasm.monte.events.conversions method)": [[107, "libcasm.monte.events.Conversions.species_size"]], "species_to_occ_index() (libcasm.monte.events.conversions method)": [[108, "libcasm.monte.events.Conversions.species_to_occ_index"]], "transformation_matrix_to_super() (libcasm.monte.events.conversions method)": [[109, "libcasm.monte.events.Conversions.transformation_matrix_to_super"]], "unit_site_index_converter() (libcasm.monte.events.conversions method)": [[110, "libcasm.monte.events.Conversions.unit_site_index_converter"]], "unit_transformation_matrix_to_super() (libcasm.monte.events.conversions method)": [[111, "libcasm.monte.events.Conversions.unit_transformation_matrix_to_super"]], "unitcell_index_converter() (libcasm.monte.events.conversions method)": [[112, "libcasm.monte.events.Conversions.unitcell_index_converter"]], "unitl_size() (libcasm.monte.events.conversions method)": [[113, "libcasm.monte.events.Conversions.unitl_size"]], "unitl_to_asym() (libcasm.monte.events.conversions method)": [[114, "libcasm.monte.events.Conversions.unitl_to_asym"]], "unitl_to_b() (libcasm.monte.events.conversions method)": [[115, "libcasm.monte.events.Conversions.unitl_to_b"]], "unitl_to_bijk() (libcasm.monte.events.conversions method)": [[116, "libcasm.monte.events.Conversions.unitl_to_bijk"]], "intvector (class in libcasm.monte.events)": [[117, "libcasm.monte.events.IntVector"]], "append() (libcasm.monte.events.intvector method)": [[118, "libcasm.monte.events.IntVector.append"]], "clear() (libcasm.monte.events.intvector method)": [[119, "libcasm.monte.events.IntVector.clear"]], "count() (libcasm.monte.events.intvector method)": [[120, "libcasm.monte.events.IntVector.count"]], "extend() (libcasm.monte.events.intvector method)": [[121, "libcasm.monte.events.IntVector.extend"]], "insert() (libcasm.monte.events.intvector method)": [[122, "libcasm.monte.events.IntVector.insert"]], "pop() (libcasm.monte.events.intvector method)": [[123, "libcasm.monte.events.IntVector.pop"]], "remove() (libcasm.monte.events.intvector method)": [[124, "libcasm.monte.events.IntVector.remove"]], "longvector (class in libcasm.monte.events)": [[125, "libcasm.monte.events.LongVector"]], "append() (libcasm.monte.events.longvector method)": [[126, "libcasm.monte.events.LongVector.append"]], "clear() (libcasm.monte.events.longvector method)": [[127, "libcasm.monte.events.LongVector.clear"]], "count() (libcasm.monte.events.longvector method)": [[128, "libcasm.monte.events.LongVector.count"]], "extend() (libcasm.monte.events.longvector method)": [[129, "libcasm.monte.events.LongVector.extend"]], "insert() (libcasm.monte.events.longvector method)": [[130, "libcasm.monte.events.LongVector.insert"]], "pop() (libcasm.monte.events.longvector method)": [[131, "libcasm.monte.events.LongVector.pop"]], "remove() (libcasm.monte.events.longvector method)": [[132, "libcasm.monte.events.LongVector.remove"]], "mol (class in libcasm.monte.events)": [[133, "libcasm.monte.events.Mol"]], "asymmetric_unit_index (libcasm.monte.events.mol property)": [[134, "libcasm.monte.events.Mol.asymmetric_unit_index"]], "component_id (libcasm.monte.events.mol property)": [[135, "libcasm.monte.events.Mol.component_id"]], "id (libcasm.monte.events.mol property)": [[136, "libcasm.monte.events.Mol.id"]], "linear_site_index (libcasm.monte.events.mol property)": [[137, "libcasm.monte.events.Mol.linear_site_index"]], "mol_location_index (libcasm.monte.events.mol property)": [[138, "libcasm.monte.events.Mol.mol_location_index"]], "molvector (class in libcasm.monte.events)": [[139, "libcasm.monte.events.MolVector"]], "append() (libcasm.monte.events.molvector method)": [[140, "libcasm.monte.events.MolVector.append"]], "clear() (libcasm.monte.events.molvector method)": [[141, "libcasm.monte.events.MolVector.clear"]], "extend() (libcasm.monte.events.molvector method)": [[142, "libcasm.monte.events.MolVector.extend"]], "insert() (libcasm.monte.events.molvector method)": [[143, "libcasm.monte.events.MolVector.insert"]], "pop() (libcasm.monte.events.molvector method)": [[144, "libcasm.monte.events.MolVector.pop"]], "multioccswap (class in libcasm.monte.events)": [[145, "libcasm.monte.events.MultiOccSwap"]], "from_dict() (libcasm.monte.events.multioccswap static method)": [[146, "libcasm.monte.events.MultiOccSwap.from_dict"]], "reverse() (libcasm.monte.events.multioccswap method)": [[147, "libcasm.monte.events.MultiOccSwap.reverse"]], "sort() (libcasm.monte.events.multioccswap method)": [[148, "libcasm.monte.events.MultiOccSwap.sort"]], "sorted() (libcasm.monte.events.multioccswap method)": [[149, "libcasm.monte.events.MultiOccSwap.sorted"]], "swaps (libcasm.monte.events.multioccswap property)": [[150, "libcasm.monte.events.MultiOccSwap.swaps"]], "to_dict() (libcasm.monte.events.multioccswap method)": [[151, "libcasm.monte.events.MultiOccSwap.to_dict"]], "total_count (libcasm.monte.events.multioccswap property)": [[152, "libcasm.monte.events.MultiOccSwap.total_count"]], "occcandidate (class in libcasm.monte.events)": [[153, "libcasm.monte.events.OccCandidate"]], "asymmetric_unit_index (libcasm.monte.events.occcandidate property)": [[154, "libcasm.monte.events.OccCandidate.asymmetric_unit_index"]], "from_dict() (libcasm.monte.events.occcandidate static method)": [[155, "libcasm.monte.events.OccCandidate.from_dict"]], "is_valid() (libcasm.monte.events.occcandidate method)": [[156, "libcasm.monte.events.OccCandidate.is_valid"]], "species_index (libcasm.monte.events.occcandidate property)": [[157, "libcasm.monte.events.OccCandidate.species_index"]], "to_dict() (libcasm.monte.events.occcandidate method)": [[158, "libcasm.monte.events.OccCandidate.to_dict"]], "occcandidatelist (class in libcasm.monte.events)": [[159, "libcasm.monte.events.OccCandidateList"]], "from_dict() (libcasm.monte.events.occcandidatelist static method)": [[160, "libcasm.monte.events.OccCandidateList.from_dict"]], "index() (libcasm.monte.events.occcandidatelist method)": [[161, "libcasm.monte.events.OccCandidateList.index"]], "matching_index() (libcasm.monte.events.occcandidatelist method)": [[162, "libcasm.monte.events.OccCandidateList.matching_index"]], "to_dict() (libcasm.monte.events.occcandidatelist method)": [[163, "libcasm.monte.events.OccCandidateList.to_dict"]], "occevent (class in libcasm.monte.events)": [[164, "libcasm.monte.events.OccEvent"]], "atom_traj (libcasm.monte.events.occevent property)": [[165, "libcasm.monte.events.OccEvent.atom_traj"]], "linear_site_index (libcasm.monte.events.occevent property)": [[166, "libcasm.monte.events.OccEvent.linear_site_index"]], "new_occ (libcasm.monte.events.occevent property)": [[167, "libcasm.monte.events.OccEvent.new_occ"]], "occ_transform (libcasm.monte.events.occevent property)": [[168, "libcasm.monte.events.OccEvent.occ_transform"]], "occlocation (class in libcasm.monte.events)": [[169, "libcasm.monte.events.OccLocation"]], "apply() (libcasm.monte.events.occlocation method)": [[170, "libcasm.monte.events.OccLocation.apply"]], "atom() (libcasm.monte.events.occlocation method)": [[171, "libcasm.monte.events.OccLocation.atom"]], "atom_positions_cart() (libcasm.monte.events.occlocation method)": [[172, "libcasm.monte.events.OccLocation.atom_positions_cart"]], "atom_positions_cart_within() (libcasm.monte.events.occlocation method)": [[173, "libcasm.monte.events.OccLocation.atom_positions_cart_within"]], "atom_size() (libcasm.monte.events.occlocation method)": [[174, "libcasm.monte.events.OccLocation.atom_size"]], "cand_size() (libcasm.monte.events.occlocation method)": [[175, "libcasm.monte.events.OccLocation.cand_size"]], "cand_size_by_candidate_index() (libcasm.monte.events.occlocation method)": [[176, "libcasm.monte.events.OccLocation.cand_size_by_candidate_index"]], "candidate_list() (libcasm.monte.events.occlocation method)": [[177, "libcasm.monte.events.OccLocation.candidate_list"]], "choose_mol() (libcasm.monte.events.occlocation method)": [[178, "libcasm.monte.events.OccLocation.choose_mol"]], "choose_mol_by_candidate_index() (libcasm.monte.events.occlocation method)": [[179, "libcasm.monte.events.OccLocation.choose_mol_by_candidate_index"]], "convert() (libcasm.monte.events.occlocation method)": [[180, "libcasm.monte.events.OccLocation.convert"]], "current_atom_n_jumps() (libcasm.monte.events.occlocation method)": [[181, "libcasm.monte.events.OccLocation.current_atom_n_jumps"]], "current_atom_names() (libcasm.monte.events.occlocation method)": [[182, "libcasm.monte.events.OccLocation.current_atom_names"]], "current_atom_position_index() (libcasm.monte.events.occlocation method)": [[183, "libcasm.monte.events.OccLocation.current_atom_position_index"]], "current_atom_species_index() (libcasm.monte.events.occlocation method)": [[184, "libcasm.monte.events.OccLocation.current_atom_species_index"]], "initial_atom_position_index() (libcasm.monte.events.occlocation method)": [[185, "libcasm.monte.events.OccLocation.initial_atom_position_index"]], "initial_atom_species_index() (libcasm.monte.events.occlocation method)": [[186, "libcasm.monte.events.OccLocation.initial_atom_species_index"]], "initialize() (libcasm.monte.events.occlocation method)": [[187, "libcasm.monte.events.OccLocation.initialize"]], "linear_site_index_to_mol_id() (libcasm.monte.events.occlocation method)": [[188, "libcasm.monte.events.OccLocation.linear_site_index_to_mol_id"]], "mol() (libcasm.monte.events.occlocation method)": [[189, "libcasm.monte.events.OccLocation.mol"]], "mol_id() (libcasm.monte.events.occlocation method)": [[190, "libcasm.monte.events.OccLocation.mol_id"]], "mol_id_by_candidate_index() (libcasm.monte.events.occlocation method)": [[191, "libcasm.monte.events.OccLocation.mol_id_by_candidate_index"]], "mol_size() (libcasm.monte.events.occlocation method)": [[192, "libcasm.monte.events.OccLocation.mol_size"]], "occswap (class in libcasm.monte.events)": [[193, "libcasm.monte.events.OccSwap"]], "first (libcasm.monte.events.occswap property)": [[194, "libcasm.monte.events.OccSwap.first"]], "from_dict() (libcasm.monte.events.occswap static method)": [[195, "libcasm.monte.events.OccSwap.from_dict"]], "is_valid() (libcasm.monte.events.occswap method)": [[196, "libcasm.monte.events.OccSwap.is_valid"]], "reverse() (libcasm.monte.events.occswap method)": [[197, "libcasm.monte.events.OccSwap.reverse"]], "second (libcasm.monte.events.occswap property)": [[198, "libcasm.monte.events.OccSwap.second"]], "sort() (libcasm.monte.events.occswap method)": [[199, "libcasm.monte.events.OccSwap.sort"]], "sorted() (libcasm.monte.events.occswap method)": [[200, "libcasm.monte.events.OccSwap.sorted"]], "to_dict() (libcasm.monte.events.occswap method)": [[201, "libcasm.monte.events.OccSwap.to_dict"]], "occswapcountmap (class in libcasm.monte.events)": [[202, "libcasm.monte.events.OccSwapCountMap"]], "items() (libcasm.monte.events.occswapcountmap method)": [[203, "libcasm.monte.events.OccSwapCountMap.items"]], "keys() (libcasm.monte.events.occswapcountmap method)": [[204, "libcasm.monte.events.OccSwapCountMap.keys"]], "values() (libcasm.monte.events.occswapcountmap method)": [[205, "libcasm.monte.events.OccSwapCountMap.values"]], "occtransform (class in libcasm.monte.events)": [[206, "libcasm.monte.events.OccTransform"]], "asym (libcasm.monte.events.occtransform property)": [[207, "libcasm.monte.events.OccTransform.asym"]], "from_species (libcasm.monte.events.occtransform property)": [[208, "libcasm.monte.events.OccTransform.from_species"]], "linear_site_index (libcasm.monte.events.occtransform property)": [[209, "libcasm.monte.events.OccTransform.linear_site_index"]], "mol_id (libcasm.monte.events.occtransform property)": [[210, "libcasm.monte.events.OccTransform.mol_id"]], "to_species (libcasm.monte.events.occtransform property)": [[211, "libcasm.monte.events.OccTransform.to_species"]], "occtransformvector (class in libcasm.monte.events)": [[212, "libcasm.monte.events.OccTransformVector"]], "append() (libcasm.monte.events.occtransformvector method)": [[213, "libcasm.monte.events.OccTransformVector.append"]], "clear() (libcasm.monte.events.occtransformvector method)": [[214, "libcasm.monte.events.OccTransformVector.clear"]], "extend() (libcasm.monte.events.occtransformvector method)": [[215, "libcasm.monte.events.OccTransformVector.extend"]], "insert() (libcasm.monte.events.occtransformvector method)": [[216, "libcasm.monte.events.OccTransformVector.insert"]], "pop() (libcasm.monte.events.occtransformvector method)": [[217, "libcasm.monte.events.OccTransformVector.pop"]], "choose_canonical_swap() (in module libcasm.monte.events)": [[218, "libcasm.monte.events.choose_canonical_swap"]], "choose_semigrand_canonical_multiswap() (in module libcasm.monte.events)": [[219, "libcasm.monte.events.choose_semigrand_canonical_multiswap"]], "choose_semigrand_canonical_swap() (in module libcasm.monte.events)": [[220, "libcasm.monte.events.choose_semigrand_canonical_swap"]], "is_allowed_canonical_swap() (in module libcasm.monte.events)": [[221, "libcasm.monte.events.is_allowed_canonical_swap"]], "make_canonical_swaps() (in module libcasm.monte.events)": [[222, "libcasm.monte.events.make_canonical_swaps"]], "make_multiswaps() (in module libcasm.monte.events)": [[223, "libcasm.monte.events.make_multiswaps"]], "make_semigrand_canonical_swaps() (in module libcasm.monte.events)": [[224, "libcasm.monte.events.make_semigrand_canonical_swaps"]], "propose_canonical_event() (in module libcasm.monte.events)": [[225, "libcasm.monte.events.propose_canonical_event"]], "propose_canonical_event_from_swap() (in module libcasm.monte.events)": [[226, "libcasm.monte.events.propose_canonical_event_from_swap"]], "propose_semigrand_canonical_event() (in module libcasm.monte.events)": [[227, "libcasm.monte.events.propose_semigrand_canonical_event"]], "propose_semigrand_canonical_event_from_multiswap() (in module libcasm.monte.events)": [[228, "libcasm.monte.events.propose_semigrand_canonical_event_from_multiswap"]], "propose_semigrand_canonical_event_from_swap() (in module libcasm.monte.events)": [[229, "libcasm.monte.events.propose_semigrand_canonical_event_from_swap"]], "propose_semigrand_canonical_multiswap_event() (in module libcasm.monte.events)": [[230, "libcasm.monte.events.propose_semigrand_canonical_multiswap_event"]], "swaps_allowed_per_unitcell() (in module libcasm.monte.events)": [[231, "libcasm.monte.events.swaps_allowed_per_unitcell"]], "libcasm.monte.ising_cpp": [[232, "module-libcasm.monte.ising_cpp"]], "isingconfiguration (class in libcasm.monte.ising_cpp)": [[233, "libcasm.monte.ising_cpp.IsingConfiguration"]], "from_dict() (libcasm.monte.ising_cpp.isingconfiguration static method)": [[234, "libcasm.monte.ising_cpp.IsingConfiguration.from_dict"]], "from_linear_site_index() (libcasm.monte.ising_cpp.isingconfiguration method)": [[235, "libcasm.monte.ising_cpp.IsingConfiguration.from_linear_site_index"]], "n_sites (libcasm.monte.ising_cpp.isingconfiguration property)": [[236, "libcasm.monte.ising_cpp.IsingConfiguration.n_sites"]], "n_unitcells (libcasm.monte.ising_cpp.isingconfiguration property)": [[237, "libcasm.monte.ising_cpp.IsingConfiguration.n_unitcells"]], "n_variable_sites (libcasm.monte.ising_cpp.isingconfiguration property)": [[238, "libcasm.monte.ising_cpp.IsingConfiguration.n_variable_sites"]], "occ() (libcasm.monte.ising_cpp.isingconfiguration method)": [[239, "libcasm.monte.ising_cpp.IsingConfiguration.occ"]], "occupation() (libcasm.monte.ising_cpp.isingconfiguration method)": [[240, "libcasm.monte.ising_cpp.IsingConfiguration.occupation"]], "set_occ() (libcasm.monte.ising_cpp.isingconfiguration method)": [[241, "libcasm.monte.ising_cpp.IsingConfiguration.set_occ"]], "set_occupation() (libcasm.monte.ising_cpp.isingconfiguration method)": [[242, "libcasm.monte.ising_cpp.IsingConfiguration.set_occupation"]], "shape (libcasm.monte.ising_cpp.isingconfiguration property)": [[243, "libcasm.monte.ising_cpp.IsingConfiguration.shape"]], "to_dict() (libcasm.monte.ising_cpp.isingconfiguration method)": [[244, "libcasm.monte.ising_cpp.IsingConfiguration.to_dict"]], "to_linear_site_index() (libcasm.monte.ising_cpp.isingconfiguration method)": [[245, "libcasm.monte.ising_cpp.IsingConfiguration.to_linear_site_index"]], "within() (libcasm.monte.ising_cpp.isingconfiguration method)": [[246, "libcasm.monte.ising_cpp.IsingConfiguration.within"]], "isingformationenergy (class in libcasm.monte.ising_cpp)": [[247, "libcasm.monte.ising_cpp.IsingFormationEnergy"]], "occ_delta_per_supercell() (libcasm.monte.ising_cpp.isingformationenergy method)": [[248, "libcasm.monte.ising_cpp.IsingFormationEnergy.occ_delta_per_supercell"]], "per_supercell() (libcasm.monte.ising_cpp.isingformationenergy method)": [[249, "libcasm.monte.ising_cpp.IsingFormationEnergy.per_supercell"]], "per_unitcell() (libcasm.monte.ising_cpp.isingformationenergy method)": [[250, "libcasm.monte.ising_cpp.IsingFormationEnergy.per_unitcell"]], "set_state() (libcasm.monte.ising_cpp.isingformationenergy method)": [[251, "libcasm.monte.ising_cpp.IsingFormationEnergy.set_state"]], "isingparamcomposition (class in libcasm.monte.ising_cpp)": [[252, "libcasm.monte.ising_cpp.IsingParamComposition"]], "n_independent_compositions() (libcasm.monte.ising_cpp.isingparamcomposition method)": [[253, "libcasm.monte.ising_cpp.IsingParamComposition.n_independent_compositions"]], "occ_delta_per_supercell() (libcasm.monte.ising_cpp.isingparamcomposition method)": [[254, "libcasm.monte.ising_cpp.IsingParamComposition.occ_delta_per_supercell"]], "per_supercell() (libcasm.monte.ising_cpp.isingparamcomposition method)": [[255, "libcasm.monte.ising_cpp.IsingParamComposition.per_supercell"]], "per_unitcell() (libcasm.monte.ising_cpp.isingparamcomposition method)": [[256, "libcasm.monte.ising_cpp.IsingParamComposition.per_unitcell"]], "set_state() (libcasm.monte.ising_cpp.isingparamcomposition method)": [[257, "libcasm.monte.ising_cpp.IsingParamComposition.set_state"]], "isingstate (class in libcasm.monte.ising_cpp)": [[258, "libcasm.monte.ising_cpp.IsingState"]], "conditions (libcasm.monte.ising_cpp.isingstate property)": [[259, "libcasm.monte.ising_cpp.IsingState.conditions"]], "configuration (libcasm.monte.ising_cpp.isingstate property)": [[260, "libcasm.monte.ising_cpp.IsingState.configuration"]], "from_dict() (libcasm.monte.ising_cpp.isingstate static method)": [[261, "libcasm.monte.ising_cpp.IsingState.from_dict"]], "properties (libcasm.monte.ising_cpp.isingstate property)": [[262, "libcasm.monte.ising_cpp.IsingState.properties"]], "to_dict() (libcasm.monte.ising_cpp.isingstate method)": [[263, "libcasm.monte.ising_cpp.IsingState.to_dict"]], "isingsystem (class in libcasm.monte.ising_cpp)": [[264, "libcasm.monte.ising_cpp.IsingSystem"]], "formation_energy_calculator (libcasm.monte.ising_cpp.isingsystem property)": [[265, "libcasm.monte.ising_cpp.IsingSystem.formation_energy_calculator"]], "param_composition_calculator (libcasm.monte.ising_cpp.isingsystem property)": [[266, "libcasm.monte.ising_cpp.IsingSystem.param_composition_calculator"]], "libcasm.monte.ising_cpp.semigrand_canonical": [[267, "module-libcasm.monte.ising_cpp.semigrand_canonical"]], "semigrandcanonicalcalculator (class in libcasm.monte.ising_cpp.semigrand_canonical)": [[268, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator"]], "conditions (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalcalculator property)": [[269, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.conditions"]], "data (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalcalculator property)": [[270, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.data"]], "default_json_sampling_functions() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalcalculator method)": [[271, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.default_json_sampling_functions"]], "default_sampling_functions() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalcalculator method)": [[272, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.default_sampling_functions"]], "formation_energy_calculator (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalcalculator property)": [[273, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.formation_energy_calculator"]], "param_composition_calculator (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalcalculator property)": [[274, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.param_composition_calculator"]], "potential (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalcalculator property)": [[275, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.potential"]], "run() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalcalculator method)": [[276, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.run"]], "state (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalcalculator property)": [[277, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.state"]], "system (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalcalculator property)": [[278, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.system"]], "semigrandcanonicalconditions (class in libcasm.monte.ising_cpp.semigrand_canonical)": [[279, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions"]], "exchange_potential (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalconditions property)": [[280, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.exchange_potential"]], "from_dict() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalconditions static method)": [[281, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.from_dict"]], "from_values() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalconditions static method)": [[282, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.from_values"]], "temperature (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalconditions property)": [[283, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.temperature"]], "to_dict() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalconditions method)": [[284, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.to_dict"]], "to_values() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalconditions method)": [[285, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.to_values"]], "semigrandcanonicaldata (class in libcasm.monte.ising_cpp.semigrand_canonical)": [[286, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData"]], "acceptance_rate() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaldata method)": [[287, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.acceptance_rate"]], "completion_check (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaldata property)": [[288, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.completion_check"]], "json_samplers (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaldata property)": [[289, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.json_samplers"]], "json_sampling_functions (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaldata property)": [[290, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.json_sampling_functions"]], "n_accept (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaldata property)": [[291, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.n_accept"]], "n_pass (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaldata property)": [[292, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.n_pass"]], "n_reject (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaldata property)": [[293, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.n_reject"]], "n_steps_per_pass (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaldata property)": [[294, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.n_steps_per_pass"]], "rejection_rate() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaldata method)": [[295, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.rejection_rate"]], "reset() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaldata method)": [[296, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.reset"]], "sample_weight (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaldata property)": [[297, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.sample_weight"]], "samplers (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaldata property)": [[298, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.samplers"]], "sampling_functions (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaldata property)": [[299, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.sampling_functions"]], "to_dict() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaldata method)": [[300, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.to_dict"]], "semigrandcanonicaleventgenerator (class in libcasm.monte.ising_cpp.semigrand_canonical)": [[301, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalEventGenerator"]], "apply() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaleventgenerator method)": [[302, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalEventGenerator.apply"]], "propose() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaleventgenerator method)": [[303, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalEventGenerator.propose"]], "set_state() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaleventgenerator method)": [[304, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalEventGenerator.set_state"]], "semigrandcanonicalpotential (class in libcasm.monte.ising_cpp.semigrand_canonical)": [[305, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential"]], "occ_delta_per_supercell() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalpotential method)": [[306, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential.occ_delta_per_supercell"]], "occ_event_delta_per_supercell() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalpotential method)": [[307, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential.occ_event_delta_per_supercell"]], "per_supercell() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalpotential method)": [[308, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential.per_supercell"]], "per_unitcell() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalpotential method)": [[309, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential.per_unitcell"]], "set_state() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalpotential method)": [[310, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential.set_state"]], "default_write_status() (in module libcasm.monte.ising_cpp.semigrand_canonical)": [[311, "libcasm.monte.ising_cpp.semigrand_canonical.default_write_status"]], "libcasm.monte.ising_py": [[312, "module-libcasm.monte.ising_py"]], "isingconfiguration (class in libcasm.monte.ising_py)": [[313, "libcasm.monte.ising_py.IsingConfiguration"]], "from_dict() (libcasm.monte.ising_py.isingconfiguration static method)": [[314, "libcasm.monte.ising_py.IsingConfiguration.from_dict"]], "from_linear_site_index() (libcasm.monte.ising_py.isingconfiguration method)": [[315, "libcasm.monte.ising_py.IsingConfiguration.from_linear_site_index"]], "n_sites (libcasm.monte.ising_py.isingconfiguration attribute)": [[316, "libcasm.monte.ising_py.IsingConfiguration.n_sites"]], "n_unitcells (libcasm.monte.ising_py.isingconfiguration attribute)": [[317, "libcasm.monte.ising_py.IsingConfiguration.n_unitcells"]], "n_variable_sites (libcasm.monte.ising_py.isingconfiguration attribute)": [[318, "libcasm.monte.ising_py.IsingConfiguration.n_variable_sites"]], "occ() (libcasm.monte.ising_py.isingconfiguration method)": [[319, "libcasm.monte.ising_py.IsingConfiguration.occ"]], "occupation() (libcasm.monte.ising_py.isingconfiguration method)": [[320, "libcasm.monte.ising_py.IsingConfiguration.occupation"]], "set_occ() (libcasm.monte.ising_py.isingconfiguration method)": [[321, "libcasm.monte.ising_py.IsingConfiguration.set_occ"]], "set_occupation() (libcasm.monte.ising_py.isingconfiguration method)": [[322, "libcasm.monte.ising_py.IsingConfiguration.set_occupation"]], "shape (libcasm.monte.ising_py.isingconfiguration attribute)": [[323, "libcasm.monte.ising_py.IsingConfiguration.shape"]], "to_dict() (libcasm.monte.ising_py.isingconfiguration method)": [[324, "libcasm.monte.ising_py.IsingConfiguration.to_dict"]], "to_linear_site_index() (libcasm.monte.ising_py.isingconfiguration method)": [[325, "libcasm.monte.ising_py.IsingConfiguration.to_linear_site_index"]], "within() (libcasm.monte.ising_py.isingconfiguration method)": [[326, "libcasm.monte.ising_py.IsingConfiguration.within"]], "isingformationenergy (class in libcasm.monte.ising_py)": [[327, "libcasm.monte.ising_py.IsingFormationEnergy"]], "j (libcasm.monte.ising_py.isingformationenergy attribute)": [[328, "libcasm.monte.ising_py.IsingFormationEnergy.J"]], "lattice_type (libcasm.monte.ising_py.isingformationenergy attribute)": [[329, "libcasm.monte.ising_py.IsingFormationEnergy.lattice_type"]], "occ_delta_per_supercell() (libcasm.monte.ising_py.isingformationenergy method)": [[330, "libcasm.monte.ising_py.IsingFormationEnergy.occ_delta_per_supercell"]], "per_supercell() (libcasm.monte.ising_py.isingformationenergy method)": [[331, "libcasm.monte.ising_py.IsingFormationEnergy.per_supercell"]], "per_unitcell() (libcasm.monte.ising_py.isingformationenergy method)": [[332, "libcasm.monte.ising_py.IsingFormationEnergy.per_unitcell"]], "set_state() (libcasm.monte.ising_py.isingformationenergy method)": [[333, "libcasm.monte.ising_py.IsingFormationEnergy.set_state"]], "state (libcasm.monte.ising_py.isingformationenergy attribute)": [[334, "libcasm.monte.ising_py.IsingFormationEnergy.state"]], "isingparamcomposition (class in libcasm.monte.ising_py)": [[335, "libcasm.monte.ising_py.IsingParamComposition"]], "n_independent_compositions() (libcasm.monte.ising_py.isingparamcomposition method)": [[336, "libcasm.monte.ising_py.IsingParamComposition.n_independent_compositions"]], "occ_delta_per_supercell() (libcasm.monte.ising_py.isingparamcomposition method)": [[337, "libcasm.monte.ising_py.IsingParamComposition.occ_delta_per_supercell"]], "per_supercell() (libcasm.monte.ising_py.isingparamcomposition method)": [[338, "libcasm.monte.ising_py.IsingParamComposition.per_supercell"]], "per_unitcell() (libcasm.monte.ising_py.isingparamcomposition method)": [[339, "libcasm.monte.ising_py.IsingParamComposition.per_unitcell"]], "set_state() (libcasm.monte.ising_py.isingparamcomposition method)": [[340, "libcasm.monte.ising_py.IsingParamComposition.set_state"]], "isingstate (class in libcasm.monte.ising_py)": [[341, "libcasm.monte.ising_py.IsingState"]], "conditions (libcasm.monte.ising_py.isingstate attribute)": [[341, "libcasm.monte.ising_py.IsingState.conditions"]], "configuration (libcasm.monte.ising_py.isingstate attribute)": [[341, "libcasm.monte.ising_py.IsingState.configuration"]], "properties (libcasm.monte.ising_py.isingstate attribute)": [[341, "libcasm.monte.ising_py.IsingState.properties"]], "isingsystem (class in libcasm.monte.ising_py)": [[342, "libcasm.monte.ising_py.IsingSystem"]], "libcasm.monte.ising_py.semigrand_canonical": [[343, "module-libcasm.monte.ising_py.semigrand_canonical"]], "semigrandcanonicalcalculator (class in libcasm.monte.ising_py.semigrand_canonical)": [[344, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator"]], "conditions (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalcalculator attribute)": [[345, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.conditions"]], "data (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalcalculator attribute)": [[346, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.data"]], "formation_energy_calculator (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalcalculator attribute)": [[347, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.formation_energy_calculator"]], "param_composition_calculator (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalcalculator attribute)": [[348, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.param_composition_calculator"]], "potential (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalcalculator attribute)": [[349, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.potential"]], "run() (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalcalculator method)": [[350, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.run"]], "state (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalcalculator attribute)": [[351, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.state"]], "system (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalcalculator attribute)": [[352, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.system"]], "semigrandcanonicalconditions (class in libcasm.monte.ising_py.semigrand_canonical)": [[353, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions"]], "exchange_potential (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalconditions attribute)": [[354, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.exchange_potential"]], "from_dict() (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalconditions static method)": [[355, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.from_dict"]], "from_values() (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalconditions static method)": [[356, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.from_values"]], "temperature (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalconditions attribute)": [[357, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.temperature"]], "to_dict() (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalconditions static method)": [[358, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.to_dict"]], "to_values() (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalconditions method)": [[359, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.to_values"]], "semigrandcanonicaldata (class in libcasm.monte.ising_py.semigrand_canonical)": [[360, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData"]], "acceptance_rate() (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaldata method)": [[361, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.acceptance_rate"]], "completion_check (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaldata attribute)": [[362, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.completion_check"]], "n_accept (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaldata attribute)": [[363, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.n_accept"]], "n_pass (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaldata attribute)": [[364, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.n_pass"]], "n_reject (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaldata attribute)": [[365, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.n_reject"]], "n_steps_per_pass (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaldata attribute)": [[366, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.n_steps_per_pass"]], "rejection_rate() (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaldata method)": [[367, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.rejection_rate"]], "reset() (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaldata method)": [[368, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.reset"]], "sample_weight (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaldata attribute)": [[369, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.sample_weight"]], "samplers (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaldata attribute)": [[370, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.samplers"]], "sampling_functions (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaldata attribute)": [[371, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.sampling_functions"]], "to_dict() (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaldata method)": [[372, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.to_dict"]], "semigrandcanonicaleventgenerator (class in libcasm.monte.ising_py.semigrand_canonical)": [[373, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator"]], "apply() (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaleventgenerator method)": [[374, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator.apply"]], "occ_event (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaleventgenerator attribute)": [[375, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator.occ_event"]], "propose() (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaleventgenerator method)": [[376, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator.propose"]], "set_state() (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaleventgenerator method)": [[377, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator.set_state"]], "state (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaleventgenerator attribute)": [[378, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator.state"]], "semigrandcanonicalpotential (class in libcasm.monte.ising_py.semigrand_canonical)": [[379, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential"]], "conditions (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalpotential attribute)": [[380, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.conditions"]], "formation_energy_calculator (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalpotential attribute)": [[381, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.formation_energy_calculator"]], "occ_delta_per_supercell() (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalpotential method)": [[382, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.occ_delta_per_supercell"]], "param_composition_calculator (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalpotential attribute)": [[383, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.param_composition_calculator"]], "per_supercell() (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalpotential method)": [[384, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.per_supercell"]], "per_unitcell() (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalpotential method)": [[385, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.per_unitcell"]], "set_state() (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalpotential method)": [[386, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.set_state"]], "state (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalpotential attribute)": [[387, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.state"]], "system (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalpotential attribute)": [[388, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.system"]], "default_write_status() (in module libcasm.monte.ising_py.semigrand_canonical)": [[389, "libcasm.monte.ising_py.semigrand_canonical.default_write_status"]], "make_formation_energy_f() (in module libcasm.monte.ising_py.semigrand_canonical)": [[390, "libcasm.monte.ising_py.semigrand_canonical.make_formation_energy_f"]], "make_param_composition_f() (in module libcasm.monte.ising_py.semigrand_canonical)": [[391, "libcasm.monte.ising_py.semigrand_canonical.make_param_composition_f"]], "make_potential_energy_f() (in module libcasm.monte.ising_py.semigrand_canonical)": [[392, "libcasm.monte.ising_py.semigrand_canonical.make_potential_energy_f"]], "libcasm.monte.methods": [[393, "module-libcasm.monte.methods"]], "basicoccupationmetropolisdata (class in libcasm.monte.methods)": [[394, "libcasm.monte.methods.BasicOccupationMetropolisData"]], "acceptance_rate() (libcasm.monte.methods.basicoccupationmetropolisdata method)": [[395, "libcasm.monte.methods.BasicOccupationMetropolisData.acceptance_rate"]], "completion_check (libcasm.monte.methods.basicoccupationmetropolisdata property)": [[396, "libcasm.monte.methods.BasicOccupationMetropolisData.completion_check"]], "json_samplers (libcasm.monte.methods.basicoccupationmetropolisdata property)": [[397, "libcasm.monte.methods.BasicOccupationMetropolisData.json_samplers"]], "json_sampling_functions (libcasm.monte.methods.basicoccupationmetropolisdata property)": [[398, "libcasm.monte.methods.BasicOccupationMetropolisData.json_sampling_functions"]], "n_accept (libcasm.monte.methods.basicoccupationmetropolisdata property)": [[399, "libcasm.monte.methods.BasicOccupationMetropolisData.n_accept"]], "n_pass (libcasm.monte.methods.basicoccupationmetropolisdata property)": [[400, "libcasm.monte.methods.BasicOccupationMetropolisData.n_pass"]], "n_reject (libcasm.monte.methods.basicoccupationmetropolisdata property)": [[401, "libcasm.monte.methods.BasicOccupationMetropolisData.n_reject"]], "n_steps_per_pass (libcasm.monte.methods.basicoccupationmetropolisdata property)": [[402, "libcasm.monte.methods.BasicOccupationMetropolisData.n_steps_per_pass"]], "rejection_rate() (libcasm.monte.methods.basicoccupationmetropolisdata method)": [[403, "libcasm.monte.methods.BasicOccupationMetropolisData.rejection_rate"]], "sample_weight (libcasm.monte.methods.basicoccupationmetropolisdata property)": [[404, "libcasm.monte.methods.BasicOccupationMetropolisData.sample_weight"]], "samplers (libcasm.monte.methods.basicoccupationmetropolisdata property)": [[405, "libcasm.monte.methods.BasicOccupationMetropolisData.samplers"]], "sampling_functions (libcasm.monte.methods.basicoccupationmetropolisdata property)": [[406, "libcasm.monte.methods.BasicOccupationMetropolisData.sampling_functions"]], "to_dict() (libcasm.monte.methods.basicoccupationmetropolisdata method)": [[407, "libcasm.monte.methods.BasicOccupationMetropolisData.to_dict"]], "basic_occupation_metropolis() (in module libcasm.monte.methods)": [[408, "libcasm.monte.methods.basic_occupation_metropolis"]], "metropolis_acceptance() (in module libcasm.monte.methods)": [[409, "libcasm.monte.methods.metropolis_acceptance"]], "libcasm.monte.sampling": [[410, "module-libcasm.monte.sampling"]], "basicstatistics (class in libcasm.monte.sampling)": [[411, "libcasm.monte.sampling.BasicStatistics"]], "calculated_precision (libcasm.monte.sampling.basicstatistics property)": [[412, "libcasm.monte.sampling.BasicStatistics.calculated_precision"]], "mean (libcasm.monte.sampling.basicstatistics property)": [[413, "libcasm.monte.sampling.BasicStatistics.mean"]], "relative_precision() (libcasm.monte.sampling.basicstatistics method)": [[414, "libcasm.monte.sampling.BasicStatistics.relative_precision"]], "to_dict() (libcasm.monte.sampling.basicstatistics method)": [[415, "libcasm.monte.sampling.BasicStatistics.to_dict"]], "basicstatisticscalculator (class in libcasm.monte.sampling)": [[416, "libcasm.monte.sampling.BasicStatisticsCalculator"]], "calculate() (libcasm.monte.sampling.basicstatisticscalculator method)": [[417, "libcasm.monte.sampling.BasicStatisticsCalculator.calculate"]], "confidence (libcasm.monte.sampling.basicstatisticscalculator property)": [[418, "libcasm.monte.sampling.BasicStatisticsCalculator.confidence"]], "from_dict() (libcasm.monte.sampling.basicstatisticscalculator static method)": [[419, "libcasm.monte.sampling.BasicStatisticsCalculator.from_dict"]], "n_resamples (libcasm.monte.sampling.basicstatisticscalculator property)": [[420, "libcasm.monte.sampling.BasicStatisticsCalculator.n_resamples"]], "to_dict() (libcasm.monte.sampling.basicstatisticscalculator method)": [[421, "libcasm.monte.sampling.BasicStatisticsCalculator.to_dict"]], "weighted_observations_method (libcasm.monte.sampling.basicstatisticscalculator property)": [[422, "libcasm.monte.sampling.BasicStatisticsCalculator.weighted_observations_method"]], "completioncheck (class in libcasm.monte.sampling)": [[423, "libcasm.monte.sampling.CompletionCheck"]], "check() (libcasm.monte.sampling.completioncheck method)": [[424, "libcasm.monte.sampling.CompletionCheck.check"]], "count_and_time_check() (libcasm.monte.sampling.completioncheck method)": [[425, "libcasm.monte.sampling.CompletionCheck.count_and_time_check"]], "count_check() (libcasm.monte.sampling.completioncheck method)": [[426, "libcasm.monte.sampling.CompletionCheck.count_check"]], "params() (libcasm.monte.sampling.completioncheck method)": [[427, "libcasm.monte.sampling.CompletionCheck.params"]], "reset() (libcasm.monte.sampling.completioncheck method)": [[428, "libcasm.monte.sampling.CompletionCheck.reset"]], "results() (libcasm.monte.sampling.completioncheck method)": [[429, "libcasm.monte.sampling.CompletionCheck.results"]], "time_check() (libcasm.monte.sampling.completioncheck method)": [[430, "libcasm.monte.sampling.CompletionCheck.time_check"]], "completioncheckparams (class in libcasm.monte.sampling)": [[431, "libcasm.monte.sampling.CompletionCheckParams"]], "calc_statistics_f (libcasm.monte.sampling.completioncheckparams property)": [[432, "libcasm.monte.sampling.CompletionCheckParams.calc_statistics_f"]], "check_base (libcasm.monte.sampling.completioncheckparams property)": [[433, "libcasm.monte.sampling.CompletionCheckParams.check_base"]], "check_begin (libcasm.monte.sampling.completioncheckparams property)": [[434, "libcasm.monte.sampling.CompletionCheckParams.check_begin"]], "check_period (libcasm.monte.sampling.completioncheckparams property)": [[435, "libcasm.monte.sampling.CompletionCheckParams.check_period"]], "check_period_max (libcasm.monte.sampling.completioncheckparams property)": [[436, "libcasm.monte.sampling.CompletionCheckParams.check_period_max"]], "check_shift (libcasm.monte.sampling.completioncheckparams property)": [[437, "libcasm.monte.sampling.CompletionCheckParams.check_shift"]], "cutoff_params (libcasm.monte.sampling.completioncheckparams property)": [[438, "libcasm.monte.sampling.CompletionCheckParams.cutoff_params"]], "equilibration_check_f (libcasm.monte.sampling.completioncheckparams property)": [[439, "libcasm.monte.sampling.CompletionCheckParams.equilibration_check_f"]], "from_dict() (libcasm.monte.sampling.completioncheckparams static method)": [[440, "libcasm.monte.sampling.CompletionCheckParams.from_dict"]], "log_spacing (libcasm.monte.sampling.completioncheckparams property)": [[441, "libcasm.monte.sampling.CompletionCheckParams.log_spacing"]], "requested_precision (libcasm.monte.sampling.completioncheckparams property)": [[442, "libcasm.monte.sampling.CompletionCheckParams.requested_precision"]], "completioncheckresults (class in libcasm.monte.sampling)": [[443, "libcasm.monte.sampling.CompletionCheckResults"]], "clocktime (libcasm.monte.sampling.completioncheckresults property)": [[444, "libcasm.monte.sampling.CompletionCheckResults.clocktime"]], "convergence_check_results (libcasm.monte.sampling.completioncheckresults property)": [[445, "libcasm.monte.sampling.CompletionCheckResults.convergence_check_results"]], "count (libcasm.monte.sampling.completioncheckresults property)": [[446, "libcasm.monte.sampling.CompletionCheckResults.count"]], "equilibration_check_results (libcasm.monte.sampling.completioncheckresults property)": [[447, "libcasm.monte.sampling.CompletionCheckResults.equilibration_check_results"]], "full_reset() (libcasm.monte.sampling.completioncheckresults method)": [[448, "libcasm.monte.sampling.CompletionCheckResults.full_reset"]], "has_all_minimums_met (libcasm.monte.sampling.completioncheckresults property)": [[449, "libcasm.monte.sampling.CompletionCheckResults.has_all_minimums_met"]], "has_any_maximum_met (libcasm.monte.sampling.completioncheckresults property)": [[450, "libcasm.monte.sampling.CompletionCheckResults.has_any_maximum_met"]], "is_complete (libcasm.monte.sampling.completioncheckresults property)": [[451, "libcasm.monte.sampling.CompletionCheckResults.is_complete"]], "n_samples (libcasm.monte.sampling.completioncheckresults property)": [[452, "libcasm.monte.sampling.CompletionCheckResults.n_samples"]], "n_samples_at_convergence_check (libcasm.monte.sampling.completioncheckresults property)": [[453, "libcasm.monte.sampling.CompletionCheckResults.n_samples_at_convergence_check"]], "params (libcasm.monte.sampling.completioncheckresults property)": [[454, "libcasm.monte.sampling.CompletionCheckResults.params"]], "partial_reset() (libcasm.monte.sampling.completioncheckresults method)": [[455, "libcasm.monte.sampling.CompletionCheckResults.partial_reset"]], "time (libcasm.monte.sampling.completioncheckresults property)": [[456, "libcasm.monte.sampling.CompletionCheckResults.time"]], "to_dict() (libcasm.monte.sampling.completioncheckresults method)": [[457, "libcasm.monte.sampling.CompletionCheckResults.to_dict"]], "convergencecheckresults (class in libcasm.monte.sampling)": [[458, "libcasm.monte.sampling.ConvergenceCheckResults"]], "n_samples_for_statistics (libcasm.monte.sampling.convergencecheckresults property)": [[459, "libcasm.monte.sampling.ConvergenceCheckResults.N_samples_for_statistics"]], "all_converged (libcasm.monte.sampling.convergencecheckresults property)": [[460, "libcasm.monte.sampling.ConvergenceCheckResults.all_converged"]], "individual_results (libcasm.monte.sampling.convergencecheckresults property)": [[461, "libcasm.monte.sampling.ConvergenceCheckResults.individual_results"]], "to_dict() (libcasm.monte.sampling.convergencecheckresults method)": [[462, "libcasm.monte.sampling.ConvergenceCheckResults.to_dict"]], "convergenceresultmap (class in libcasm.monte.sampling)": [[463, "libcasm.monte.sampling.ConvergenceResultMap"]], "items() (libcasm.monte.sampling.convergenceresultmap method)": [[464, "libcasm.monte.sampling.ConvergenceResultMap.items"]], "keys() (libcasm.monte.sampling.convergenceresultmap method)": [[465, "libcasm.monte.sampling.ConvergenceResultMap.keys"]], "values() (libcasm.monte.sampling.convergenceresultmap method)": [[466, "libcasm.monte.sampling.ConvergenceResultMap.values"]], "cutoffcheckparams (class in libcasm.monte.sampling)": [[467, "libcasm.monte.sampling.CutoffCheckParams"]], "from_dict() (libcasm.monte.sampling.cutoffcheckparams static method)": [[468, "libcasm.monte.sampling.CutoffCheckParams.from_dict"]], "max_clocktime (libcasm.monte.sampling.cutoffcheckparams property)": [[469, "libcasm.monte.sampling.CutoffCheckParams.max_clocktime"]], "max_count (libcasm.monte.sampling.cutoffcheckparams property)": [[470, "libcasm.monte.sampling.CutoffCheckParams.max_count"]], "max_sample (libcasm.monte.sampling.cutoffcheckparams property)": [[471, "libcasm.monte.sampling.CutoffCheckParams.max_sample"]], "max_time (libcasm.monte.sampling.cutoffcheckparams property)": [[472, "libcasm.monte.sampling.CutoffCheckParams.max_time"]], "min_clocktime (libcasm.monte.sampling.cutoffcheckparams property)": [[473, "libcasm.monte.sampling.CutoffCheckParams.min_clocktime"]], "min_count (libcasm.monte.sampling.cutoffcheckparams property)": [[474, "libcasm.monte.sampling.CutoffCheckParams.min_count"]], "min_sample (libcasm.monte.sampling.cutoffcheckparams property)": [[475, "libcasm.monte.sampling.CutoffCheckParams.min_sample"]], "min_time (libcasm.monte.sampling.cutoffcheckparams property)": [[476, "libcasm.monte.sampling.CutoffCheckParams.min_time"]], "to_dict() (libcasm.monte.sampling.cutoffcheckparams method)": [[477, "libcasm.monte.sampling.CutoffCheckParams.to_dict"]], "equilibrationcheckresults (class in libcasm.monte.sampling)": [[478, "libcasm.monte.sampling.EquilibrationCheckResults"]], "n_samples_for_all_to_equilibrate (libcasm.monte.sampling.equilibrationcheckresults property)": [[479, "libcasm.monte.sampling.EquilibrationCheckResults.N_samples_for_all_to_equilibrate"]], "all_equilibrated (libcasm.monte.sampling.equilibrationcheckresults property)": [[480, "libcasm.monte.sampling.EquilibrationCheckResults.all_equilibrated"]], "individual_results (libcasm.monte.sampling.equilibrationcheckresults property)": [[481, "libcasm.monte.sampling.EquilibrationCheckResults.individual_results"]], "to_dict() (libcasm.monte.sampling.equilibrationcheckresults method)": [[482, "libcasm.monte.sampling.EquilibrationCheckResults.to_dict"]], "equilibrationresultmap (class in libcasm.monte.sampling)": [[483, "libcasm.monte.sampling.EquilibrationResultMap"]], "items() (libcasm.monte.sampling.equilibrationresultmap method)": [[484, "libcasm.monte.sampling.EquilibrationResultMap.items"]], "keys() (libcasm.monte.sampling.equilibrationresultmap method)": [[485, "libcasm.monte.sampling.EquilibrationResultMap.keys"]], "values() (libcasm.monte.sampling.equilibrationresultmap method)": [[486, "libcasm.monte.sampling.EquilibrationResultMap.values"]], "individualconvergenceresult (class in libcasm.monte.sampling)": [[487, "libcasm.monte.sampling.IndividualConvergenceResult"]], "is_converged (libcasm.monte.sampling.individualconvergenceresult property)": [[488, "libcasm.monte.sampling.IndividualConvergenceResult.is_converged"]], "requested_precision (libcasm.monte.sampling.individualconvergenceresult property)": [[489, "libcasm.monte.sampling.IndividualConvergenceResult.requested_precision"]], "stats (libcasm.monte.sampling.individualconvergenceresult property)": [[490, "libcasm.monte.sampling.IndividualConvergenceResult.stats"]], "to_dict() (libcasm.monte.sampling.individualconvergenceresult method)": [[491, "libcasm.monte.sampling.IndividualConvergenceResult.to_dict"]], "individualequilibrationresult (class in libcasm.monte.sampling)": [[492, "libcasm.monte.sampling.IndividualEquilibrationResult"]], "n_samples_for_equilibration (libcasm.monte.sampling.individualequilibrationresult property)": [[493, "libcasm.monte.sampling.IndividualEquilibrationResult.N_samples_for_equilibration"]], "is_equilibrated (libcasm.monte.sampling.individualequilibrationresult property)": [[494, "libcasm.monte.sampling.IndividualEquilibrationResult.is_equilibrated"]], "to_dict() (libcasm.monte.sampling.individualequilibrationresult method)": [[495, "libcasm.monte.sampling.IndividualEquilibrationResult.to_dict"]], "requestedprecision (class in libcasm.monte.sampling)": [[496, "libcasm.monte.sampling.RequestedPrecision"]], "abs_convergence_is_required (libcasm.monte.sampling.requestedprecision property)": [[497, "libcasm.monte.sampling.RequestedPrecision.abs_convergence_is_required"]], "abs_precision (libcasm.monte.sampling.requestedprecision property)": [[498, "libcasm.monte.sampling.RequestedPrecision.abs_precision"]], "from_dict() (libcasm.monte.sampling.requestedprecision static method)": [[499, "libcasm.monte.sampling.RequestedPrecision.from_dict"]], "rel_convergence_is_required (libcasm.monte.sampling.requestedprecision property)": [[500, "libcasm.monte.sampling.RequestedPrecision.rel_convergence_is_required"]], "rel_precision (libcasm.monte.sampling.requestedprecision property)": [[501, "libcasm.monte.sampling.RequestedPrecision.rel_precision"]], "to_dict() (libcasm.monte.sampling.requestedprecision method)": [[502, "libcasm.monte.sampling.RequestedPrecision.to_dict"]], "requestedprecisionconstructor (class in libcasm.monte.sampling)": [[503, "libcasm.monte.sampling.RequestedPrecisionConstructor"]], "set_precision() (libcasm.monte.sampling.requestedprecisionconstructor method)": [[504, "libcasm.monte.sampling.RequestedPrecisionConstructor.set_precision"]], "requestedprecisionmap (class in libcasm.monte.sampling)": [[505, "libcasm.monte.sampling.RequestedPrecisionMap"]], "items() (libcasm.monte.sampling.requestedprecisionmap method)": [[506, "libcasm.monte.sampling.RequestedPrecisionMap.items"]], "keys() (libcasm.monte.sampling.requestedprecisionmap method)": [[507, "libcasm.monte.sampling.RequestedPrecisionMap.keys"]], "values() (libcasm.monte.sampling.requestedprecisionmap method)": [[508, "libcasm.monte.sampling.RequestedPrecisionMap.values"]], "sample_method (class in libcasm.monte.sampling)": [[509, "libcasm.monte.sampling.SAMPLE_METHOD"]], "custom (libcasm.monte.sampling.sample_method attribute)": [[510, "libcasm.monte.sampling.SAMPLE_METHOD.CUSTOM"]], "linear (libcasm.monte.sampling.sample_method attribute)": [[511, "libcasm.monte.sampling.SAMPLE_METHOD.LINEAR"]], "log (libcasm.monte.sampling.sample_method attribute)": [[512, "libcasm.monte.sampling.SAMPLE_METHOD.LOG"]], "name (libcasm.monte.sampling.sample_method property)": [[513, "libcasm.monte.sampling.SAMPLE_METHOD.name"]], "value (libcasm.monte.sampling.sample_method property)": [[514, "libcasm.monte.sampling.SAMPLE_METHOD.value"]], "sample_mode (class in libcasm.monte.sampling)": [[515, "libcasm.monte.sampling.SAMPLE_MODE"]], "by_pass (libcasm.monte.sampling.sample_mode attribute)": [[516, "libcasm.monte.sampling.SAMPLE_MODE.BY_PASS"]], "by_step (libcasm.monte.sampling.sample_mode attribute)": [[517, "libcasm.monte.sampling.SAMPLE_MODE.BY_STEP"]], "by_time (libcasm.monte.sampling.sample_mode attribute)": [[518, "libcasm.monte.sampling.SAMPLE_MODE.BY_TIME"]], "name (libcasm.monte.sampling.sample_mode property)": [[519, "libcasm.monte.sampling.SAMPLE_MODE.name"]], "value (libcasm.monte.sampling.sample_mode property)": [[520, "libcasm.monte.sampling.SAMPLE_MODE.value"]], "sampler (class in libcasm.monte.sampling)": [[521, "libcasm.monte.sampling.Sampler"]], "append() (libcasm.monte.sampling.sampler method)": [[522, "libcasm.monte.sampling.Sampler.append"]], "clear() (libcasm.monte.sampling.sampler method)": [[523, "libcasm.monte.sampling.Sampler.clear"]], "component() (libcasm.monte.sampling.sampler method)": [[524, "libcasm.monte.sampling.Sampler.component"]], "component_names() (libcasm.monte.sampling.sampler method)": [[525, "libcasm.monte.sampling.Sampler.component_names"]], "n_components() (libcasm.monte.sampling.sampler method)": [[526, "libcasm.monte.sampling.Sampler.n_components"]], "n_samples() (libcasm.monte.sampling.sampler method)": [[527, "libcasm.monte.sampling.Sampler.n_samples"]], "sample() (libcasm.monte.sampling.sampler method)": [[528, "libcasm.monte.sampling.Sampler.sample"]], "sample_capacity() (libcasm.monte.sampling.sampler method)": [[529, "libcasm.monte.sampling.Sampler.sample_capacity"]], "set_capacity_increment() (libcasm.monte.sampling.sampler method)": [[530, "libcasm.monte.sampling.Sampler.set_capacity_increment"]], "set_sample_capacity() (libcasm.monte.sampling.sampler method)": [[531, "libcasm.monte.sampling.Sampler.set_sample_capacity"]], "set_values() (libcasm.monte.sampling.sampler method)": [[532, "libcasm.monte.sampling.Sampler.set_values"]], "shape() (libcasm.monte.sampling.sampler method)": [[533, "libcasm.monte.sampling.Sampler.shape"]], "values() (libcasm.monte.sampling.sampler method)": [[534, "libcasm.monte.sampling.Sampler.values"]], "samplercomponent (class in libcasm.monte.sampling)": [[535, "libcasm.monte.sampling.SamplerComponent"]], "component_index (libcasm.monte.sampling.samplercomponent property)": [[536, "libcasm.monte.sampling.SamplerComponent.component_index"]], "component_name (libcasm.monte.sampling.samplercomponent property)": [[537, "libcasm.monte.sampling.SamplerComponent.component_name"]], "sampler_name (libcasm.monte.sampling.samplercomponent property)": [[538, "libcasm.monte.sampling.SamplerComponent.sampler_name"]], "samplermap (class in libcasm.monte.sampling)": [[539, "libcasm.monte.sampling.SamplerMap"]], "items() (libcasm.monte.sampling.samplermap method)": [[540, "libcasm.monte.sampling.SamplerMap.items"]], "keys() (libcasm.monte.sampling.samplermap method)": [[541, "libcasm.monte.sampling.SamplerMap.keys"]], "values() (libcasm.monte.sampling.samplermap method)": [[542, "libcasm.monte.sampling.SamplerMap.values"]], "samplingparams (class in libcasm.monte.sampling)": [[543, "libcasm.monte.sampling.SamplingParams"]], "base (libcasm.monte.sampling.samplingparams property)": [[544, "libcasm.monte.sampling.SamplingParams.base"]], "begin (libcasm.monte.sampling.samplingparams property)": [[545, "libcasm.monte.sampling.SamplingParams.begin"]], "do_sample_time (libcasm.monte.sampling.samplingparams property)": [[546, "libcasm.monte.sampling.SamplingParams.do_sample_time"]], "do_sample_trajectory (libcasm.monte.sampling.samplingparams property)": [[547, "libcasm.monte.sampling.SamplingParams.do_sample_trajectory"]], "period (libcasm.monte.sampling.samplingparams property)": [[548, "libcasm.monte.sampling.SamplingParams.period"]], "sample_method (libcasm.monte.sampling.samplingparams property)": [[549, "libcasm.monte.sampling.SamplingParams.sample_method"]], "sample_mode (libcasm.monte.sampling.samplingparams property)": [[550, "libcasm.monte.sampling.SamplingParams.sample_mode"]], "sampler_names (libcasm.monte.sampling.samplingparams property)": [[551, "libcasm.monte.sampling.SamplingParams.sampler_names"]], "shift (libcasm.monte.sampling.samplingparams property)": [[552, "libcasm.monte.sampling.SamplingParams.shift"]], "stochastic_sample_period (libcasm.monte.sampling.samplingparams property)": [[553, "libcasm.monte.sampling.SamplingParams.stochastic_sample_period"]], "statesamplingfunction (class in libcasm.monte.sampling)": [[554, "libcasm.monte.sampling.StateSamplingFunction"]], "component_names (libcasm.monte.sampling.statesamplingfunction property)": [[555, "libcasm.monte.sampling.StateSamplingFunction.component_names"]], "description (libcasm.monte.sampling.statesamplingfunction property)": [[556, "libcasm.monte.sampling.StateSamplingFunction.description"]], "function (libcasm.monte.sampling.statesamplingfunction property)": [[557, "libcasm.monte.sampling.StateSamplingFunction.function"]], "name (libcasm.monte.sampling.statesamplingfunction property)": [[558, "libcasm.monte.sampling.StateSamplingFunction.name"]], "shape (libcasm.monte.sampling.statesamplingfunction property)": [[559, "libcasm.monte.sampling.StateSamplingFunction.shape"]], "statesamplingfunctionmap (class in libcasm.monte.sampling)": [[560, "libcasm.monte.sampling.StateSamplingFunctionMap"]], "items() (libcasm.monte.sampling.statesamplingfunctionmap method)": [[561, "libcasm.monte.sampling.StateSamplingFunctionMap.items"]], "keys() (libcasm.monte.sampling.statesamplingfunctionmap method)": [[562, "libcasm.monte.sampling.StateSamplingFunctionMap.keys"]], "values() (libcasm.monte.sampling.statesamplingfunctionmap method)": [[563, "libcasm.monte.sampling.StateSamplingFunctionMap.values"]], "all_minimums_met() (in module libcasm.monte.sampling)": [[564, "libcasm.monte.sampling.all_minimums_met"]], "any_maximum_met() (in module libcasm.monte.sampling)": [[565, "libcasm.monte.sampling.any_maximum_met"]], "colmajor_component_names() (in module libcasm.monte.sampling)": [[566, "libcasm.monte.sampling.colmajor_component_names"]], "component_convergence_check() (in module libcasm.monte.sampling)": [[567, "libcasm.monte.sampling.component_convergence_check"]], "converge() (in module libcasm.monte.sampling)": [[568, "libcasm.monte.sampling.converge"]], "convergence_check() (in module libcasm.monte.sampling)": [[569, "libcasm.monte.sampling.convergence_check"]], "default_component_names() (in module libcasm.monte.sampling)": [[570, "libcasm.monte.sampling.default_component_names"]], "default_equilibration_check() (in module libcasm.monte.sampling)": [[571, "libcasm.monte.sampling.default_equilibration_check"]], "get_n_samples() (in module libcasm.monte.sampling)": [[572, "libcasm.monte.sampling.get_n_samples"]], "jsonstatesamplingfunction (class in libcasm.monte.sampling)": [[573, "libcasm.monte.sampling.jsonStateSamplingFunction"]], "description (libcasm.monte.sampling.jsonstatesamplingfunction property)": [[574, "libcasm.monte.sampling.jsonStateSamplingFunction.description"]], "function (libcasm.monte.sampling.jsonstatesamplingfunction property)": [[575, "libcasm.monte.sampling.jsonStateSamplingFunction.function"]], "name (libcasm.monte.sampling.jsonstatesamplingfunction property)": [[576, "libcasm.monte.sampling.jsonStateSamplingFunction.name"]], "jsonstatesamplingfunctionmap (class in libcasm.monte.sampling)": [[577, "libcasm.monte.sampling.jsonStateSamplingFunctionMap"]], "items() (libcasm.monte.sampling.jsonstatesamplingfunctionmap method)": [[578, "libcasm.monte.sampling.jsonStateSamplingFunctionMap.items"]], "keys() (libcasm.monte.sampling.jsonstatesamplingfunctionmap method)": [[579, "libcasm.monte.sampling.jsonStateSamplingFunctionMap.keys"]], "values() (libcasm.monte.sampling.jsonstatesamplingfunctionmap method)": [[580, "libcasm.monte.sampling.jsonStateSamplingFunctionMap.values"]], "matrix_as_vector() (in module libcasm.monte.sampling)": [[581, "libcasm.monte.sampling.matrix_as_vector"]], "scalar_as_vector() (in module libcasm.monte.sampling)": [[582, "libcasm.monte.sampling.scalar_as_vector"]]}})